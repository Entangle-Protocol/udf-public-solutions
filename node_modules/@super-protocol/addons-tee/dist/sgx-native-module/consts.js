"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PckFlag = exports.KeyPolicy = exports.KeyType = void 0;
var KeyType;
(function (KeyType) {
    // Launch key
    KeyType[KeyType["SGX_KEYSELECT_EINITTOKEN"] = 0] = "SGX_KEYSELECT_EINITTOKEN";
    // Provisioning key
    KeyType[KeyType["SGX_KEYSELECT_PROVISION"] = 1] = "SGX_KEYSELECT_PROVISION";
    // Provisioning seal key
    KeyType[KeyType["SGX_KEYSELECT_PROVISION_SEAL"] = 2] = "SGX_KEYSELECT_PROVISION_SEAL";
    // Report key
    KeyType[KeyType["SGX_KEYSELECT_REPORT"] = 3] = "SGX_KEYSELECT_REPORT";
    // Seal key
    KeyType[KeyType["SGX_KEYSELECT_SEAL"] = 4] = "SGX_KEYSELECT_SEAL";
})(KeyType = exports.KeyType || (exports.KeyType = {}));
var KeyPolicy;
(function (KeyPolicy) {
    // Derive key using the enclave’s ENCLAVE measurement register
    KeyPolicy[KeyPolicy["SGX_KEYPOLICY_MRENCLAVE"] = 1] = "SGX_KEYPOLICY_MRENCLAVE";
    // Derive key using the enclave’s SIGNER measurement register
    KeyPolicy[KeyPolicy["SGX_KEYPOLICY_MRSIGNER"] = 2] = "SGX_KEYPOLICY_MRSIGNER";
    // Derive key without the enclave's ISVPRODID
    KeyPolicy[KeyPolicy["SGX_KEYPOLICY_NOISVPRODID"] = 4] = "SGX_KEYPOLICY_NOISVPRODID";
    // Derive key with the enclave's CONFIGID
    KeyPolicy[KeyPolicy["SGX_KEYPOLICY_CONFIGID"] = 8] = "SGX_KEYPOLICY_CONFIGID";
    // Derive key with the enclave's ISVFAMILYID
    KeyPolicy[KeyPolicy["SGX_KEYPOLICY_ISVFAMILYID"] = 16] = "SGX_KEYPOLICY_ISVFAMILYID";
    // Derive key with the enclave's ISVEXTPRODID
    KeyPolicy[KeyPolicy["SGX_KEYPOLICY_ISVEXTPRODID"] = 32] = "SGX_KEYPOLICY_ISVEXTPRODID";
})(KeyPolicy = exports.KeyPolicy || (exports.KeyPolicy = {}));
var PckFlag;
(function (PckFlag) {
    PckFlag[PckFlag["PCK_FLAG_FALSE"] = 0] = "PCK_FLAG_FALSE";
    PckFlag[PckFlag["PCK_FLAG_TRUE"] = 1] = "PCK_FLAG_TRUE";
    PckFlag[PckFlag["PCK_FLAG_UNDEFINED"] = 2] = "PCK_FLAG_UNDEFINED";
})(PckFlag = exports.PckFlag || (exports.PckFlag = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NneC1uYXRpdmUtbW9kdWxlL2NvbnN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxJQUFZLE9BZVg7QUFmRCxXQUFZLE9BQU87SUFDZixhQUFhO0lBQ2IsNkVBQWlDLENBQUE7SUFFakMsbUJBQW1CO0lBQ25CLDJFQUFnQyxDQUFBO0lBRWhDLHdCQUF3QjtJQUN4QixxRkFBcUMsQ0FBQTtJQUVyQyxhQUFhO0lBQ2IscUVBQTZCLENBQUE7SUFFN0IsV0FBVztJQUNYLGlFQUEyQixDQUFBO0FBQy9CLENBQUMsRUFmVyxPQUFPLEdBQVAsZUFBTyxLQUFQLGVBQU8sUUFlbEI7QUFFRCxJQUFZLFNBa0JYO0FBbEJELFdBQVksU0FBUztJQUNqQiw4REFBOEQ7SUFDOUQsK0VBQWdDLENBQUE7SUFFaEMsNkRBQTZEO0lBQzdELDZFQUErQixDQUFBO0lBRS9CLDZDQUE2QztJQUM3QyxtRkFBa0MsQ0FBQTtJQUVsQyx5Q0FBeUM7SUFDekMsNkVBQStCLENBQUE7SUFFL0IsNENBQTRDO0lBQzVDLG9GQUFrQyxDQUFBO0lBRWxDLDZDQUE2QztJQUM3QyxzRkFBbUMsQ0FBQTtBQUN2QyxDQUFDLEVBbEJXLFNBQVMsR0FBVCxpQkFBUyxLQUFULGlCQUFTLFFBa0JwQjtBQUVELElBQVksT0FJWDtBQUpELFdBQVksT0FBTztJQUNmLHlEQUFrQixDQUFBO0lBQ2xCLHVEQUFhLENBQUE7SUFDYixpRUFBa0IsQ0FBQTtBQUN0QixDQUFDLEVBSlcsT0FBTyxHQUFQLGVBQU8sS0FBUCxlQUFPLFFBSWxCIn0=