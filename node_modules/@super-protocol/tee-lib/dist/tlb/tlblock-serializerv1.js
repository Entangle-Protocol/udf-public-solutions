"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TLBlockSerializerV1 = void 0;
const gzip = __importStar(require("gzip-js"));
const msgpack_1 = require("@msgpack/msgpack");
const errors_1 = require("./errors");
const SERIALIZER_VERSION = 1;
class TLBlockSerializerV1 {
    unserializeTlb(blob) {
        const tlb = (0, msgpack_1.decode)(blob, {
            maxBinLength: 8192,
            maxArrayLength: 256,
            maxExtLength: 256,
            maxMapLength: 128,
            maxStrLength: 128,
        });
        if (tlb.v !== SERIALIZER_VERSION) {
            throw new errors_1.TLBlockSerializerError('tlb has invalid or unsupported version');
        }
        const data = (0, msgpack_1.decode)(tlb.data);
        return {
            quote: data.quote.format === 'gzip' ? new Uint8Array(gzip.unzip(tlb.quote)) : tlb.quote,
            data,
            dataBlob: tlb.data,
        };
    }
    serializeTlb(tlb, tlbMetadata) {
        const processedQuote = tlbMetadata.quote.format === 'gzip' ? gzip.zip(tlb.quote, { level: 9 }) : tlb.quote;
        return (0, msgpack_1.encode)({
            v: SERIALIZER_VERSION,
            quote: new Uint8Array(processedQuote),
            data: new Uint8Array(tlb.data),
        });
    }
    serializeMetadata(tlbMetadata) {
        return (0, msgpack_1.encode)(tlbMetadata, { sortKeys: true });
    }
    serializeAnyData(data) {
        const quote = {
            v: SERIALIZER_VERSION,
            quote: data,
        };
        return (0, msgpack_1.encode)(quote, { sortKeys: true });
    }
}
exports.TLBlockSerializerV1 = TLBlockSerializerV1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGxibG9jay1zZXJpYWxpemVydjEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGxiL3RsYmxvY2stc2VyaWFsaXplcnYxLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsOENBQWdDO0FBQ2hDLDhDQUFrRDtBQVVsRCxxQ0FBa0Q7QUFFbEQsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLENBQUM7QUFFN0IsTUFBYSxtQkFBbUI7SUFDOUIsY0FBYyxDQUFDLElBQWdCO1FBTzdCLE1BQU0sR0FBRyxHQUFxQyxJQUFBLGdCQUFNLEVBQUMsSUFBSSxFQUFFO1lBQ3pELFlBQVksRUFBRSxJQUFJO1lBQ2xCLGNBQWMsRUFBRSxHQUFHO1lBQ25CLFlBQVksRUFBRSxHQUFHO1lBQ2pCLFlBQVksRUFBRSxHQUFHO1lBQ2pCLFlBQVksRUFBRSxHQUFHO1NBQ2xCLENBQUMsQ0FBQztRQUVILElBQUksR0FBRyxDQUFDLENBQUMsS0FBSyxrQkFBa0IsRUFBRTtZQUNoQyxNQUFNLElBQUksK0JBQXNCLENBQUMsd0NBQXdDLENBQUMsQ0FBQztTQUM1RTtRQUVELE1BQU0sSUFBSSxHQUFxQyxJQUFBLGdCQUFNLEVBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWhFLE9BQU87WUFDTCxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSztZQUN2RixJQUFJO1lBRUosUUFBUSxFQUFFLEdBQUcsQ0FBQyxJQUFJO1NBQ25CLENBQUM7SUFDSixDQUFDO0lBRUQsWUFBWSxDQUFDLEdBQWdCLEVBQUUsV0FBNEI7UUFDekQsTUFBTSxjQUFjLEdBQ2xCLFdBQVcsQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFFdEYsT0FBTyxJQUFBLGdCQUFNLEVBQUM7WUFDWixDQUFDLEVBQUUsa0JBQWtCO1lBQ3JCLEtBQUssRUFBRSxJQUFJLFVBQVUsQ0FBQyxjQUFjLENBQUM7WUFDckMsSUFBSSxFQUFFLElBQUksVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7U0FDL0IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGlCQUFpQixDQUFDLFdBQXdCO1FBQ3hDLE9BQU8sSUFBQSxnQkFBTSxFQUFDLFdBQVcsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxJQUFTO1FBQ3hCLE1BQU0sS0FBSyxHQUFHO1lBQ1osQ0FBQyxFQUFFLGtCQUFrQjtZQUNyQixLQUFLLEVBQUUsSUFBSTtTQUNaLENBQUM7UUFFRixPQUFPLElBQUEsZ0JBQU0sRUFBQyxLQUFLLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUMzQyxDQUFDO0NBQ0Y7QUFyREQsa0RBcURDIn0=