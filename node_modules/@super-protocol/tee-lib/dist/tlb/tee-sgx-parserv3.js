"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeeSgxParserV3 = void 0;
const buffer_1 = require("buffer/");
const errors_1 = require("./errors");
/**
 * Sgx quote parser (quote 3 version).
 *
 * https://download.01.org/intel-sgx/dcap-1.0.1/docs/Intel_SGX_ECDSA_QuoteGenReference_DCAP_API_Linux_1.0.1.pdf
 */
class TeeSgxParserV3 {
    getDataAndAdvance(blob, size) {
        const buf = buffer_1.Buffer.from(blob.data.subarray(0, size));
        blob.data = buffer_1.Buffer.from(blob.data.subarray(size));
        return buf;
    }
    parseQuote(data) {
        const { quoteHeaderSize, reportSize, userDataOffset, userDataSize, ecdsaP256SignatureSize, ecdsaP256PublicKeySize, } = TeeSgxParserV3;
        if (data.length < quoteHeaderSize + reportSize) {
            throw new errors_1.TeeSgxParserError('data has invalid length');
        }
        const quoteRemainder = { data: buffer_1.Buffer.from(data) };
        const quoteHeader = this.getDataAndAdvance(quoteRemainder, quoteHeaderSize);
        const report = this.getDataAndAdvance(quoteRemainder, reportSize);
        const version = quoteHeader.readUInt16LE(0);
        if (version != 3) {
            throw new errors_1.TeeSgxParserError('quote header has invalid or unsupported version');
        }
        const attestationKeyType = quoteHeader.readUInt16LE(2);
        if (attestationKeyType > 3) {
            throw new errors_1.TeeSgxParserError('quote header has invalid or unsupported attestation key type');
        }
        const userData = quoteHeader.slice(userDataOffset, userDataOffset + userDataSize);
        const quoteSignatureDateLen = quoteRemainder.data.readUInt32LE(0);
        quoteRemainder.data = buffer_1.Buffer.from(quoteRemainder.data.subarray(4));
        if (quoteSignatureDateLen != quoteRemainder.data.length) {
            throw new errors_1.TeeSgxParserError(`quoteSignatureDateLen has invalid length: ${quoteRemainder.data.length} instead of ${quoteSignatureDateLen} expected`);
        }
        const rawQuoteSignatureDataRemainder = {
            data: this.getDataAndAdvance(quoteRemainder, quoteSignatureDateLen),
        };
        const isvEnclaveReportSignature = this.getDataAndAdvance(rawQuoteSignatureDataRemainder, ecdsaP256SignatureSize);
        const ecdsaAttestationKey = this.getDataAndAdvance(rawQuoteSignatureDataRemainder, ecdsaP256PublicKeySize);
        const qeReport = this.getDataAndAdvance(rawQuoteSignatureDataRemainder, reportSize);
        const qeReportSignature = this.getDataAndAdvance(rawQuoteSignatureDataRemainder, ecdsaP256SignatureSize);
        const qeAuthenticationDataSize = rawQuoteSignatureDataRemainder.data.readUInt16LE(0);
        rawQuoteSignatureDataRemainder.data = buffer_1.Buffer.from(rawQuoteSignatureDataRemainder.data.subarray(2));
        if (rawQuoteSignatureDataRemainder.data.length < qeAuthenticationDataSize) {
            throw new errors_1.TeeSgxParserError(`qeAuthenticationDataSize has invalid length: ${rawQuoteSignatureDataRemainder.data.length} instead of ${qeAuthenticationDataSize} expected`);
        }
        const qeAuthenticationData = this.getDataAndAdvance(rawQuoteSignatureDataRemainder, qeAuthenticationDataSize);
        const qeCertificationDataType = rawQuoteSignatureDataRemainder.data.readUInt16LE(0);
        if (qeCertificationDataType < 1 || qeCertificationDataType > 7) {
            throw new errors_1.TeeSgxParserError(`certificationDataType has invalid value: ${qeCertificationDataType}`);
        }
        const certificationDataSize = rawQuoteSignatureDataRemainder.data.readUInt32LE(2);
        const qeCertificationData = rawQuoteSignatureDataRemainder.data.subarray(2 + 4);
        if (certificationDataSize != qeCertificationData.length) {
            throw new errors_1.TeeSgxParserError(`certificationDataSize has invalid length: $PqeCertificationData.length} instead of ${certificationDataSize} expected`);
        }
        return {
            rawHeader: quoteHeader,
            header: {
                version,
                attestationKeyType,
                userData,
            },
            report,
            isvEnclaveReportSignature,
            ecdsaAttestationKey,
            qeReport,
            qeReportSignature,
            qeAuthenticationData,
            qeCertificationDataType,
            qeCertificationData,
        };
    }
    parseReport(data) {
        const { reportSize, cpuSvnSize, reportMrEnclaveOffset, reportMrEnclaveSize, reportMrSignerOffset, reportMrSignerSize, reportDataOffset, reportUserDataSize, reportUserDataSHA256Size, } = TeeSgxParserV3;
        if (data.length < reportSize) {
            throw new errors_1.TeeSgxParserError('data has invalid length');
        }
        const report = buffer_1.Buffer.from(data);
        const cpuSvn = report.slice(0, cpuSvnSize).toString('hex');
        const mrEnclave = report.slice(reportMrEnclaveOffset, reportMrEnclaveOffset + reportMrEnclaveSize);
        const mrSigner = report.slice(reportMrSignerOffset, reportMrSignerOffset + reportMrSignerSize);
        const userData = report.slice(reportDataOffset, reportDataOffset + reportUserDataSize);
        const dataHash = report.slice(reportDataOffset, reportDataOffset + reportUserDataSHA256Size);
        return {
            cpuSvn,
            mrEnclave,
            mrSigner,
            userData,
            dataHash,
        };
    }
}
exports.TeeSgxParserV3 = TeeSgxParserV3;
TeeSgxParserV3.quoteHeaderSize = 48;
TeeSgxParserV3.reportSize = 384;
TeeSgxParserV3.userDataOffset = 28;
TeeSgxParserV3.userDataSize = 20;
TeeSgxParserV3.cpuSvnSize = 16;
TeeSgxParserV3.reportMrEnclaveOffset = 64;
TeeSgxParserV3.reportMrEnclaveSize = 32;
TeeSgxParserV3.reportMrSignerOffset = TeeSgxParserV3.reportMrEnclaveOffset + TeeSgxParserV3.reportMrEnclaveSize + /* reserved */ 32;
TeeSgxParserV3.reportMrSignerSize = 32;
TeeSgxParserV3.reportDataOffset = TeeSgxParserV3.reportMrSignerOffset +
    TeeSgxParserV3.reportMrSignerSize +
    /* reserved */ 96 +
    /* ISVProdID */ 2 +
    /* ISVSVN */ 2 +
    /* reserved */ 60;
TeeSgxParserV3.reportUserDataSize = 64;
TeeSgxParserV3.reportUserDataSHA256Size = 32; /* 64 in report, but we need 32 only for sha256 hash */
TeeSgxParserV3.ecdsaP256SignatureSize = 64;
TeeSgxParserV3.ecdsaP256PublicKeySize = 64;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVlLXNneC1wYXJzZXJ2My5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90bGIvdGVlLXNneC1wYXJzZXJ2My50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxvQ0FBeUM7QUFDekMscUNBQTZDO0FBSTdDOzs7O0dBSUc7QUFDSCxNQUFhLGNBQWM7SUF1QmpCLGlCQUFpQixDQUFDLElBQW9CLEVBQUUsSUFBWTtRQUMxRCxNQUFNLEdBQUcsR0FBRyxlQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxJQUFJLEdBQUcsZUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBRWhELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUVELFVBQVUsQ0FBQyxJQUFnQjtRQUN6QixNQUFNLEVBQ0osZUFBZSxFQUNmLFVBQVUsRUFDVixjQUFjLEVBQ2QsWUFBWSxFQUNaLHNCQUFzQixFQUN0QixzQkFBc0IsR0FDdkIsR0FBRyxjQUFjLENBQUM7UUFFbkIsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLGVBQWUsR0FBRyxVQUFVLEVBQUU7WUFDOUMsTUFBTSxJQUFJLDBCQUFpQixDQUFDLHlCQUF5QixDQUFDLENBQUM7U0FDeEQ7UUFDRCxNQUFNLGNBQWMsR0FBRyxFQUFFLElBQUksRUFBRSxlQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDakQsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGNBQWMsRUFBRSxlQUFlLENBQUMsQ0FBQztRQUM1RSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsY0FBYyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRWxFLE1BQU0sT0FBTyxHQUFH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