"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZeroTeeDeviceService = void 0;
const calculate_hash_1 = require("../helpers/calculate-hash");
/**
 * For testing purpose only.
 */
class ZeroTeeDeviceService {
    constructor(params) {
        this.logger = params.logger?.child({ name: ZeroTeeDeviceService.name });
    }
    parseAndValidateTlsCertificate() {
        this.logger?.trace({ method: 'parseAndValidateTlsCertificate' }, 'Get');
        const result = {
            dataHash: Buffer.from('000102030405060708090a0b0c0d0f', 'hex'),
            mrEnclave: Buffer.from('000102030405060708090a0b0c0d0f000102030405060708090a0b0c0d0f0102', 'hex'),
            mrSigner: Buffer.from('000102030405060708090a0b0c0d0f000102030405060708090a0b0c0d0f0102', 'hex'),
            userData: Buffer.from('000102030405060708090a0b0c0d0f', 'hex'),
        };
        return Promise.resolve(result);
    }
    getUniqKey(salt) {
        this.logger?.trace({ method: 'getSharedUniqKey' }, 'Get');
        return Promise.resolve((0, calculate_hash_1.calculateHash)(Buffer.concat([Buffer.alloc(16), salt])));
    }
    getDeviceId() {
        this.logger?.trace({ method: 'getDeviceId' }, 'Get');
        return Promise.resolve(Buffer.from('0102030405060708090a0b0c0d0e0f10', 'hex'));
    }
    async getDataOf(userData) {
        const logger = this.logger?.child({ method: 'getDataOf' });
        logger?.trace({ userData: userData.slice(0, 64).toString('hex') }, 'Return');
        return Buffer.concat([
            Buffer.concat([userData, Buffer.alloc(64)]).slice(0, 64),
            Buffer.concat([await this.getDeviceId(), Buffer.alloc(16)]).slice(0, 16),
            Buffer.alloc(1024),
            // randomBytes(16),
        ]);
    }
}
exports.ZeroTeeDeviceService = ZeroTeeDeviceService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiemVyby10ZWUtZGV2aWNlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGVlLWRldmljZS96ZXJvLXRlZS1kZXZpY2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSw4REFBMEQ7QUFFMUQ7O0dBRUc7QUFDSCxNQUFhLG9CQUFvQjtJQUcvQixZQUFZLE1BQThCO1FBQ3hDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsRUFBRSxJQUFJLEVBQUUsb0JBQW9CLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRUQsOEJBQThCO1FBQzVCLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFLGdDQUFnQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEUsTUFBTSxNQUFNLEdBQUc7WUFDYixRQUFRLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxLQUFLLENBQUM7WUFDOUQsU0FBUyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQ3BCLGtFQUFrRSxFQUNsRSxLQUFLLENBQ047WUFDRCxRQUFRLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FDbkIsa0VBQWtFLEVBQ2xFLEtBQUssQ0FDTjtZQUNELFFBQVEsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxFQUFFLEtBQUssQ0FBQztTQUMvRCxDQUFDO1FBRUYsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxVQUFVLENBQUMsSUFBWTtRQUNyQixJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxFQUFFLE1BQU0sRUFBRSxrQkFBa0IsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRTFELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFBLDhCQUFhLEVBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakYsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUVyRCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxrQ0FBa0MsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ2pGLENBQUM7SUFFRCxLQUFLLENBQUMsU0FBUyxDQUFDLFFBQWdCO1FBQzlCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFFM0QsTUFBTSxFQUFFLEtBQUssQ0FBQyxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUU3RSxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUM7WUFDbkIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUN4RCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDeEUsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7WUFDbEIsbUJBQW1CO1NBQ3BCLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQWxERCxvREFrREMifQ==