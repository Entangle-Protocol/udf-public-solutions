"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeeDeviceService = void 0;
const fs_1 = require("fs");
const p_queue_1 = __importDefault(require("p-queue"));
const addons_tee_1 = require("@super-protocol/addons-tee");
const tlb_1 = require("../tlb");
const errors_1 = require("./errors");
const skip_validation_quote_error_1 = require("./skip-validation-quote-error");
const calculate_hash_1 = require("../helpers/calculate-hash");
class TeeDeviceService {
    constructor(params) {
        this.logger = params?.logger?.child({ name: TeeDeviceService.name });
        this.deviceDebug = Boolean(params.deviceDebug);
        this.dcapVerifyService = new addons_tee_1.SgxNative.DcapQuoteVerifyService();
        this.enclaveService = new addons_tee_1.SgxNative.EnclaveService(params.tmpFolder);
        this.skipQuoteVerifyError = (0, skip_validation_quote_error_1.createQuoteVerifyErrorSkipper)(this.logger);
    }
    async parseAndValidateTlsCertificate(cert) {
        const logger = this.logger?.child({
            method: 'parseAndValidateTlsCertificate',
        });
        logger?.trace('Extract quote from certificate');
        // extract and test of matching between cert (pub key) and quote in cert
        const quote = await this.dcapVerifyService.extractQuoteFromCert(cert);
        logger?.trace({ quoteLength: quote.length }, 'Validate quote');
        // validate quote inside enclave
        await this.skipQuoteVerifyError(this.dcapVerifyService.validateQuoteVerifierEnclave(quote));
        logger?.trace('Parse quote');
        const parser = new tlb_1.TeeSgxParserV3();
        const data = parser.parseQuote(quote);
        logger?.trace({ version: data.header.version }, 'Parse report in quote');
        const report = parser.parseReport(data.report);
        logger?.trace({
            attestationKeyType: data.header.attestationKeyType,
            cpuSvn: report.cpuSvn,
            mrEnclave: Buffer.from(report.mrEnclave).toString('hex'),
            mrSigner: Buffer.from(report.mrSigner).toString('hex'),
        }, 'Return result');
        return {
            userData: Buffer.from(data.header.userData),
            mrEnclave: Buffer.from(report.mrEnclave),
            mrSigner: Buffer.from(report.mrSigner),
            dataHash: Buffer.from(report.dataHash),
        };
    }
    async getUniqKey(salt, policy) {
        const logger = this.logger?.child({ method: 'getSharedUniqKey' });
        if (!TeeDeviceService.cachedHardwareKeys.has(policy)) {
            await this.validateMode();
            if (this.deviceDebug) {
                logger?.warn('ATTENTION: Crypto Debug is enabled! Using insecure static key!');
                TeeDeviceService.cachedHardwareKeys.set(policy, Buffer.alloc(32, 'S'));
            }
            else {
                logger?.trace('Generate');
                await TeeDeviceService.executeLikeWithMutex.add(async () => {
                    const key = await this.enclaveService.getSecretKey({
                        type: addons_tee_1.SgxNative.KeyType.SGX_KEYSELECT_SEAL,
                        policy,
                    });
                    TeeDeviceService.cachedHardwareKeys.set(policy, key);
                });
            }
        }
        else {
            logger?.trace('Got from cache');
        }
        logger?.trace('Derive key');
        const result = (0, calculate_hash_1.calculateHash)(Buffer.concat([TeeDeviceService.cachedHardwareKeys.get(policy), salt]), 'sha256');
        logger?.trace('Return result');
        return result;
    }
    async getDeviceId() {
        const logger = this.logger?.child({ method: 'getDeviceId' });
        if (TeeDeviceService.cacheDeviceId) {
            logger?.trace({ result: TeeDeviceService.cacheDeviceId.toString('hex') }, 'Return result from cached value');
            return TeeDeviceService.cacheDeviceId;
        }
        await this.validateMode();
        let cpuSvnBytes = Buffer.alloc(0);
        let uniqDeviceID = Buffer.alloc(0);
        await TeeDeviceService.executeLikeWithMutex.add(async () => {
            logger?.trace('Write to user_report_data');
            await fs_1.promises.writeFile('/dev/attestation/user_report_data', Buffer.alloc(16));
            logger?.trace('Read from report');
            const report = await fs_1.promises.readFile('/dev/attestation/report');
            const parser = new tlb_1.TeeSgxParserV3();
            const { cpuSvn } = parser.parseReport(report);
            cpuSvnBytes = Buffer.from(cpuSvn, 'hex');
            let sealKey = Buffer.alloc(0);
            sealKey = await this.enclaveService.getSecretKey({
                type: addons_tee_1.SgxNative.KeyType.SGX_KEYSELECT_SEAL,
                policy: 0,
            });
            uniqDeviceID = (0, calculate_hash_1.calculateHash)(Buffer.concat([sealKey, cpuSvnBytes]), 'sha256');
            TeeDeviceService.cacheDeviceId = uniqDeviceID;
        });
        logger?.trace({ result: uniqDeviceID.toString('hex') }, 'Return result');
        return uniqDeviceID;
    }
    async getDataOf(userData) {
        const logger = this.logger?.child({ method: 'getDataOf' });
        await this.validateMode();
        let result = Buffer.alloc(0);
        await TeeDeviceService.executeLikeWithMutex.add(async () => {
            if (!TeeDeviceService.cacheTargetInfo) {
                logger?.trace('Read from my_target_info');
                TeeDeviceService.cacheTargetInfo = await fs_1.promises.readFile('/dev/attestation/my_target_info');
            }
            else {
                logger?.trace('Skip target_info reading, get cached value');
            }
            logger?.trace('Write to target_info');
            await fs_1.promises.writeFile('/dev/attestation/target_info', TeeDeviceService.cacheTargetInfo);
            logger?.trace('Write to user_report_data');
            await fs_1.promises.writeFile('/dev/attestation/user_report_data', Buffer.concat([userData, Buffer.alloc(64)]).slice(0, 64));
            logger?.trace('Read from quote');
            result = await fs_1.promises.readFile('/dev/attestation/quote');
        });
        logger?.trace('Return result');
        return result;
    }
    async validateMode() {
        if (TeeDeviceService.isInGramineMode) {
            return;
        }
        const logger = this.logger?.child({ method: 'validateMode' });
        logger?.trace('Check gramine device');
        try {
            await TeeDeviceService.executeLikeWithMutex.add(async () => {
                await fs_1.promises.access('/dev/attestation/report');
                logger?.trace('Ok');
                TeeDeviceService.isInGramineMode = true;
            });
        }
        catch (error) {
            throw new errors_1.TeeDeviceValidationError(error, 'invalid running mode, is it run in gramine / gramine?');
        }
    }
}
exports.TeeDeviceService = TeeDeviceService;
TeeDeviceService.isInGramineMode = false;
TeeDeviceService.cachedHardwareKeys = new Map();
TeeDeviceService.executeLikeWithMutex = new p_queue_1.default({ concurrency: 1 });
//# sourceMappingURL=data:application/json;base64,