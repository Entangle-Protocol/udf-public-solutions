/// <reference types="node" />
import { pki } from 'node-forge';
import { ITeeDeviceService, ParseTlsCertificateResult } from '../tee-device';
import { PinoLogger } from '../helpers';
export declare type GenerateTLSCertParams = {
    format?: string;
    subject?: {
        commonName?: string;
        countryName?: string;
        state?: string;
        localityName?: string;
        organizationName?: string;
        organizationUnit?: string;
    };
    withQuote?: boolean;
    rsaKeyBits?: number;
    serialNumber?: string;
    years?: number;
    dnsNames?: string[];
    ips?: string[];
};
export declare type GenerateCsrParams = {
    subject: {
        commonName: string;
        organizationName?: string;
        organizationUnit?: string;
    };
    withQuote?: boolean;
    rsaKeyBits?: number;
};
export declare type GenerateTlsCertResult = {
    format: string;
    cert: Buffer;
    key: Buffer;
};
export interface TeeCertificateServiceParams {
    teeDevice: ITeeDeviceService;
    logger?: PinoLogger;
}
export interface GeneratedCsr {
    privateKeyPem: string;
    csrPem: string;
}
export interface ITeeCertificateService {
    generateCsr(params: GenerateCsrParams): Promise<GeneratedCsr>;
    generateTlsCertificate(params?: GenerateTLSCertParams): Promise<GenerateTlsCertResult>;
    parseAndValidateTlsCertificate(cert: Buffer): Promise<ParseTlsCertificateResult>;
    verifyCertificate(certChain: string | Buffer[]): Promise<boolean>;
    verifyTlsCertificateChain(certChainInPem: string | Buffer): Promise<string | null>;
    verifyTlsCertificateHostname(certChainInPem: string | Buffer, hostnameOrIp: string): Promise<boolean>;
    generateQuote(publicKey: pki.PublicKey, logger?: PinoLogger): Promise<Buffer>;
}
