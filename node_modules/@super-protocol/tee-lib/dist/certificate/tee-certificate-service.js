"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeeCertificateService = void 0;
const node_forge_1 = require("node-forge");
const addons_tee_1 = require("@super-protocol/addons-tee");
const errors_1 = require("./errors");
const calculate_hash_1 = require("../helpers/calculate-hash");
class TeeCertificateService {
    constructor(params) {
        this.pkiService = new addons_tee_1.SgxNative.PkiService();
        this.logger = params.logger?.child({ name: TeeCertificateService.name });
        this.caStore = node_forge_1.pki.createCaStore();
        this.teeDevice = params.teeDevice;
    }
    static parseCertificate(contentDerOrPem) {
        const pemHead = '-----BEGIN CERTIFICATE-----';
        const data = contentDerOrPem.slice(0, pemHead.length).compare(Buffer.from(pemHead)) === 0
            ? node_forge_1.pki.pemToDer(contentDerOrPem.toString())
            : node_forge_1.util.createBuffer(contentDerOrPem);
        const asn1Obj = node_forge_1.asn1.fromDer(data);
        const asn1Cert = node_forge_1.pki.certificateFromAsn1(asn1Obj);
        return Promise.resolve(asn1Cert);
    }
    async verifyCertificate(cert) {
        const certsChainObjects = (typeof cert === 'string'
            ? cert
                .split(/^-----END CERTIFICATE-----\n?/gm)
                .filter(Boolean)
                .map((c) => Buffer.concat([Buffer.from(c), Buffer.from('-----END CERTIFICATE-----')]))
            : cert).map((c) => TeeCertificateService.parseCertificate(c));
        const certsChain = await Promise.all(certsChainObjects);
        return node_forge_1.pki.verifyCertificateChain(this.caStore, certsChain, { validityCheckDate: new Date() });
    }
    async verifyTlsCertificateChain(certChainInPem) {
        const logger = this.logger?.child({
            method: 'verifyCertificate',
        });
        try {
            await this.pkiService.validateChain(Buffer.from(certChainInPem), addons_tee_1.SgxNative.CertificateFormat.PEM);
            return null;
        }
        catch (error) {
            logger?.debug({ err: error }, 'Fail to verify certificate');
            return error.message;
        }
    }
    async verifyTlsCertificateHostname(certChainInPem, hostnameOrIp) {
        const logger = this.logger?.child({
            method: 'verifyTlsCertificateHostname',
            hostnameOrIp,
        });
        try {
            return await this.pkiService.validateHostname(Buffer.from(certChainInPem), hostnameOrIp, addons_tee_1.SgxNative.CertificateFormat.PEM);
        }
        catch (error) {
            logger?.debug({ err: error }, 'Fail to verify certificate hostname');
            return false;
        }
    }
    parseAndValidateTlsCertificate(cert) {
        return this.teeDevice.parseAndValidateTlsCertificate(cert);
    }
    async generateQuote(publicKey) {
        const methodLogger = this.logger?.child({ method: 'generateQuote' });
        methodLogger?.trace('Get public key in der format');
        const publicKeyData = Buffer.from(node_forge_1.asn1.toDer(node_forge_1.pki.publicKeyToAsn1(publicKey)).getBytes(), 'binary');
        methodLogger?.trace('Calc public key hash');
        const publicKeyHash = (0, calculate_hash_1.calculateHash)(publicKeyData, 'sha256');
        methodLogger?.trace({ publicKeyHash: publicKeyHash.toString('hex') }, 'Generate quote with sha256 hash of public key');
        const quote = await this.teeDevice.getDataOf(publicKeyHash);
        return quote;
    }
    async generateCsr(params) {
        const logger = this.logger?.child({
            method: 'generateCsr',
        });
        const keys = node_forge_1.pki.rsa.generateKeyPair(params.rsaKeyBits ?? 3072);
        const csr = node_forge_1.pki.createCertificationRequest();
        csr.publicKey = keys.publicKey;
        const subject = [
            {
                name: 'commonName',
                value: params.subject.commonName,
            },
            {
                name: 'organizationName',
                value: params.subject.organizationName || 'SuperProtocol',
            },
            {
                shortName: 'OU',
                value: params.subject.organizationUnit || 'TEE',
            },
        ];
        csr.setSubject(subject);
        const attributes = [
            {
                name: 'extensionRequest',
                extensions: [
                    {
                        name: 'subjectAltName',
                        altNames: [
                            {
                                // type 2 is DNS
                                type: 2,
                                value: params.subject.commonName,
                            },
                        ],
                    },
                    ...(params.withQuote
                        ? [
                            {
                                id: TeeCertificateService.certOidQuote,
                                value: node_forge_1.util.createBuffer(await this.generateQuote(csr.publicKey)).getBytes(),
                                // value: asn1.create(
                                //   asn1.Class.UNIVERSAL,
                                //   asn1.Type.OCTETSTRING,
                                //   false,
                                //   quote!.getBytes(),
                                // ),
                            },
                        ]
                        : []),
                ],
            },
        ];
        csr.setAttributes(attributes);
        logger?.trace('Self sign');
        csr.sign(keys.privateKey, node_forge_1.md.sha256.create());
        const csrPem = node_forge_1.pki.certificationRequestToPem(csr).replaceAll(/\r/g, '').replace(/\n$/, '');
        const privateKeyPem = node_forge_1.pki.privateKeyToPem(keys.privateKey);
        return { privateKeyPem, csrPem };
    }
    async generateTlsCertificate(params = {}) {
        const logger = this.logger?.child({
            method: 'generateTlsCertificate',
        });
        if (params.format && !['PEM', 'DER'].includes(params.format)) {
            throw new errors_1.TeeCertificateServiceInvalidArguments('Invalid format for generation of certificate');
        }
        // @TODO: validate other params
        logger?.trace('Generate pair');
        const keys = node_forge_1.pki.rsa.generateKeyPair(params.rsaKeyBits ?? 3072);
        const cert = node_forge_1.pki.createCertificate();
        cert.publicKey = keys.publicKey;
        cert.serialNumber = params.serialNumber ?? '01';
        cert.validity.notBefore = new Date();
        cert.validity.notAfter = new Date();
        cert.validity.notAfter.setFullYear(cert.validity.notBefore.getFullYear() + (params.years ?? 1));
        const attrs = [
            {
                name: 'commonName',
                value: params.subject?.commonName ?? 'localhost',
            },
            {
                name: 'countryName',
                value: params.subject?.countryName ?? 'US',
            },
            {
                shortName: 'ST',
                value: params.subject?.state ?? 'New York',
            },
            {
                name: 'localityName',
                value: params.subject?.localityName ?? 'New York',
            },
            {
                name: 'organizationName',
                value: params.subject?.organizationName ?? 'SuperProtocol',
            },
            {
                shortName: 'OU',
                value: params.subject?.organizationUnit ?? 'TEE',
            },
        ];
        cert.setSubject(attrs);
        cert.setIssuer(attrs);
        const exts = [
            {
                name: 'basicConstraints',
                cA: true,
            },
            {
                name: 'keyUsage',
                keyCertSign: true,
                digitalSignature: true,
                nonRepudiation: true,
                keyEncipherment: true,
                dataEncipherment: true,
            },
            {
                name: 'extKeyUsage',
                serverAuth: true,
                clientAuth: true,
                codeSigning: true,
            },
            {
                name: 'subjectAltName',
                altNames: [
                    ...(params.dnsNames ?? []).map((value) => ({
                        type: 2,
                        value,
                    })),
                    {
                        type: 2,
                        value: 'localhost',
                    },
                    ...(params.ips ?? []).map((ip) => ({
                        type: 7,
                        ip,
                    })),
                    {
                        type: 7,
                        ip: '127.0.0.1',
                    },
                ],
            },
            {
                name: 'subjectKeyIdentifier',
            },
            ...(params.withQuote
                ? [
                    {
                        id: TeeCertificateService.certOidQuote,
                        value: node_forge_1.util.createBuffer(await this.generateQuote(cert.publicKey)).getBytes(),
                        // value: asn1.create(
                        //   asn1.Class.UNIVERSAL,
                        //   asn1.Type.OCTETSTRING,
                        //   false,
                        //   quote!.getBytes(),
                        // ),
                    },
                ]
                : []),
        ];
        cert.setExtensions(exts);
        logger?.trace('Self sign');
        cert.sign(keys.privateKey, node_forge_1.md.sha256.create());
        logger?.trace('Return result');
        return {
            format: params.format ?? 'PEM',
            cert: Buffer.from(params.format === 'DER'
                ? node_forge_1.pki.pemToDer(node_forge_1.pki.certificateToPem(cert)).bytes()
                : node_forge_1.pki.certificateToPem(cert)),
            key: Buffer.from(params.format === 'DER'
                ? node_forge_1.pki.pemToDer(node_forge_1.pki.privateKeyToPem(keys.privateKey)).bytes()
                : node_forge_1.pki.privateKeyToPem(keys.privateKey)),
        };
    }
}
exports.TeeCertificateService = TeeCertificateService;
TeeCertificateService.certOidQuote = '0.6.9.42.840.113741.1337.6';
//# sourceMappingURL=data:application/json;base64,