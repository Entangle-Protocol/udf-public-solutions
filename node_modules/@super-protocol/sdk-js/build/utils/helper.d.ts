import { TransactionOptions } from '../types/Web3';
import Web3 from 'web3';
import { Web3BatchRequest } from 'web3-core';
import { SlotInfo } from '../types/SlotInfo';
import { OptionInfo, SlotUsage, TeeOfferOption, TeeOfferSlot, ValueOfferSlot } from '../types';
/**
 * Function for checking if provider action account initialized (required for set methods)
 * Used in all set methods
 */
export declare const checkIfActionAccountInitialized: (transactionOptions?: TransactionOptions) => void;
/**
 * Function for checking if current configuration supposed to use external transaction manager like MetaMask and etc.
 */
export declare const checkForUsingExternalTxManager: (transactionOptions?: TransactionOptions) => boolean;
/**
 * Updates gas price determined by the last few blocks median
 */
export declare const getGasPrice: (web3: Web3) => Promise<bigint>;
export declare const multiplyBigIntByNumber: (big: bigint, num: number) => bigint;
/**
 * Merge transaction options from arguments and from store
 * Used in all set methods
 */
export declare const createTransactionOptions: (options?: TransactionOptions) => Promise<TransactionOptions>;
export declare const isNodeJS: () => boolean;
export declare function incrementMethodCall(): (_target: unknown, propertyName: string, propertyDescriptor: PropertyDescriptor) => PropertyDescriptor;
export declare function packDeviceId(hexedDeviceId: string): string;
export declare function unpackDeviceId(bytes32: string): string;
export declare function convertBigIntToString(obj: any): any;
export declare function formatTeeOfferOption(option: TeeOfferOption): TeeOfferOption;
export declare function formatTeeOfferSlot(slot: TeeOfferSlot, cpuDenominator: number): TeeOfferSlot;
export declare function formatOfferSlot(slot: ValueOfferSlot, cpuDenominator: number): ValueOfferSlot;
export declare function formatUsage(usage: SlotUsage): SlotUsage;
export declare function formatOptionInfo(optionInfo: OptionInfo): OptionInfo;
export declare function unpackSlotInfo(slotInfo: SlotInfo, cpuDenominator: number): SlotInfo;
export declare function packSlotInfo(slotInfo: SlotInfo, cpuDenominator: number): SlotInfo;
export declare function isValidBytes32Hex(data: string): boolean;
export declare const cleanWeb3Data: <T>(data: T) => T;
export declare const transformComplexObject: (obj: any) => any;
export declare const executeBatchAsync: <BatchResponse = unknown>(batch: Web3BatchRequest, timeout?: number) => Promise<BatchResponse[]>;
