"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Web3TransactionRevertedByEvmError = void 0;
const NonceTracker_1 = __importDefault(require("./NonceTracker"));
const logger_1 = __importDefault(require("../logger"));
const store_1 = __importDefault(require("../store"));
const helper_1 = require("./helper");
const Superpro_1 = __importDefault(require("../staticModels/Superpro"));
const constants_1 = require("../constants");
const lodash_1 = __importDefault(require("lodash"));
const bottleneck_1 = __importDefault(require("bottleneck"));
class Web3TransactionError extends Error {
    constructor(originalError, message) {
        super(message);
        this.name = 'Web3TransactionError';
        this.originalError = originalError;
    }
}
class Web3TransactionRevertedByEvmError extends Web3TransactionError {
    constructor(originalError, message) {
        super(originalError, message);
        this.name = 'Web3TransactionRevertedByEvmError';
    }
}
exports.Web3TransactionRevertedByEvmError = Web3TransactionRevertedByEvmError;
class TxManager {
    static init(web3) {
        this.web3 = web3;
    }
    static checkIfInitialized() {
        if (!this.web3) {
            throw Error('TxManager should be initialized before using.');
        }
    }
    static initAccount(address) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.nonceTrackers[address])
                return;
            this.nonceTrackers[address] = new NonceTracker_1.default(this.web3, address);
            yield this.nonceTrackers[address].initAccount();
        });
    }
    static execute(transaction, transactionOptions, to = Superpro_1.default.address) {
        const txData = {
            to,
            data: transaction.encodeABI(),
        };
        return TxManager.publishTransaction(txData, transactionOptions, transaction);
    }
    static publishTransaction(txData, transactionOptions, transactionCall) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkIfInitialized();
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            const txOptions = yield (0, helper_1.createTransactionOptions)(Object.assign({}, transactionOptions));
            if (!txOptions.from) {
                throw Error('From account is undefined. You should pass it to transactionOptions or init action account.');
            }
            const publishTxOptions = Object.assign(Object.assign({}, txOptions), { web3: (transactionOptions === null || transactionOptions === void 0 ? void 0 : transactionOptions.web3) || this.web3, useExternalTxManager: (0, helper_1.checkForUsingExternalTxManager)(transactionOptions) });
            if (!this.queues[publishTxOptions.from]) {
                this.queues[publishTxOptions.from] = new bottleneck_1.default({
                    maxConcurrent: store_1.default.txConcurrency,
                    minTime: store_1.default.txIntervalMs,
                });
            }
            return this.queues[publishTxOptions.from].schedule(() => TxManager._publishTransaction(txData, publishTxOptions, transactionCall));
        });
    }
    static dryRun(transaction, transactionOptions) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const from = (_a = transactionOptions === null || transactionOptions === void 0 ? void 0 : transactionOptions.from) !== null && _a !== void 0 ? _a : store_1.default.actionAccount;
            try {
                return yield transaction.call({ from });
            }
            catch (e) {
                e.txErrorMsg = e.data.message || 'Error text is undefined';
                throw e;
            }
        });
    }
    static _publishTransaction(txData, transactionOptions, transactionCall) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const { from, gas, gasPrice, gasPriceMultiplier, web3 } = transactionOptions;
            txData = Object.assign(Object.assign({}, txData), { from,
                gas,
                gasPrice,
                gasPriceMultiplier });
            if (transactionCall) {
                let estimatedGas;
                try {
                    estimatedGas = yield transactionCall.estimateGas(txData);
                }
                catch (e) {
                    TxManager.logger.debug({ error: e }, 'Fail to calculate estimated gas');
                    estimatedGas = constants_1.defaultGasLimit;
                }
                txData.gas = (0, helper_1.multiplyBigIntByNumber)(estimatedGas, store_1.default.gasLimitMultiplier);
                // defaultGasLimit is max gas limit
                txData.gas = txData.gas < constants_1.defaultGasLimit ? txData.gas : constants_1.defaultGasLimit;
                if (transactionOptions.gas) {
                    if (transactionOptions.gas < estimatedGas) {
                        TxManager.logger.warn({
                            estimated: estimatedGas,
                            specified: transactionOptions.gas,
                        }, 'Fail to calculate estimated gas');
                    }
                    txData.gas = transactionOptions.gas;
                }
                txData.gasPrice = (0, helper_1.multiplyBigIntByNumber)(txData.gasPrice, store_1.default.gasPriceMultiplier);
            }
            let nonceTracker;
            // TODO: Consider a better way to organize different strategies for publishing transactions.
            if (!transactionOptions.useExternalTxManager && this.nonceTrackers[transactionOptions.from]) {
                nonceTracker = this.nonceTrackers[transactionOptions.from];
                yield nonceTracker.onTransactionStartPublishing();
                txData.nonce = nonceTracker.consumeNonce();
            }
            const signingKey = store_1.default.keys[transactionOptions.from];
            try {
                let transactionResultData;
                if (signingKey) {
                    const signed = yield web3.eth.accounts.signTransaction(txData, signingKey);
                    if (!signed.rawTransaction) {
                        throw new Error('Failed to sign transaction');
                    }
                    TxManager.logger.debug({
                        txHash: signed.transactionHash,
                        txData: lodash_1.default.omit(txData, ['data']),
                    }, 'Publishing signed transaction');
                    transactionResultData = yield web3.eth.sendSignedTransaction(signed.rawTransaction);
                    TxManager.logger.debug({
                        txHash: signed.transactionHash,
                        txBlockNumber: transactionResultData.blockNumber,
                        txGasUsed: transactionResultData.gasUsed,
                    }, 'Transaction result');
                }
                else {
                    TxManager.logger.debug({
                        txData: lodash_1.default.omit(txData, ['data']),
                    }, 'Publishing unsigned transaction');
                    transactionResultData = yield web3.eth.sendTransaction(txData);
                }
                if (nonceTracker)
                    nonceTracker.onTransactionPublished();
                return transactionResultData;
            }
            catch (e) {
                const message = 'Error during transaction execution';
                TxManager.logger.error(e, message);
                if (nonceTracker)
                    yield nonceTracker.onTransactionError();
                if ((_a = e.message) === null || _a === void 0 ? void 0 : _a.includes('Transaction has been reverted by the EVM')) {
                    throw new Web3TransactionRevertedByEvmError(e, message);
                }
                else {
                    throw new Web3TransactionError(e, message);
                }
            }
        });
    }
}
TxManager.logger = logger_1.default.child({ className: 'TxManager' });
TxManager.nonceTrackers = {};
TxManager.queues = {};
exports.default = TxManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHhNYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL1R4TWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFDQSxrRUFBMEM7QUFDMUMsdURBQW1DO0FBQ25DLHFEQUE2QjtBQVE3QixxQ0FLa0I7QUFDbEIsd0VBQWdEO0FBQ2hELDRDQUErQztBQUMvQyxvREFBNEI7QUFFNUIsNERBQW9DO0FBU3BDLE1BQU0sb0JBQXFCLFNBQVEsS0FBSztJQUV0QyxZQUFZLGFBQXNCLEVBQUUsT0FBZTtRQUNqRCxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsSUFBSSxHQUFHLHNCQUFzQixDQUFDO1FBQ25DLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO0lBQ3JDLENBQUM7Q0FDRjtBQUVELE1BQWEsaUNBQWtDLFNBQVEsb0JBQW9CO0lBQ3pFLFlBQVksYUFBc0IsRUFBRSxPQUFlO1FBQ2pELEtBQUssQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLElBQUksR0FBRyxtQ0FBbUMsQ0FBQztJQUNsRCxDQUFDO0NBQ0Y7QUFMRCw4RUFLQztBQUlELE1BQU0sU0FBUztJQUtOLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBVTtRQUMzQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNuQixDQUFDO0lBRU8sTUFBTSxDQUFDLGtCQUFrQjtRQUMvQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNkLE1BQU0sS0FBSyxDQUFDLCtDQUErQyxDQUFDLENBQUM7U0FDOUQ7SUFDSCxDQUFDO0lBRU0sTUFBTSxDQUFPLFdBQVcsQ0FBQyxPQUFlOztZQUM3QyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDO2dCQUFFLE9BQU87WUFDeEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxJ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