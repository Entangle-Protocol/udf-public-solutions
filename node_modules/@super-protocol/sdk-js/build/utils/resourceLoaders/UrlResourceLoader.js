"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UrlResourceLoader = void 0;
const fs_1 = __importDefault(require("fs"));
const http_1 = __importDefault(require("http"));
const https_1 = __importDefault(require("https"));
const stream_1 = __importDefault(require("stream"));
const dto_js_1 = require("@super-protocol/dto-js");
const BaseResourceLoader_1 = require("./BaseResourceLoader");
class UrlResourceLoader extends BaseResourceLoader_1.BaseResourceLoader {
    download(resource) {
        return __awaiter(this, void 0, void 0, function* () {
            const downloadStream = yield this.getFileStream(resource);
            return this.downloadToBuffer(downloadStream);
        });
    }
    downloadToFile(resource, downloadPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const downloadStream = yield this.getFileStream(resource);
            yield stream_1.default.promises.pipeline(downloadStream, fs_1.default.createWriteStream(downloadPath));
        });
    }
    getFileStream(resource) {
        let { url } = resource;
        return new Promise((resolve, reject) => {
            const fileProtocol = 'file://';
            if (url.startsWith(fileProtocol)) {
                url = url.substring(fileProtocol.length);
                try {
                    const response = fs_1.default.createReadStream(url);
                    resolve(response);
                }
                catch (error) {
                    reject(error);
                }
            }
            else {
                const module = url.startsWith('https:') ? https_1.default : http_1.default;
                module
                    .get(url, (response) => {
                    resolve(response);
                })
                    .on('error', (error) => {
                    reject(error);
                });
            }
        });
    }
}
exports.UrlResourceLoader = UrlResourceLoader;
UrlResourceLoader.type = dto_js_1.ResourceType.Url;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXJsUmVzb3VyY2VMb2FkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvcmVzb3VyY2VMb2FkZXJzL1VybFJlc291cmNlTG9hZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDRDQUFvQjtBQUNwQixnREFBd0I7QUFDeEIsa0RBQTBCO0FBQzFCLG9EQUE0QjtBQUM1QixtREFBNkU7QUFDN0UsNkRBQTBEO0FBRTFELE1BQWEsaUJBQWtCLFNBQVEsdUNBQWtCO0lBRzFDLFFBQVEsQ0FBQyxRQUFrQjs7WUFDdEMsTUFBTSxjQUFjLEdBQUcsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQXVCLENBQUMsQ0FBQztZQUV6RSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUMvQyxDQUFDO0tBQUE7SUFFWSxjQUFjLENBQUMsUUFBa0IsRUFBRSxZQUFvQjs7WUFDbEUsTUFBTSxjQUFjLEdBQUcsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQXVCLENBQUMsQ0FBQztZQUV6RSxNQUFNLGdCQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsWUFBRSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFDckYsQ0FBQztLQUFBO0lBRU8sYUFBYSxDQUFDLFFBQXFCO1FBQ3pDLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxRQUFRLENBQUM7UUFFdkIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQVEsRUFBRTtZQUMzQyxNQUFNLFlBQVksR0FBRyxTQUFTLENBQUM7WUFFL0IsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxFQUFFO2dCQUNoQyxHQUFHLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3pDLElBQUk7b0JBQ0YsTUFBTSxRQUFRLEdBQWtCLFlBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDekQsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2lCQUNuQjtnQkFBQyxPQUFPLEtBQWMsRUFBRTtvQkFDdkIsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUNmO2FBQ0Y7aUJBQU07Z0JBQ0wsTUFBTSxNQUFNLEdBQStCLEdBQUcsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQUssQ0FBQyxDQUFDLENBQUMsY0FBSSxDQUFDO2dCQUNuRixNQUFNO3FCQUNILEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUE4QixFQUFRLEVBQUU7b0JBQ2pELE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDcEIsQ0FBQyxDQUFDO3FCQUNELEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFZLEVBQVEsRUFBRTtvQkFDbEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNoQixDQUFDLENBQUMsQ0FBQzthQUNOO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOztBQXhDSCw4Q0F5Q0M7QUF4Q2Usc0JBQUksR0FBRyxxQkFBWSxDQUFDLEdBQUcsQ0FBQyJ9