import { TransactionReceipt } from 'web3';
import { TransactionOptions, TransactionDataOptions } from '../types';
import Web3 from 'web3';
import { NonPayableMethodObject } from 'web3-eth-contract';
declare class Web3TransactionError extends Error {
    readonly originalError: unknown;
    constructor(originalError: unknown, message: string);
}
export declare class Web3TransactionRevertedByEvmError extends Web3TransactionError {
    constructor(originalError: unknown, message: string);
}
declare class TxManager {
    private static web3;
    private static logger;
    private static nonceTrackers;
    private static queues;
    static init(web3: Web3): void;
    private static checkIfInitialized;
    static initAccount(address: string): Promise<void>;
    static execute(transaction: NonPayableMethodObject, transactionOptions?: TransactionOptions, to?: string): Promise<TransactionReceipt>;
    static publishTransaction(txData: TransactionDataOptions, transactionOptions?: TransactionOptions, transactionCall?: NonPayableMethodObject): Promise<TransactionReceipt>;
    static dryRun<SpecialOutput = unknown>(transaction: NonPayableMethodObject, transactionOptions?: TransactionOptions): Promise<SpecialOutput>;
    private static _publishTransaction;
}
export default TxManager;
