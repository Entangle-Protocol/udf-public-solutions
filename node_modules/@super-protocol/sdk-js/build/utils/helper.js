"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeBatchAsync = exports.transformComplexObject = exports.cleanWeb3Data = exports.isValidBytes32Hex = exports.packSlotInfo = exports.unpackSlotInfo = exports.formatOptionInfo = exports.formatUsage = exports.formatOfferSlot = exports.formatTeeOfferSlot = exports.formatTeeOfferOption = exports.convertBigIntToString = exports.unpackDeviceId = exports.packDeviceId = exports.incrementMethodCall = exports.isNodeJS = exports.createTransactionOptions = exports.multiplyBigIntByNumber = exports.getGasPrice = exports.checkForUsingExternalTxManager = exports.checkIfActionAccountInitialized = void 0;
const store_1 = __importDefault(require("../store"));
const Monitoring_1 = require("./Monitoring");
const constants_1 = require("../constants");
/**
 * Function for checking if provider action account initialized (required for set methods)
 * Used in all set methods
 */
const checkIfActionAccountInitialized = (transactionOptions) => {
    if (!store_1.default.actionAccount && !(transactionOptions === null || transactionOptions === void 0 ? void 0 : transactionOptions.web3))
        throw new Error("Provider action account is not initialized, needs to run 'BlockchainConnector.getInstance().initializeActionAccount(SECRET_KEY)' first");
};
exports.checkIfActionAccountInitialized = checkIfActionAccountInitialized;
/**
 * Function for checking if current configuration supposed to use external transaction manager like MetaMask and etc.
 */
const checkForUsingExternalTxManager = (transactionOptions) => {
    // TODO: Agree on more proper way of signaling, that we use an external transaction manager, than just passing a web3 instance.
    return !!(transactionOptions === null || transactionOptions === void 0 ? void 0 : transactionOptions.web3);
};
exports.checkForUsingExternalTxManager = checkForUsingExternalTxManager;
/**
 * Updates gas price determined by the last few blocks median
 */
const getGasPrice = (web3) => {
    return web3.eth.getGasPrice();
};
exports.getGasPrice = getGasPrice;
const multiplyBigIntByNumber = (big, num) => {
    const factor = BigInt(Math.pow(10, (num.toString().split('.')[1] || '').length));
    const result = big * BigInt(Math.round(num * Number(factor)));
    return result / factor;
};
exports.multiplyBigIntByNumber = multiplyBigIntByNumber;
/**
 * Merge transaction options from arguments and from store
 * Used in all set methods
 */
const createTransactionOptions = (options) => __awaiter(void 0, void 0, void 0, function* () {
    if (!options)
        options = {};
    if (!options.from)
        options.from = store_1.default.actionAccount;
    if (!options.gas)
        options.gas = store_1.default.gasLimit;
    if (!options.gasPriceMultiplier)
        options.gasPriceMultiplier = store_1.default.gasPriceMultiplier;
    if (!options.gasPrice) {
        const web3 = options.web3 || store_1.default.web3Https;
        if (!web3) {
            throw Error('web3 is undefined, define it in transaction options or initialize BlockchainConnector with web3 instance.');
        }
        try {
            options.gasPrice = yield (0, exports.getGasPrice)(web3);
        }
        catch (e) {
            options.gasPrice = store_1.default.gasPrice;
        }
    }
    delete options.web3;
    return options;
});
exports.createTransactionOptions = createTransactionOptions;
const isNodeJS = () => {
    return typeof window === 'undefined';
};
exports.isNodeJS = isNodeJS;
function incrementMethodCall() {
    return function (_target, propertyName, propertyDescriptor) {
        const monitoring = Monitoring_1.Monitoring.getInstance();
        const method = propertyDescriptor.value;
        propertyDescriptor.value = function (...args) {
            monitoring.incrementCall(propertyName);
            return method.apply(this, args);
        };
        return propertyDescriptor;
    };
}
exports.incrementMethodCall = incrementMethodCall;
function packDeviceId(hexedDeviceId) {
    const hexRegex = /^[0-9a-fA-F]+$/;
    if (hexedDeviceId.length !== 64) {
        throw new Error('DeviceId must be equal 64 hex symbols');
    }
    if (!hexRegex.test(hexedDeviceId)) {
        throw new Error('DeviceId must be a hexedecimal');
    }
    return '0x' + hexedDeviceId;
}
exports.packDeviceId = packDeviceId;
function unpackDeviceId(bytes32) {
    if (bytes32.length !== 66) {
        throw new Error('DeviceId bytes must be equal 66 symbols');
    }
    // removes '0x'
    return bytes32.slice(2, 66);
}
exports.unpackDeviceId = unpackDeviceId;
function convertBigIntToString(obj) {
    if (typeof obj === 'bigint') {
        return obj.toString(); // Convert BigInt to string
    }
    else if (typeof obj === 'object') {
        if (Array.isArray(obj)) {
            // If it's an array, map each element
            return obj.map((item) => convertBigIntToString(item));
        }
        else {
            // If it's an object, recursively convert its properties
            const convertedObj = {};
            for (const key in obj) {
                if (obj.hasOwnProperty(key)) {
                    convertedObj[key] = convertBigIntToString(obj[key]);
                }
            }
            return convertedObj;
        }
    }
    else {
        return obj; // Leave other types unchanged
    }
}
exports.convertBigIntToString = convertBigIntToString;
function formatTeeOfferOption(option) {
    option = (0, exports.cleanWeb3Data)(option);
    return Object.assign(Object.assign({}, option), { info: formatOptionInfo(option.info), usage: formatUsage(option.usage) });
}
exports.formatTeeOfferOption = formatTeeOfferOption;
function formatTeeOfferSlot(slot, cpuDenominator) {
    slot = (0, exports.cleanWeb3Data)(slot);
    return Object.assign(Object.assign({}, slot), { info: unpackSlotInfo(slot.info, cpuDenominator), usage: formatUsage(slot.usage) });
}
exports.formatTeeOfferSlot = formatTeeOfferSlot;
function formatOfferSlot(slot, cpuDenominator) {
    slot = (0, exports.cleanWeb3Data)(slot);
    return Object.assign(Object.assign({}, slot), { option: formatOptionInfo(slot.option), info: unpackSlotInfo(slot.info, cpuDenominator), usage: formatUsage(slot.usage) });
}
exports.formatOfferSlot = formatOfferSlot;
function formatUsage(usage) {
    return {
        priceType: usage.priceType.toString(),
        price: usage.price,
        minTimeMinutes: Number(usage.minTimeMinutes),
        maxTimeMinutes: Number(usage.maxTimeMinutes),
    };
}
exports.formatUsage = formatUsage;
function formatOptionInfo(optionInfo) {
    optionInfo = (0, exports.cleanWeb3Data)(optionInfo);
    return {
        bandwidth: Number(optionInfo.bandwidth),
        traffic: Number(optionInfo.traffic),
        externalPort: Number(optionInfo.externalPort),
    };
}
exports.formatOptionInfo = formatOptionInfo;
function unpackSlotInfo(slotInfo, cpuDenominator) {
    return {
        cpuCores: Number(slotInfo.cpuCores) / cpuDenominator,
        ram: Number(slotInfo.ram),
        diskUsage: Number(slotInfo.diskUsage),
    };
}
exports.unpackSlotInfo = unpackSlotInfo;
function packSlotInfo(slotInfo, cpuDenominator) {
    return {
        cpuCores: slotInfo.cpuCores * cpuDenominator,
        ram: slotInfo.ram,
        diskUsage: slotInfo.diskUsage,
    };
}
exports.packSlotInfo = packSlotInfo;
function isValidBytes32Hex(data) {
    const regex = /^0x[a-fA-F0-9]{64}$/;
    return regex.test(data);
}
exports.isValidBytes32Hex = isValidBytes32Hex;
const cleanWeb3Data = (data) => {
    var _a;
    const result = {};
    for (const key in data) {
        // If the value of the current key is an object (but not an array or null), recursively clean it
        if (typeof data[key] === 'object' && data[key] !== null && !Array.isArray(data[key])) {
            result[key] = (0, exports.cleanWeb3Data)(data[key]);
            result[key] = convertBigIntToString(result[key]);
        }
        else if (Array.isArray(data[key])) {
            result[key] = data[key].map((item) => typeof item === 'bigint' ? item.toString() : item);
        }
        else if (typeof data[key] === 'bigint') {
            result[key] = data[key].toString();
        }
        else {
            result[key] = data[key];
        }
    }
    // Remove __length__ and numbered properties
    delete result.__length__;
    for (let i = 0; i < ((_a = data.__length__) !== null && _a !== void 0 ? _a : 0); i++) {
        delete result[i.toString()];
    }
    return result;
};
exports.cleanWeb3Data = cleanWeb3Data;
const transformComplexObject = (obj) => {
    const result = {};
    for (const [key, value] of Object.entries(obj)) {
        if (!isNaN(Number(key))) {
            continue;
        }
        if (Array.isArray(value)) {
            result[key] = {};
            for (const [innerKey, innerValue] of Object.entries(value)) {
                if (!isNaN(Number(innerKey))) {
                    continue;
                }
                result[key][innerKey] = innerValue;
            }
        }
        else {
            result[key] = value;
        }
    }
    return result;
};
exports.transformComplexObject = transformComplexObject;
const executeBatchAsync = (batch, timeout = constants_1.BLOCKCHAIN_BATCH_REQUEST_TIMEOUT) => __awaiter(void 0, void 0, void 0, function* () {
    const result = [];
    const responses = yield batch.execute({ timeout });
    for (const response of responses) {
        if ('error' in response) {
            throw new Error(response.error.message);
        }
        else {
            result.push(response.result);
        }
    }
    return result;
});
exports.executeBatchAsync = executeBatchAsync;
//# sourceMappingURL=data:application/json;base64,