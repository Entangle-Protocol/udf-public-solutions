"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const buffer_1 = require("buffer");
const helper_1 = require("../../utils/helper");
const stream_1 = __importDefault(require("stream"));
const logger_1 = __importDefault(require("../../logger"));
class StorJStorageProvider {
    constructor(credentials, maximumConcurrent) {
        this.logger = logger_1.default.child({ className: 'StorJStorageProvider' });
        if (!(0, helper_1.isNodeJS)()) {
            throw Error('StorageProvider: StorJ is supported only in the node.js execution environment');
        }
        this.bucket = '';
        this.prefix = '';
        if (credentials.bucket) {
            this.bucket = credentials.bucket;
            this.prefix = credentials.prefix;
        }
        else if (credentials.storageId) {
            // back compatibility
            this.bucket = credentials.storageId;
        }
        this.accessToken = credentials.token;
        this.maximumConcurrent = maximumConcurrent;
    }
    uploadFile(inputStream, remotePath, contentLength, progressListener) {
        var _a, inputStream_1, inputStream_1_1;
        var _b, e_1, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            const storj = yield this.lazyStorj();
            const options = new storj.UploadOptions();
            const project = yield this.lazyProject();
            const uploader = yield project.uploadObject(this.bucket, this.prefix + remotePath, options);
            let totalWritten = 0;
            try {
                try {
                    for (_a = true, inputStream_1 = __asyncValues(inputStream); inputStream_1_1 = yield inputStream_1.next(), _b = inputStream_1_1.done, !_b;) {
                        _d = inputStream_1_1.value;
                        _a = false;
                        try {
                            const buffer = _d;
                            yield uploader.write(buffer, buffer.length);
                            totalWritten += buffer.length;
                            if (!!progressListener) {
                                progressListener(contentLength, totalWritten);
                            }
                        }
                        finally {
                            _a = true;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (!_a && !_b && (_c = inputStream_1.return)) yield _c.call(inputStream_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                yield uploader.commit();
            }
            catch (uploadingError) {
                try {
                    yield uploader.abort();
                }
                catch (abortingError) {
                    logger_1.default.error({ err: abortingError }, 'Failed to abort file uploading');
                }
                throw uploadingError;
            }
        });
    }
    downloadFile(remotePath, config, progressListener) {
        return __awaiter(this, void 0, void 0, function* () {
            const storj = yield this.lazyStorj();
            const project = yield this.lazyProject();
            const length = config.length || (yield this.getObjectSize(remotePath));
            const options = new storj.DownloadOptions(config.offset || 0, length);
            const downloader = yield project.downloadObject(this.bucket, this.prefix + remotePath, options);
            const loader = function () {
                return __asyncGenerator(this, arguments, function* () {
                    const readBuffer = buffer_1.Buffer.alloc(StorJStorageProvider.DOWNLOAD_BUFFER_SIZE);
                    let current = 0;
                    while (current < length) {
                        // We have to cast result to any, because of the wrong type declartion in uplink-nodejs.
                        const downloadResult = yield __await(downloader.read(readBuffer, readBuffer.length));
                        const bytesRead = downloadResult.bytes_read;
                        current += bytesRead;
                        yield yield __await(buffer_1.Buffer.from(readBuffer.subarray(0, bytesRead)));
                        if (!!progressListener) {
                            progressListener(length, current);
                        }
                    }
                });
            };
            return stream_1.default.Readable.from(loader()).on('close', () => __awaiter(this, void 0, void 0, function* () {
                yield downloader.close();
            }));
        });
    }
    deleteObject(remotePath) {
        return __awaiter(this, void 0, void 0, function* () {
            const project = yield this.lazyProject();
            yield project.deleteObject(this.bucket, this.prefix + remotePath);
        });
    }
    listObjects(remotePath) {
        return __awaiter(this, void 0, void 0, function* () {
            const storj = yield this.lazyStorj();
            const project = yield this.lazyProject();
            const objects = yield project.listObjects(this.bucket, {
                recursive: true,
                cursor: '',
                prefix: this.prefix + remotePath,
                system: true,
                custom: true,
            });
            const result = [];
            for (const key in Object.keys(objects)) {
                const value = objects[key];
                result.push({
                    name: value.key,
                    size: value.system.content_length,
                    isFolder: value.is_prefix == 1,
                    childrenCount: value.custom.count,
                    createdAt: new Date(value.system.created * 1000), // TODO: check timezone
                });
            }
            return result;
        });
    }
    getObjectSize(remotePath) {
        return __awaiter(this, void 0, void 0, function* () {
            const project = yield this.lazyProject();
            const objectInfo = yield project.statObject(this.bucket, this.prefix + remotePath);
            return objectInfo.system.content_length;
        });
    }
    getLastModified(remotePath) {
        return __awaiter(this, void 0, void 0, function* () {
            const project = yield this.lazyProject();
            const objectInfo = yield project.statObject(this.bucket, this.prefix + remotePath);
            return new Date(objectInfo.system.created * 1000);
        });
    }
    lazyStorj() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._storj) {
                this._storj = yield require('@super-protocol/uplink-nodejs');
            }
            return this._storj;
        });
    }
    lazyAccess() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._access) {
                const storj = yield this.lazyStorj();
                const uplink = new storj.Uplink();
                this._access = yield uplink.parseAccess(this.accessToken);
            }
            return this._access;
        });
    }
    lazyProject() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._project) {
                const access = yield this.lazyAccess();
                this._project = yield access.openProject(this.maximumConcurrent);
            }
            return this._project;
        });
    }
}
exports.default = StorJStorageProvider;
StorJStorageProvider.DOWNLOAD_BUFFER_SIZE = 4194304; // 4mb
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RvcmpTdG9yYWdlUHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJvdmlkZXJzL3N0b3JhZ2UvU3RvcmpTdG9yYWdlUHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsbUNBQWdDO0FBRWhDLCtDQUE4QztBQUU5QyxvREFBNEI7QUFDNUIsMERBQWtDO0FBRWxDLE1BQXFCLG9CQUFvQjtJQVl2QyxZQUFZLFdBQWdCLEVBQUUsaUJBQTBCO1FBVGhELFdBQU0sR0FBRyxnQkFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLFNBQVMsRUFBRSxzQkFBc0IsRUFBRSxDQUFDLENBQUM7UUFVbkUsSUFBSSxDQUFDLElBQUEsaUJBQVEsR0FBRSxFQUFFO1lBQ2YsTUFBTSxLQUFLLENBQUMsK0VBQStFLENBQUMsQ0FBQztTQUM5RjtRQUVELElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBRWpCLElBQUksV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUN0QixJQUFJLENBQUMsTUFBTSxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUM7WUFDakMsSUFBSSxDQUFDLE1BQU0sR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDO1NBQ2xDO2FBQU0sSUFBSSxXQUFXLENBQUMsU0FBUyxFQUFFO1lBQ2hDLHFCQUFxQjtZQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHLFdBQVcsQ0FBQyxTQUFTLENBQUM7U0FDckM7UUFFRCxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUM7UUFDckMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDO0lBQzdDLENBQUM7SUFFSyxVQUFVLENBQ2QsV0FBNEIsRUFDNUIsVUFBa0IsRUFDbEIsYUFBcUIsRUFDckIsZ0JBQTJEOzs7O1lBRTNELE1B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