"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContentWriterType = void 0;
const p_queue_1 = __importDefault(require("p-queue"));
const logger_1 = __importDefault(require("../../logger"));
var ContentWriterType;
(function (ContentWriterType) {
    ContentWriterType["NEEDS_UPLOAD"] = "NEEDS_UPLOAD";
    ContentWriterType["NEEDS_DELETE"] = "NEEDS_DELETE";
})(ContentWriterType = exports.ContentWriterType || (exports.ContentWriterType = {}));
const DEFAULT_WRITE_CONTENT_CONCURRENCY = 16;
const DEFAULT_CACHE_EXPIRATION_TS = 5 * 60 * 1000;
class StorageContentWriter {
    constructor(config) {
        this.timeout = null;
        this.storageWrites = new Map();
        const { writeContentConcurrency, interval, storageKeyValueAdapter, instanceId, objectDeletedFlag, cacheExpirationTs, performance, showLogs = true, } = config || {};
        this.logger = showLogs ? logger_1.default.child({ class: StorageContentWriter.name }) : null;
        this.performance = performance;
        this.INTERVAL = interval;
        this.cacheExpirationTs = cacheExpirationTs || DEFAULT_CACHE_EXPIRATION_TS;
        this.storageKeyValueAdapter = storageKeyValueAdapter;
        this.instanceId = instanceId;
        this.objectDeletedFlag = objectDeletedFlag;
        this.queueWriteContent = new p_queue_1.default({
            concurrency: writeContentConcurrency || DEFAULT_WRITE_CONTENT_CONCURRENCY,
        });
    }
    actualizeCacheDelete(key, encryptionKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const objects = yield this.storageKeyValueAdapter.listFiles(key);
            const objectsToDelete = objects.filter((object) => !object.name.endsWith(this.objectDeletedFlag));
            yield Promise.all(objectsToDelete.map((object) => this.storageKeyValueAdapter.delete(object.name)));
            if (objectsToDelete.length === objects.length) {
                yield this.storageKeyValueAdapter.set(`${key}/${this.objectDeletedFlag}`, null, encryptionKey);
            }
        });
    }
    actualizeCacheUpload(key, encryptionKey, cache) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const instances = cache.get(key);
            const instance = instances === null || instances === void 0 ? void 0 : instances.get(this.instanceId);
            if (!instances || !instance) {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.error({
                    key,
                    instancesSize: instances === null || instances === void 0 ? void 0 : instances.size,
                    value: instance,
                }, 'Attempted to upload non-existing value');
                return;
            }
            if (instance.value) {
                const startUpload = (_b = this.performance) === null || _b === void 0 ? void 0 : _b.now();
                yield this.storageKeyValueAdapter.set(`${key}/${this.instanceId}`, instance.value, encryptionKey);
                if (this.performance && startUpload !== undefined) {
                    const finishUpload = this.performance.now();
                    (_c = this.logger) === null || _c === void 0 ? void 0 : _c.info(`Uploading took ${(finishUpload - startUpload).toFixed(1)} ms`);
                }
            }
            yield this.deleteOutdatedInstances(key, instances);
        });
    }
    actualizeCache(cache) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const logger = (_a = this.logger) === null || _a === void 0 ? void 0 : _a.child({ method: this.actualizeCache.name });
            if (this.storageWrites.size) {
                Array.from(this.storageWrites.entries()).forEach(([key, { type, index, encryptionKey }]) => {
                    this.queueWriteContent.add(() => __awaiter(this, void 0, void 0, function* () {
                        var _a;
                        try {
                            switch (type) {
                                case ContentWriterType.NEEDS_DELETE:
                                    yield this.actualizeCacheDelete(key, encryptionKey);
                                    break;
                                case ContentWriterType.NEEDS_UPLOAD:
                                    yield this.actualizeCacheUpload(key, encryptionKey, cache);
                                    break;
                                default:
                                    break;
                            }
                            // delete only if the current index is up to date
                            if (index === ((_a = this.storageWrites.get(key)) === null || _a === void 0 ? void 0 : _a.index)) {
                                this.storageWrites.delete(key);
                            }
                        }
                        catch (err) {
                            logger === null || logger === void 0 ? void 0 : logger.error({
                                err,
                                size: this.storageWrites.size,
                            }, `Error storage writing ${key}`);
                        }
                    }));
                });
                yield this.queueWriteContent.onIdle();
                logger === null || logger === void 0 ? void 0 : logger.info({ size: this.storageWrites.size }, 'Success storage writing');
            }
        });
    }
    deleteOutdatedInstances(key, instances) {
        return __awaiter(this, void 0, void 0, function* () {
            const expiredTs = Date.now() - this.cacheExpirationTs;
            const instancesToDelete = [];
            instances === null || instances === void 0 ? void 0 : instances.forEach((instance, instanceId) => {
                const isOutdated = instance.modifiedTs < expiredTs;
                const isNotNull = Boolean(instance.value);
                if (instanceId !== this.instanceId && isNotNull && isOutdated) {
                    instancesToDelete.push([instanceId, instance]);
                }
            });
            // For safety, always preserve one additional copy in storage
            if (instancesToDelete.length <= 1) {
                return;
            }
            // Finding the most up-to-date instance to preserve
            instancesToDelete
                .sort((a, b) => {
                const diff = a[1].modifiedTs - b[1].modifiedTs;
                if (diff === 0) {
                    return a[0] >= b[0] ? 1 : -1;
                }
                return diff;
            })
                .pop();
            yield Promise.allSettled(instancesToDelete.map(([instanceId]) => this.storageKeyValueAdapter
                .delete(`${key}/${instanceId}`)
                .then(() => {
                instances.delete(instanceId);
            })
                .catch((err) => { var _a; return (_a = this.logger) === null || _a === void 0 ? void 0 : _a.error({ err }, 'Error deleting outdated instance'); })));
        });
    }
    startActualizeCacheTimer(cache) {
        if (this.INTERVAL) {
            if (this.timeout)
                clearTimeout(this.timeout);
            this.timeout = setTimeout(() => __awaiter(this, void 0, void 0, function* () {
                yield this.actualizeCache(cache);
                this.startActualizeCacheTimer(cache);
            }), this.INTERVAL);
        }
    }
    stop() {
        if (this.timeout)
            clearTimeout(this.timeout);
        this.timeout = null;
    }
    set(key, type, encryptionKey) {
        const oldValue = this.storageWrites.get(key);
        this.storageWrites.set(key, {
            type,
            index: (oldValue === null || oldValue === void 0 ? void 0 : oldValue.index) ? oldValue.index + 1 : 1,
            encryptionKey,
        });
    }
    get(key) {
        var _a;
        return ((_a = this.storageWrites.get(key)) === null || _a === void 0 ? void 0 : _a.type) || null;
    }
    clear() {
        this.storageWrites.clear();
    }
    shutdown(cache) {
        return __awaiter(this, void 0, void 0, function* () {
            this.stop();
            yield this.actualizeCache(cache);
        });
    }
}
exports.default = StorageContentWriter;
//# sourceMappingURL=data:application/json;base64,