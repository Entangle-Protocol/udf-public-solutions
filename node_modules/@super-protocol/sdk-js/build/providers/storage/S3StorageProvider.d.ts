/// <reference types="node" />
import IStorageProvider, { DownloadConfig } from './IStorageProvider';
import { Readable } from 'stream';
import StorageObject from '../../types/storage/StorageObject';
export type S3ClientConfig = {
    accessKeyId: string;
    secretAccessKey: string;
    endpoint: string;
    bucket: string;
};
export declare class S3StorageProvider implements IStorageProvider {
    private readonly s3Client;
    private readonly bucket;
    private readonly multipartChunkSizeInBytes;
    constructor(storageAccess: S3ClientConfig);
    uploadFile(inputStream: Readable, remotePath: string, contentLength: number, progressListener?: ((total: number, current: number) => void) | undefined): Promise<void>;
    private multipartUpload;
    deleteObject(remotePath: string): Promise<void>;
    downloadFile(remotePath: string, config: DownloadConfig, progressListener?: ((total: number, current: number) => void) | undefined): Promise<Readable>;
    listObjects(remotePath: string): Promise<StorageObject[]>;
    private getMetadata;
    getObjectSize(remotePath: string): Promise<number>;
    getLastModified(remotePath: string): Promise<Date>;
}
