/// <reference types="node" />
import StorageAccess from '../../types/storage/StorageAccess';
import { StorageAdapterConfig, CacheEvents } from './StorageAdapter';
export type StorjConfig = StorageAdapterConfig;
export default class StorjAdapter<V extends object> {
    private storageAdapter;
    private readonly logger?;
    constructor(storageAccess: StorageAccess, config: StorjConfig);
    subscribe(cb: (props: {
        type: CacheEvents;
        message: unknown;
    }) => void): Promise<() => Promise<void>>;
    get(key: string, encryptionKey: Buffer): Promise<(V | null)[] | null>;
    has(key: string): Promise<boolean>;
    set(key: string, value: V, encryptionKey: Buffer): Promise<void>;
    del(key: string): Promise<void>;
    stop(): void;
    shutdown(): Promise<void>;
}
