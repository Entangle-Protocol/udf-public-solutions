/// <reference types="node" />
import IStorageProvider, { DownloadConfig } from './IStorageProvider';
import StorageObject from '../../types/storage/StorageObject';
import stream from 'stream';
export default class StorJStorageProvider implements IStorageProvider {
    static DOWNLOAD_BUFFER_SIZE: number;
    private logger;
    private bucket;
    private prefix;
    private accessToken;
    private _access?;
    private _project?;
    private _storj?;
    private maximumConcurrent?;
    constructor(credentials: any, maximumConcurrent?: number);
    uploadFile(inputStream: stream.Readable, remotePath: string, contentLength: number, progressListener?: (total: number, current: number) => void): Promise<void>;
    downloadFile(remotePath: string, config: DownloadConfig, progressListener?: (total: number, current: number) => void): Promise<stream.Readable>;
    deleteObject(remotePath: string): Promise<void>;
    listObjects(remotePath: string): Promise<StorageObject[]>;
    getObjectSize(remotePath: string): Promise<number>;
    getLastModified(remotePath: string): Promise<Date>;
    private lazyStorj;
    private lazyAccess;
    private lazyProject;
}
