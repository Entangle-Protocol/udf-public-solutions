import { LRUCache } from 'lru-cache';
import { CacheRecord, Performance } from './types';
import StorageKeyValueAdapter from './StorageKeyValueAdapter';
export interface StorageContentWriterConfig<V extends object> {
    interval: number;
    storageKeyValueAdapter: StorageKeyValueAdapter<V>;
    instanceId: string;
    objectDeletedFlag: string;
    writeContentConcurrency?: number;
    cacheExpirationTs?: number;
    performance?: Performance;
    showLogs?: boolean;
}
export declare enum ContentWriterType {
    NEEDS_UPLOAD = "NEEDS_UPLOAD",
    NEEDS_DELETE = "NEEDS_DELETE"
}
interface StorageWriteRecord {
    type: ContentWriterType;
    index: number;
    encryptionKey: string;
}
export default class StorageContentWriter<K extends string, V extends object> {
    private timeout;
    private readonly INTERVAL;
    private readonly storageKeyValueAdapter;
    private readonly logger?;
    private readonly instanceId;
    private readonly cacheExpirationTs;
    private readonly objectDeletedFlag;
    private readonly queueWriteContent;
    private readonly performance?;
    readonly storageWrites: Map<K, StorageWriteRecord>;
    constructor(config: StorageContentWriterConfig<V>);
    private actualizeCacheDelete;
    private actualizeCacheUpload;
    private actualizeCache;
    private deleteOutdatedInstances;
    startActualizeCacheTimer(cache: LRUCache<K, Map<string, CacheRecord<V>>>): void;
    stop(): void;
    set(key: K, type: ContentWriterType, encryptionKey: string): void;
    get(key: K): ContentWriterType | null;
    clear(): void;
    shutdown(cache: LRUCache<K, Map<string, CacheRecord<V>>>): Promise<void>;
}
export {};
