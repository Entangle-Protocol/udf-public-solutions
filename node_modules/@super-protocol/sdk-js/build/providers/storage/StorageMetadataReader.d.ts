import StorageObject from '../../types/storage/StorageObject';
import { CacheRecord } from './types';
import StorageKeyValueAdapter from './StorageKeyValueAdapter';
export interface InstancesUpdates {
    updated: Map<string, StorageObject>;
    deleted: Set<string>;
}
export interface StorageMetadataReaderConfig<V extends object> {
    storageKeyValueAdapter: StorageKeyValueAdapter<V>;
    objectDeletedFlag: string;
    showLogs?: boolean;
}
export default class StorageMetadataReader<K extends string, V extends object> {
    private readonly logger?;
    private readonly storageKeyValueAdapter;
    private readonly objectDeletedFlag;
    constructor(config: StorageMetadataReaderConfig<V>);
    private listInstances;
    fetchInstancesUpdates(key: K, currentInstances: Map<string, CacheRecord<V>>): Promise<InstancesUpdates>;
}
