"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const stream_1 = require("stream");
const dto_js_1 = require("@super-protocol/dto-js");
const getStorageProvider_1 = __importDefault(require("./getStorageProvider"));
const logger_1 = __importDefault(require("../../logger"));
const Crypto_1 = __importDefault(require("../../crypto/Crypto"));
class StorageKeyValueAdapter {
    constructor(storageAccess, config) {
        if (!(storageAccess === null || storageAccess === void 0 ? void 0 : storageAccess.credentials))
            throw new Error('Credentials is empty');
        const { showLogs = true } = config || {};
        this.logger = showLogs ? logger_1.default.child({ class: StorageKeyValueAdapter.name }) : null;
        this.storageProvider = (0, getStorageProvider_1.default)(storageAccess);
    }
    decrypt(encryption, key) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!encryption)
                return null;
            if (!key)
                throw new Error('Key cannot be empty!');
            encryption.key = key;
            return JSON.parse(yield Crypto_1.default.decrypt(encryption));
        });
    }
    encrypt(data, key) {
        return __awaiter(this, void 0, void 0, function* () {
            if (data === undefined)
                throw new Error('Data cannot be empty!');
            if (!key)
                throw new Error('Private cannot be empty!');
            return Crypto_1.default.encrypt(JSON.stringify(data), {
                algo: dto_js_1.CryptoAlgorithm.AES,
                encoding: dto_js_1.Encoding.base64,
                key,
                cipher: dto_js_1.Cipher.AES_256_GCM,
            });
        });
    }
    downloadFromStorage(filepath) {
        return __awaiter(this, void 0, void 0, function* () {
            const downloadStream = yield this.storageProvider.downloadFile(filepath, {});
            return this.streamToString(downloadStream);
        });
    }
    streamToString(stream) {
        const chunks = [];
        return new Promise((resolve, reject) => {
            stream.on('data', (chunk) => {
                chunks.push(Buffer.from(chunk));
            });
            stream.on('error', (err) => reject(err));
            stream.on('end', () => resolve(Buffer.concat(chunks).toString('utf8')));
        });
    }
    storageUpload(key, value, privateKey) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const encryptedValue = yield this.encrypt(value, privateKey);
                const buffer = Buffer.from(JSON.stringify(encryptedValue));
                yield this.storageProvider.uploadFile(stream_1.Readable.from(buffer), key, buffer.byteLength);
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.info({ data: key }, 'Success uploading to storage');
            }
            catch (err) {
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.error({ err }, 'Error uploading to storage');
                throw err;
            }
        });
    }
    storageDelete(key) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.storageProvider.deleteObject(key);
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.info({ data: key }, 'Success deleting from storage');
            }
            catch (err) {
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.info({ err }, 'Error deleting from storage');
                throw err;
            }
        });
    }
    storageDownload(key, privateKey) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const downloaded = yield this.downloadFromStorage(key);
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.info({ key }, 'Success download data from storage');
                if (!downloaded)
                    return null;
                const decryptedValue = yield this.decrypt(JSON.parse(downloaded), privateKey);
                return decryptedValue;
            }
            catch (err) {
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.info({
                    err,
                    key,
                }, 'Error download data from storage');
                throw err;
            }
        });
    }
    storageListFiles(key) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const listObjects = yield this.storageProvider.listObjects(key);
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.trace({
                    data: listObjects,
                    key,
                }, 'Success list objects from storage');
                return listObjects.filter((obj) => !obj.isFolder);
            }
            catch (err) {
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.info({
                    err,
                    key,
                }, 'Error list objects from storage');
                throw err;
            }
        });
    }
    set(key, value, privateKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.storageUpload(key, value, privateKey);
        });
    }
    delete(key) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.storageDelete(key);
        });
    }
    get(key, privateKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.storageDownload(key, privateKey);
        });
    }
    listFiles(key) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.storageListFiles(key);
        });
    }
}
exports.default = StorageKeyValueAdapter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RvcmFnZUtleVZhbHVlQWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcm92aWRlcnMvc3RvcmFnZS9TdG9yYWdlS2V5VmFsdWVBZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUEsbUNBQWtDO0FBQ2xDLG1EQUF1RjtBQUd2Riw4RUFBc0Q7QUFFdEQsMERBQThDO0FBQzlDLGlFQUF5QztBQU16QyxNQUFxQixzQkFBc0I7SUFJekMsWUFBWSxhQUE0QixFQUFFLE1BQXFDO1FBQzdFLElBQUksQ0FBQyxDQUFBLGFBQWEsYUFBYixhQUFhLHVCQUFiLGFBQWEsQ0FBRSxXQUFXLENBQUE7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFDekUsTUFBTSxFQUFFLFFBQVEsR0FBRyxJQUFJLEVBQUUsR0FBRyxNQUFNLElBQUksRUFBRSxDQUFDO1FBQ3pDLElBQUksQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxnQkFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssRUFBRSxzQkFBc0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDckYsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFBLDRCQUFrQixFQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFWSxPQUFPLENBQUMsVUFBc0IsRUFBRSxHQUFXOztZQUN0RCxJQUFJLENBQUMsVUFBVTtnQkFBRSxPQUFPLElBQUksQ0FBQztZQUM3QixJQUFJLENBQUMsR0FBRztnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUM7WUFFbEQsVUFBVSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7WUFFckIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sZ0JBQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FB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