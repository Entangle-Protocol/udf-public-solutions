import { Encryption } from '@super-protocol/dto-js';
import StorageAccess from '../../types/storage/StorageAccess';
import StorageObject from '../../types/storage/StorageObject';
export interface StorageKeyValueAdapterConfig {
    showLogs?: boolean;
}
export default class StorageKeyValueAdapter<V extends object> {
    private readonly storageProvider;
    private readonly logger?;
    constructor(storageAccess: StorageAccess, config?: StorageKeyValueAdapterConfig);
    decrypt(encryption: Encryption, key: string): Promise<V | null>;
    encrypt(data: V | null, key: string): Promise<Encryption>;
    private downloadFromStorage;
    private streamToString;
    private storageUpload;
    private storageDelete;
    private storageDownload;
    private storageListFiles;
    set(key: string, value: V | null, privateKey: string): Promise<void>;
    delete(key: string): Promise<void>;
    get(key: string, privateKey: string): Promise<V | null>;
    listFiles(key: string): Promise<StorageObject[]>;
}
