"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3StorageProvider = void 0;
const aws_sdk_1 = require("aws-sdk");
class S3StorageProvider {
    constructor(storageAccess) {
        this.multipartChunkSizeInBytes = 64 * 1024 * 1024; // 64MB
        const { accessKeyId, secretAccessKey, endpoint, bucket } = storageAccess;
        if (!accessKeyId)
            throw new Error('Access key id is undefined');
        if (!secretAccessKey)
            throw new Error('Secret access is undefined');
        if (!endpoint)
            throw new Error('Endpoint is undefined');
        if (!bucket)
            throw new Error('Bucket is undefined');
        this.bucket = bucket;
        this.s3Client = new aws_sdk_1.S3({
            credentials: {
                accessKeyId,
                secretAccessKey,
            },
            endpoint,
            s3ForcePathStyle: true,
            signatureVersion: 'v4',
            httpOptions: { timeout: 0 },
        });
    }
    uploadFile(inputStream, remotePath, contentLength, progressListener) {
        return __awaiter(this, void 0, void 0, function* () {
            // For performance & cost optimization
            // https://docs.storj.io/dcs/api-reference/s3-compatible-gateway/multipart-upload/multipart-part-size
            if (inputStream.readableHighWaterMark >= this.multipartChunkSizeInBytes) {
                return this.multipartUpload(inputStream, remotePath, contentLength, progressListener);
            }
            const result = yield this.s3Client
                .putObject({
                Body: inputStream,
                Bucket: this.bucket,
                Key: remotePath,
                ContentLength: contentLength,
            })
                .on('httpUploadProgress', ({ total, loaded }) => progressListener === null || progressListener === void 0 ? void 0 : progressListener(total, loaded))
                .promise();
            if (result.$response.error) {
                throw result.$response.error;
            }
        });
    }
    multipartUpload(inputStream, remotePath, contentLength, progressListener) {
        var _a, inputStream_1, inputStream_1_1;
        var _b, e_1, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            const multipart = yield this.s3Client
                .createMultipartUpload({
                Bucket: this.bucket,
                Key: remotePath,
            })
                .promise();
            if (!multipart.UploadId) {
                throw new Error('UploadId property is empty');
            }
            try {
                let totalWritten = 0;
                let partNumber = 0;
                const uploadId = multipart.UploadId;
                const parts = [];
                try {
                    for (_a = true, inputStream_1 = __asyncValues(inputStream); inputStream_1_1 = yield inputStream_1.next(), _b = inputStream_1_1.done, !_b;) {
                        _d = inputStream_1_1.value;
                        _a = false;
                        try {
                            const buffer = _d;
                            partNumber++;
                            const response = yield this.s3Client
                                .uploadPart({
                                Body: buffer,
                                Bucket: this.bucket,
                                Key: remotePath,
                                UploadId: uploadId,
                                PartNumber: partNumber,
                            })
                                .promise();
                            parts.push({
                                ETag: response.ETag,
                                PartNumber: partNumber,
                            });
                            totalWritten += buffer.length;
                            if (!!progressListener) {
                                progressListener(contentLength, totalWritten);
                            }
                        }
                        finally {
                            _a = true;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (!_a && !_b && (_c = inputStream_1.return)) yield _c.call(inputStream_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                const doneParams = {
                    Bucket: this.bucket,
                    Key: remotePath,
                    UploadId: multipart.UploadId,
                    MultipartUpload: { Parts: parts },
                };
                yield this.s3Client.completeMultipartUpload(doneParams).promise();
            }
            catch (uploadingError) {
                yield this.s3Client
                    .abortMultipartUpload({
                    Bucket: this.bucket,
                    Key: remotePath,
                    UploadId: multipart.UploadId,
                })
                    .promise();
                throw uploadingError;
            }
        });
    }
    deleteObject(remotePath) {
        return __awaiter(this, void 0, void 0, function* () {
            const deleteResult = yield this.s3Client
                .deleteObject({
                Bucket: this.bucket,
                Key: remotePath,
            })
                .promise();
            if (deleteResult.$response.error) {
                throw deleteResult.$response.error;
            }
        });
    }
    downloadFile(remotePath, config, progressListener) {
        return __awaiter(this, void 0, void 0, function* () {
            const getObjectParams = {
                Bucket: this.bucket,
                Key: remotePath,
            };
            if (config) {
                const start = config.offset || 0;
                const end = start + (config.length || 0);
                getObjectParams.Range = `bytes=${start}-${end || ''}`;
            }
            const downloadStream = this.s3Client.getObject(getObjectParams).createReadStream();
            let current = 0;
            if (progressListener) {
                const fileBytesSize = config.length || (yield this.getObjectSize(remotePath));
                downloadStream.on('data', (chunk) => {
                    current += chunk.length;
                    progressListener(fileBytesSize, current);
                });
            }
            return downloadStream;
        });
    }
    listObjects(remotePath) {
        return __awaiter(this, void 0, void 0, function* () {
            const prefix = remotePath.endsWith('/') ? remotePath : `${remotePath}/`;
            const listObjects = yield this.s3Client
                .listObjectsV2({
                Bucket: this.bucket,
                Prefix: prefix,
            })
                .promise();
            if (listObjects.$response.error) {
                throw listObjects.$response.error;
            }
            let result = [];
            if (listObjects.Contents) {
                result = listObjects.Contents.map((object) => ({
                    name: object.Key || '',
                    createdAt: object.LastModified || new Date(),
                    size: object.Size || 0,
                }));
            }
            return result;
        });
    }
    getMetadata(remotePath) {
        return __awaiter(this, void 0, void 0, function* () {
            const getObjectParams = {
                Bucket: this.bucket,
                Key: remotePath,
            };
            const metadata = yield this.s3Client.headObject(getObjectParams).promise();
            if (metadata.$response.error) {
                throw metadata.$response.error;
            }
            return metadata;
        });
    }
    getObjectSize(remotePath) {
        return __awaiter(this, void 0, void 0, function* () {
            const metadata = yield this.getMetadata(remotePath);
            if (metadata.ContentLength === undefined) {
                throw new Error('ContentLength property is empty');
            }
            return metadata.ContentLength || 0;
        });
    }
    getLastModified(remotePath) {
        return __awaiter(this, void 0, void 0, function* () {
            const metadata = yield this.getMetadata(remotePath);
            if (!metadata.LastModified) {
                throw new Error('LastModified property is empty');
            }
            return metadata.LastModified;
        });
    }
}
exports.S3StorageProvider = S3StorageProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUzNTdG9yYWdlUHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJvdmlkZXJzL3N0b3JhZ2UvUzNTdG9yYWdlUHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHFDQUE2QjtBQVk3QixNQUFhLGlCQUFpQjtJQUs1QixZQUFZLGFBQTZCO1FBRnhCLDhCQUF5QixHQUFHLEVBQUUsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsT0FBTztRQUdwRSxNQUFNLEVBQUUsV0FBVyxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLEdBQUcsYUFBYSxDQUFDO1FBQ3pFLElBQUksQ0FBQyxXQUFXO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxlQUFlO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxRQUFRO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxNQUFNO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBRXBELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBRXJCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxZQUFFLENBQUM7WUFDckIsV0FBVyxFQUFFO2dCQUNYLFdBQVc7Z0JBQ1gsZUFBZTthQUNoQjtZQUNELFFBQVE7WUFDUixnQkFBZ0IsRUFBRSxJQUFJO1lBQ3RCLGdCQUFnQixFQUFFLElBQUk7WUFDdEIsV0FBVyxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRTtTQUM1QixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUssVUFBVSxDQUNkLFdBQXFCLEVBQ3JCLFVBQWtCLEVBQ2xCLGFBQXFCLEVBQ3JCLGdCQUF5RTs7WUFF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