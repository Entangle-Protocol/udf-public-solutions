"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheEvents = void 0;
const lru_cache_1 = require("lru-cache");
const crypto_1 = require("crypto");
const p_queue_1 = __importDefault(require("p-queue"));
const StorageKeyValueAdapter_1 = __importDefault(require("./StorageKeyValueAdapter"));
const StorageContentWriter_1 = __importStar(require("./StorageContentWriter"));
const StorageMetadataReader_1 = __importDefault(require("./StorageMetadataReader"));
const logger_1 = __importDefault(require("../../logger"));
const PubSub_1 = __importDefault(require("../../utils/PubSub"));
var CacheEvents;
(function (CacheEvents) {
    CacheEvents["INSTANCES_CHANGED"] = "INSTANCES_CHANGED";
    CacheEvents["KEY_DELETED"] = "KEY_DELETED";
})(CacheEvents = exports.CacheEvents || (exports.CacheEvents = {}));
const DEFAULT_READ_METADATA_CONCUREENCY = 16;
class StorageAdapter {
    constructor(storageAccess, config) {
        this.encryptionKeys = new Map(); // key -> encryption key (base64)
        this.timeout = null;
        this.queues = new Map();
        this.isUpdating = new Map();
        this.pubSub = new PubSub_1.default();
        this.eventName = 'storage-adapter';
        const { readInterval, writeInterval, lruCache, objectDeletedFlag, readMetadataConcurrency, performance, showLogs = true, } = config;
        this.logger = showLogs ? logger_1.default.child({ class: StorageAdapter.name }) : null;
        this.performance = performance;
        this.instanceId = this.generateHash();
        this.readInterval = readInterval;
        this.storageKeyValueAdapter = new StorageKeyValueAdapter_1.default(storageAccess, { showLogs });
        this.cache = new lru_cache_1.LRUCache(lruCache);
        this.metadataReader = new StorageMetadataReader_1.default({
            storageKeyValueAdapter: this.storageKeyValueAdapter,
            objectDeletedFlag,
            showLogs,
        });
        this.contentWriter = new StorageContentWriter_1.default({
            interval: writeInterval,
            storageKeyValueAdapter: this.storageKeyValueAdapter,
            instanceId: this.instanceId,
            objectDeletedFlag,
            performance: this.performance,
            showLogs,
        });
        this.queueReadMetadata = new p_queue_1.default({
            concurrency: readMetadataConcurrency || DEFAULT_READ_METADATA_CONCUREENCY,
        });
    }
    generateHash(str) {
        return (0, crypto_1.createHash)('sha256')
            .update(str || (0, crypto_1.randomUUID)())
            .digest('hex');
    }
    subscribe(cb) {
        return __awaiter(this, void 0, void 0, function* () {
            this.pubSub.subscribe(this.eventName, cb);
            return () => __awaiter(this, void 0, void 0, function* () {
                this.pubSub.unsubscribe(this.eventName, cb);
            });
        });
    }
    publish(type, message) {
        this.pubSub.publish(this.eventName, {
            type,
            message,
        });
    }
    has(key) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.cache.has(key)) {
                yield this.getQueue(key).add(() => __awaiter(this, void 0, void 0, function* () {
                    if (!this.cache.has(key)) {
                        yield this.checkUpdates(key);
                    }
                }));
            }
            return this.cache.has(key);
        });
    }
    getEnryptionKey(key, encryptionKeyBuffer) {
        if (!this.encryptionKeys.has(key)) {
            if (!encryptionKeyBuffer)
                return null;
            const encryptionKey = encryptionKeyBuffer.toString('base64');
            this.encryptionKeys.set(key, encryptionKey);
            return encryptionKey;
        }
        return this.encryptionKeys.get(key) || null;
    }
    set(key, value, encryptionKeyBuffer) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (((_a = this.contentWriter.storageWrites.get(key)) === null || _a === void 0 ? void 0 : _a.type) === StorageContentWriter_1.ContentWriterType.NEEDS_DELETE) {
                throw new Error('Object has been deleted');
            }
            const encryptionKey = this.getEnryptionKey(key, encryptionKeyBuffer);
            if (!encryptionKey)
                throw new Error('Encryption key required');
            this.setByInstance(key, this.instanceId, {
                value,
                modifiedTs: Number.MAX_SAFE_INTEGER,
            });
            this.contentWriter.set(key, StorageContentWriter_1.ContentWriterType.NEEDS_UPLOAD, encryptionKey);
        });
    }
    setByInstance(key, instanceId, value) {
        const instances = this.cache.get(key) || new Map();
        instances.set(instanceId, value);
        this.cache.set(key, instances);
    }
    delete(key) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.cache.delete(key);
            this.isUpdating.delete(key);
            const encryptionKey = this.getEnryptionKey(key);
            if (encryptionKey) {
                this.contentWriter.set(key, StorageContentWriter_1.ContentWriterType.NEEDS_DELETE, encryptionKey);
                this.encryptionKeys.delete(key);
            }
            else {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.error(`Encryption key for key ${key} is not set`);
            }
            this.clearQueue(key);
        });
    }
    // the first value is always the current instance, if key exists
    get(key, encryptionKeyBuffer) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            if (!encryptionKeyBuffer)
                throw new Error('Encryption key required');
            if (((_a = this.contentWriter.storageWrites.get(key)) === null || _a === void 0 ? void 0 : _a.type) === StorageContentWriter_1.ContentWriterType.NEEDS_DELETE ||
                !(yield this.has(key))) {
                return null;
            }
            const encryptionKey = this.getEnryptionKey(key, encryptionKeyBuffer);
            if (!encryptionKey)
                throw new Error('Encryption key required');
            if (this.cacheHasNullInstances(key)) {
                yield this.getQueue(key).add(() => __awaiter(this, void 0, void 0, function* () {
                    if (this.cacheHasNullInstances(key)) {
                        yield this.fetchNullValues(key, encryptionKey);
                    }
                }));
            }
            const map = this.cache.get(key);
            if (!(map === null || map === void 0 ? void 0 : map.size))
                return null;
            const currentInstance = ((_b = map.get(this.instanceId)) === null || _b === void 0 ? void 0 : _b.value) || null;
            const otherInstances = Array.from(map.entries()).reduce((acc, [instanceId, instance]) => {
                return instanceId !== this.instanceId ? [...acc, (instance === null || instance === void 0 ? void 0 : instance.value) || null] : acc;
            }, []);
            return [currentInstance, ...otherInstances];
        });
    }
    getQueue(key) {
        let queue = this.queues.get(key);
        if (!queue) {
            queue = new p_queue_1.default({ concurrency: 1 });
            this.queues.set(key, queue);
        }
        return queue;
    }
    clearQueue(key) {
        const queue = this.queues.get(key);
        queue === null || queue === void 0 ? void 0 : queue.clear();
        this.queues.delete(key);
    }
    cacheHasNullInstances(key) {
        var _a;
        return Array.from(((_a = this.cache.get(key)) === null || _a === void 0 ? void 0 : _a.values()) || []).some((instance) => instance.value === null);
    }
    fetchNullValues(key, encryptionKey) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const promises = [];
            (_a = this.cache.get(key)) === null || _a === void 0 ? void 0 : _a.forEach((instance, instanseId) => {
                var _a;
                if (instance.value === null) {
                    const fileName = `${key}/${instanseId}`;
                    const startDownload = (_a = this.performance) === null || _a === void 0 ? void 0 : _a.now();
                    promises.push(this.storageKeyValueAdapter
                        .get(fileName, encryptionKey)
                        .then((file) => {
                        if (this.performance && startDownload !== undefined) {
                            const finishDownload = this.performance.now();
                            logger_1.default.info(`Downloading took ${(finishDownload - startDownload).toFixed(1)} ms`);
                        }
                        this.setByInstance(key, instanseId, Object.assign(Object.assign({}, instance), { value: file }));
                    })
                        .catch((err) => { var _a; return (_a = this.logger) === null || _a === void 0 ? void 0 : _a.error({ err }, 'Error fetching content'); }));
                }
            });
            yield Promise.all(promises);
        });
    }
    clear() {
        this.cache.clear();
        this.contentWriter.clear();
    }
    run() {
        this.contentWriter.startActualizeCacheTimer(this.cache);
        if (this.readInterval) {
            this.startUpdatesChecking();
        }
    }
    checkUpdates(key) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isUpdating.get(key) ||
                ((_a = this.contentWriter.storageWrites.get(key)) === null || _a === void 0 ? void 0 : _a.type) === StorageContentWriter_1.ContentWriterType.NEEDS_DELETE) {
                return;
            }
            this.isUpdating.set(key, true);
            try {
                if (!this.cache.has(key)) {
                    this.cache.set(key, new Map());
                }
                const cachedByKey = this.cache.get(key);
                const initialSize = cachedByKey.size;
                const { updated, deleted } = yield this.metadataReader.fetchInstancesUpdates(key, cachedByKey);
                if (deleted.has(key)) {
                    yield this.delete(key);
                    this.publish(CacheEvents.KEY_DELETED, key);
                    return;
                }
                updated.forEach((storageObject, instanceId) => {
                    cachedByKey.set(instanceId, {
                        value: null,
                        modifiedTs: storageObject.createdAt.getTime(),
                    });
                });
                if (updated.size && initialSize) {
                    this.publish(CacheEvents.INSTANCES_CHANGED, key);
                }
                deleted.forEach((instanceId) => {
                    if (instanceId !== this.instanceId) {
                        cachedByKey.delete(instanceId);
                    }
                });
                if (!cachedByKey.size) {
                    this.cache.delete(key);
                }
            }
            catch (err) {
                (_b = this.logger) === null || _b === void 0 ? void 0 : _b.error({ err }, 'Error checking updates');
                return;
            }
            finally {
                this.isUpdating.set(key, false);
            }
        });
    }
    startUpdatesChecking() {
        return __awaiter(this, void 0, void 0, function* () {
            this.stopUpdatesChecking();
            this.timeout = setTimeout(() => __awaiter(this, void 0, void 0, function* () {
                Array.from(this.cache.keys()).forEach((key) => {
                    this.queueReadMetadata.add(() => __awaiter(this, void 0, void 0, function* () {
                        yield this.getQueue(key).add(() => __awaiter(this, void 0, void 0, function* () {
                            yield this.checkUpdates(key);
                        }));
                    }));
                });
                yield this.queueReadMetadata.onIdle();
                this.startUpdatesChecking();
            }), this.readInterval);
        });
    }
    stopUpdatesChecking() {
        if (this.timeout)
            clearTimeout(this.timeout);
    }
    stop() {
        this.stopUpdatesChecking();
        this.contentWriter.stop();
    }
    shutdown() {
        return __awaiter(this, void 0, void 0, function* () {
            this.stop();
            yield this.contentWriter.shutdown(this.cache);
        });
    }
}
exports.default = StorageAdapter;
//# sourceMappingURL=data:application/json;base64,