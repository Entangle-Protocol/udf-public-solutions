import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "";
export interface Compression {
    type: Compression_TYPE;
    data: Uint8Array;
}
export declare enum Compression_TYPE {
    Uncompressed = 0,
    GZIP = 1
}
export declare function compression_TYPEFromJSON(object: any): Compression_TYPE;
export declare function compression_TYPEToJSON(object: Compression_TYPE): string;
export declare const Compression: {
    encode(message: Compression, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Compression;
    fromJSON(object: any): Compression;
    toJSON(message: Compression): unknown;
    fromPartial<I extends {
        type?: Compression_TYPE | undefined;
        data?: Uint8Array | undefined;
    } & {
        type?: Compression_TYPE | undefined;
        data?: Uint8Array | undefined;
    } & { [K in Exclude<keyof I, keyof Compression>]: never; }>(object: I): Compression;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
