import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "";
export interface Encryption {
    algo: string;
    key?: Uint8Array | undefined;
    cipher?: string | undefined;
    ciphertext?: Uint8Array | undefined;
    iv?: Uint8Array | undefined;
    mac?: Uint8Array | undefined;
    encoding: string;
}
export interface Hash {
    algo: string;
    hash: Uint8Array;
}
export interface TRI {
    solutionHashes: Hash[];
    mrenclave: Uint8Array;
    args: string;
    encryption: Encryption | undefined;
}
export declare const Encryption: {
    encode(message: Encryption, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Encryption;
    fromJSON(object: any): Encryption;
    toJSON(message: Encryption): unknown;
    fromPartial<I extends {
        algo?: string | undefined;
        key?: Uint8Array | undefined;
        cipher?: string | undefined;
        ciphertext?: Uint8Array | undefined;
        iv?: Uint8Array | undefined;
        mac?: Uint8Array | undefined;
        encoding?: string | undefined;
    } & {
        algo?: string | undefined;
        key?: Uint8Array | undefined;
        cipher?: string | undefined;
        ciphertext?: Uint8Array | undefined;
        iv?: Uint8Array | undefined;
        mac?: Uint8Array | undefined;
        encoding?: string | undefined;
    } & { [K in Exclude<keyof I, keyof Encryption>]: never; }>(object: I): Encryption;
};
export declare const Hash: {
    encode(message: Hash, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Hash;
    fromJSON(object: any): Hash;
    toJSON(message: Hash): unknown;
    fromPartial<I extends {
        algo?: string | undefined;
        hash?: Uint8Array | undefined;
    } & {
        algo?: string | undefined;
        hash?: Uint8Array | undefined;
    } & { [K in Exclude<keyof I, keyof Hash>]: never; }>(object: I): Hash;
};
export declare const TRI: {
    encode(message: TRI, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TRI;
    fromJSON(object: any): TRI;
    toJSON(message: TRI): unknown;
    fromPartial<I extends {
        solutionHashes?: {
            algo?: string | undefined;
            hash?: Uint8Array | undefined;
        }[] | undefined;
        mrenclave?: Uint8Array | undefined;
        args?: string | undefined;
        encryption?: {
            algo?: string | undefined;
            key?: Uint8Array | undefined;
            cipher?: string | undefined;
            ciphertext?: Uint8Array | undefined;
            iv?: Uint8Array | undefined;
            mac?: Uint8Array | undefined;
            encoding?: string | undefined;
        } | undefined;
    } & {
        solutionHashes?: ({
            algo?: string | undefined;
            hash?: Uint8Array | undefined;
        }[] & ({
            algo?: string | undefined;
            hash?: Uint8Array | undefined;
        } & {
            algo?: string | undefined;
            hash?: Uint8Array | undefined;
        } & { [K in Exclude<keyof I["solutionHashes"][number], keyof Hash>]: never; })[] & { [K_1 in Exclude<keyof I["solutionHashes"], keyof {
            algo?: string | undefined;
            hash?: Uint8Array | undefined;
        }[]>]: never; }) | undefined;
        mrenclave?: Uint8Array | undefined;
        args?: string | undefined;
        encryption?: ({
            algo?: string | undefined;
            key?: Uint8Array | undefined;
            cipher?: string | undefined;
            ciphertext?: Uint8Array | undefined;
            iv?: Uint8Array | undefined;
            mac?: Uint8Array | undefined;
            encoding?: string | undefined;
        } & {
            algo?: string | undefined;
            key?: Uint8Array | undefined;
            cipher?: string | undefined;
            ciphertext?: Uint8Array | undefined;
            iv?: Uint8Array | undefined;
            mac?: Uint8Array | undefined;
            encoding?: string | undefined;
        } & { [K_2 in Exclude<keyof I["encryption"], keyof Encryption>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I, keyof TRI>]: never; }>(object: I): TRI;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
