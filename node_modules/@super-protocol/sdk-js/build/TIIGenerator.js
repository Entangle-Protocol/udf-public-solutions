"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_gzip_1 = require("node-gzip");
const lodash_1 = __importDefault(require("lodash"));
const Compression_1 = require("./proto/Compression");
const TRI_1 = require("./proto/TRI");
const crypto_1 = __importDefault(require("./crypto"));
const models_1 = require("./models");
const dto_js_1 = require("@super-protocol/dto-js");
const tee_lib_1 = require("@super-protocol/tee-lib");
const QuoteValidator_1 = require("./tee/QuoteValidator");
const statuses_1 = require("./tee/statuses");
const logger_1 = __importDefault(require("./logger"));
class TIIGenerator {
    static generateByOffer(offerId, solutionHashes, linkageString, resource, args, encryption) {
        return __awaiter(this, void 0, void 0, function* () {
            const teeOffer = new models_1.TeeOffer(offerId);
            const teeOfferInfo = yield teeOffer.getInfo();
            const linkage = linkageString
                ? JSON.parse(linkageString)
                : {
                    encoding: dto_js_1.Encoding.base64,
                    mrenclave: '',
                };
            const serializer = new tee_lib_1.TLBlockSerializerV1();
            const tlb = serializer.unserializeTlb(Buffer.from(teeOfferInfo.tlb, 'base64'));
            const validator = new QuoteValidator_1.QuoteValidator(process.env['INTEL_SGX_API_URL']);
            const quoteBuffer = Buffer.from(tlb.quote);
            const quoteStatus = yield validator.validate(quoteBuffer);
            if (quoteStatus.quoteValidationStatus !== statuses_1.QuoteValidationStatuses.UpToDate) {
                if (quoteStatus.quoteValidationStatus === statuses_1.QuoteValidationStatuses.Error) {
                    throw new Error('Quote in TLB is invalid');
                }
                else {
                    logger_1.default.warn(quoteStatus, 'Quote validation status is not UpToDate');
                }
            }
            const checkData = yield validator.isQuoteHasUserData(quoteBuffer, Buffer.from(tlb.dataBlob));
            if (!checkData) {
                throw new Error('Quote in TLB has invalid user data');
            }
            // TODO: check env with SP-149
            const mac = encryption.authTag || encryption.mac;
            const rawTri = {
                solutionHashes: solutionHashes.map((hash) => ({
                    algo: hash.algo,
                    hash: Buffer.from(hash.hash, hash.encoding),
                })),
                mrenclave: Buffer.from(linkage.mrenclave, linkage.encoding),
                args: JSON.stringify(args || ''),
                encryption: Object.assign(Object.assign({}, encryption), { ciphertext: encryption.ciphertext
                        ? Buffer.from(encryption.ciphertext, encryption.encoding)
                        : undefined, key: encryption.key ? Buffer.from(encryption.key, encryption.encoding) : undefined, iv: encryption.iv
                        ? Buffer.from(encryption.iv, encryption.encoding)
                        : undefined, mac: mac ? Buffer.from(mac, encryption.encoding) : undefined }),
            };
            const tri = TRI_1.TRI.encode(rawTri).finish();
            const compressedTri = Compression_1.Compression.encode({
                data: yield (0, node_gzip_1.gzip)(tri),
                type: Compression_1.Compression_TYPE.GZIP,
            }).finish();
            return JSON.stringify({
                encryptedResource: yield crypto_1.default.encrypt(JSON.stringify(resource), JSON.parse(teeOfferInfo.argsPublicKey)),
                tri: yield crypto_1.default.encrypt(Buffer.from(compressedTri).toString(dto_js_1.Encoding.base64), {
                    algo: dto_js_1.CryptoAlgorithm.ECIES,
                    key: Buffer.from(tlb.data.teePubKeyData).toString('base64'),
                    encoding: dto_js_1.Encoding.base64,
                }),
            });
        });
    }
    static generate(orderId, resource, args, encryption) {
        return __awaiter(this, void 0, void 0, function* () {
            const order = new models_1.Order(orderId);
            const parentOrderId = yield order.getParentOrder();
            const parentOrder = new models_1.Order(parentOrderId);
            const parentOrderInfo = yield parentOrder.getOrderInfo();
            const { hashes, linkage } = yield this.getSolutionHashesAndLinkage(parentOrderInfo.args.inputOffers);
            return this.generateByOffer(parentOrderInfo.offerId, hashes, linkage, resource, args, encryption);
        });
    }
    static getSolutionHashesAndLinkage(inputOffers) {
        return __awaiter(this, void 0, void 0, function* () {
            const solutionHashes = [];
            let solutionLinkage;
            let anyLinkage;
            yield Promise.all(inputOffers.map((offerId) => __awaiter(this, void 0, void 0, function* () {
                const offer = new models_1.Offer(offerId);
                const offerInfo = yield offer.getInfo();
                if (offerInfo.hash) {
                    solutionHashes.push(JSON.parse(offerInfo.hash));
                }
                const restrictions = lodash_1.default.intersection(offerInfo.restrictions.offers, inputOffers).filter((restrictedOfferId) => restrictedOfferId !== offer.id);
                if (restrictions.length) {
                    solutionLinkage = offerInfo.linkage;
                }
                else {
                    anyLinkage = offerInfo.linkage;
                }
            })));
            return {
                hashes: solutionHashes,
                linkage: solutionLinkage || anyLinkage,
            };
        });
    }
    static getTRI(tii, decryptionKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const tiiObj = JSON.parse(tii);
            tiiObj.tri.key = decryptionKey.toString(tiiObj.tri.encoding);
            const tri = yield crypto_1.default.decrypt(tiiObj.tri);
            const compression = Compression_1.Compression.decode(Buffer.from(tri, tiiObj.tri.encoding));
            let decompressed;
            switch (compression.type) {
                case Compression_1.Compression_TYPE.GZIP:
                    decompressed = yield (0, node_gzip_1.ungzip)(compression.data);
                    break;
                default:
                    throw Error('Unknown compression method');
            }
            const decoded = TRI_1.TRI.decode(decompressed);
            return {
                solutionHashes: decoded.solutionHashes.map((hash) => ({
                    hash: Buffer.from(hash.hash).toString(dto_js_1.Encoding.base64),
                    algo: hash.algo,
                    encoding: dto_js_1.Encoding.base64,
                })),
                linkage: {
                    encoding: dto_js_1.Encoding.base64,
                    mrenclave: Buffer.from(decoded.mrenclave).toString(dto_js_1.Encoding.base64),
                },
                args: decoded.args,
                encryption: {
                    algo: decoded.encryption.algo,
                    cipher: decoded.encryption.cipher,
                    encoding: dto_js_1.Encoding.base64,
                    key: Buffer.from(decoded.encryption.key).toString(dto_js_1.Encoding.base64),
                    iv: decoded.encryption.iv && Buffer.from(decoded.encryption.iv).toString(dto_js_1.Encoding.base64),
                    mac: decoded.encryption.mac &&
                        Buffer.from(decoded.encryption.mac).toString(dto_js_1.Encoding.base64),
                },
            };
        });
    }
    static getUrl(tii, decryptionKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield TIIGenerator.getResource(tii, decryptionKey);
            return res.url;
        });
    }
    static getResource(tii, decryptionKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const encryptedResource = JSON.parse(tii).encryptedResource;
            encryptedResource.key = decryptionKey.toString(encryptedResource.encoding);
            const resource = yield crypto_1.default.decrypt(encryptedResource);
            return JSON.parse(resource);
        });
    }
}
exports.default = TIIGenerator;
//# sourceMappingURL=data:application/json;base64,