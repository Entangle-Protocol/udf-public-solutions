export declare const abi: readonly [{
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "owner";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "spender";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "value";
        readonly type: "uint256";
    }];
    readonly name: "Approval";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "from";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "value";
        readonly type: "uint256";
    }];
    readonly name: "Transfer";
    readonly type: "event";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "owner";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "spender";
        readonly type: "address";
    }];
    readonly name: "allowance";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "spender";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "approve";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "account";
        readonly type: "address";
    }];
    readonly name: "balanceOf";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "decimals";
    readonly outputs: readonly [{
        readonly internalType: "uint8";
        readonly name: "";
        readonly type: "uint8";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "spender";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "subtractedValue";
        readonly type: "uint256";
    }];
    readonly name: "decreaseAllowance";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "spender";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "addedValue";
        readonly type: "uint256";
    }];
    readonly name: "increaseAllowance";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly internalType: "string";
        readonly name: "";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "symbol";
    readonly outputs: readonly [{
        readonly internalType: "string";
        readonly name: "";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "totalSupply";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "transfer";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "from";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "transferFrom";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "owner";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "spender";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "value";
        readonly type: "uint256";
    }];
    readonly name: "Approval";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "from";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "value";
        readonly type: "uint256";
    }];
    readonly name: "Transfer";
    readonly type: "event";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "owner";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "spender";
        readonly type: "address";
    }];
    readonly name: "allowance";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "spender";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "approve";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "account";
        readonly type: "address";
    }];
    readonly name: "balanceOf";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "totalSupply";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "transfer";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "from";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "transferFrom";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "owner";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "spender";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "value";
        readonly type: "uint256";
    }];
    readonly name: "Approval";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "from";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "value";
        readonly type: "uint256";
    }];
    readonly name: "Transfer";
    readonly type: "event";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "owner";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "spender";
        readonly type: "address";
    }];
    readonly name: "allowance";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "spender";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "approve";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "account";
        readonly type: "address";
    }];
    readonly name: "balanceOf";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "burn";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "account";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "burnFrom";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "decimals";
    readonly outputs: readonly [{
        readonly internalType: "uint8";
        readonly name: "";
        readonly type: "uint8";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "spender";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "subtractedValue";
        readonly type: "uint256";
    }];
    readonly name: "decreaseAllowance";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "spender";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "addedValue";
        readonly type: "uint256";
    }];
    readonly name: "increaseAllowance";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly internalType: "string";
        readonly name: "";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "symbol";
    readonly outputs: readonly [{
        readonly internalType: "string";
        readonly name: "";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "totalSupply";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "transfer";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "from";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "transferFrom";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "owner";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "spender";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "value";
        readonly type: "uint256";
    }];
    readonly name: "Approval";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "from";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "value";
        readonly type: "uint256";
    }];
    readonly name: "Transfer";
    readonly type: "event";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "owner";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "spender";
        readonly type: "address";
    }];
    readonly name: "allowance";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "spender";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "approve";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "account";
        readonly type: "address";
    }];
    readonly name: "balanceOf";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "decimals";
    readonly outputs: readonly [{
        readonly internalType: "uint8";
        readonly name: "";
        readonly type: "uint8";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly internalType: "string";
        readonly name: "";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "symbol";
    readonly outputs: readonly [{
        readonly internalType: "string";
        readonly name: "";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "totalSupply";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "transfer";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "from";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "transferFrom";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "begin";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "end";
        readonly type: "uint256";
    }];
    readonly name: "getListOfActiveOffersRange";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getListOfActiveOffersSize";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "onOfferDisabled";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "onOfferEnabled";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "begin";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "end";
        readonly type: "uint256";
    }];
    readonly name: "getListOfActiveOrdersRange";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getListOfActiveOrdersSize";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "getOfferActiveOrdersCount";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "begin";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "end";
        readonly type: "uint256";
    }];
    readonly name: "getOfferActiveOrdersRange";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getWorkingOffersCount";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "begin";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "end";
        readonly type: "uint256";
    }];
    readonly name: "getWorkingOffersRange";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "onOrderActivated";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "onOrderDeactivated";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "claimer";
        readonly type: "address";
    }];
    readonly name: "RewardsClaimed";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "provider";
        readonly type: "address";
    }];
    readonly name: "TcbBenchmarkChanged";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "provider";
        readonly type: "address";
    }];
    readonly name: "TcbCompleted";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "provider";
        readonly type: "address";
    }];
    readonly name: "TcbInitialized";
    readonly type: "event";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "addTcbToSupply";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "enum TcbVerifiedStatus[]";
        readonly name: "marks";
        readonly type: "uint8[]";
    }, {
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "applyTcbMarks";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "assignLastBlocksToCheck";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "assignSuspiciousBlocksToCheck";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "claimRewards";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }];
    readonly name: "getActualTcbId";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getConsensusConstants";
    readonly outputs: readonly [{
        readonly internalType: "uint8";
        readonly name: "";
        readonly type: "uint8";
    }, {
        readonly internalType: "uint8";
        readonly name: "";
        readonly type: "uint8";
    }, {
        readonly internalType: "uint8";
        readonly name: "";
        readonly type: "uint8";
    }, {
        readonly internalType: "uint8";
        readonly name: "";
        readonly type: "uint8";
    }, {
        readonly internalType: "uint8";
        readonly name: "";
        readonly type: "uint8";
    }, {
        readonly internalType: "uint32";
        readonly name: "";
        readonly type: "uint32";
    }];
    readonly stateMutability: "pure";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "index";
        readonly type: "uint256";
    }];
    readonly name: "getEpoch";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "reward";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "benchmark";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "penaltyBenchmark";
            readonly type: "uint256";
        }];
        readonly internalType: "struct Epoch";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbTime";
        readonly type: "uint256";
    }];
    readonly name: "getEpochTime";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "epochStart";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "epochEnd";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "epochIndex";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }];
    readonly name: "getInitializedTcbId";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getLastBlockTable";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getLastBlockTableSize";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getSuspiciousBlockTable";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getSuspiciousBlockTableSize";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "getTcbById";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "string";
            readonly name: "quote";
            readonly type: "string";
        }, {
            readonly internalType: "uint256";
            readonly name: "timeInitialized";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "timeAdded";
            readonly type: "uint256";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "teeOfferId";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "deviceID";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "benchmark";
                readonly type: "uint256";
            }, {
                readonly internalType: "string";
                readonly name: "properties";
                readonly type: "string";
            }];
            readonly internalType: "struct TcbPublicData";
            readonly name: "publicData";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256[]";
                readonly name: "checkingBlocks";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "enum TcbVerifiedStatus[]";
                readonly name: "checkingBlockMarks";
                readonly type: "uint8[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "lastBlocksTakenAmount";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "suspiciousBlocksTakenAmount";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint16";
                readonly name: "negative";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint16";
                readonly name: "positive";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint256";
                readonly name: "previousTcb";
                readonly type: "uint256";
            }, {
                readonly internalType: "bool";
                readonly name: "lastBlocksTaken";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "suspiciousBlocksTaken";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "assignedToEpoch_DEPRECATED";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "checked";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "rewardClaimed";
                readonly type: "bool";
            }];
            readonly internalType: "struct TcbUtilityData";
            readonly name: "utilData";
            readonly type: "tuple";
        }, {
            readonly internalType: "enum TcbStatus";
            readonly name: "status";
            readonly type: "uint8";
        }];
        readonly internalType: "struct Tcb";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "getTcbReward";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }];
    readonly name: "initializeTcb";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "isBenchmarkChangedByLastbBlock";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }];
    readonly name: "isTcbCreationAvailable";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "offerNotBlocked";
        readonly type: "bool";
    }, {
        readonly internalType: "bool";
        readonly name: "newEpochStarted";
        readonly type: "bool";
    }, {
        readonly internalType: "bool";
        readonly name: "halfEpochPassed";
        readonly type: "bool";
    }, {
        readonly internalType: "bool";
        readonly name: "benchmarkVerified";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "isTeeOfferVerifying";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "benchmark";
        readonly type: "uint256";
    }, {
        readonly internalType: "string";
        readonly name: "properties";
        readonly type: "string";
    }, {
        readonly internalType: "bytes32";
        readonly name: "deviceID";
        readonly type: "bytes32";
    }, {
        readonly internalType: "string";
        readonly name: "quote";
        readonly type: "string";
    }];
    readonly name: "setTcbData";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }, {
        readonly internalType: "enum TcbStatus";
        readonly name: "status";
        readonly type: "uint8";
    }];
    readonly name: "setTcbStatus";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "provider";
        readonly type: "address";
    }];
    readonly name: "TcbBanned";
    readonly type: "event";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "addLastBlock";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "addSuspiciousBlock";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "addTcbToEpoch";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "compareWithThreshold";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "intruderTcbId";
        readonly type: "uint256";
    }];
    readonly name: "compensateEpochDamage";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "findAccomplices";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "compensation";
        readonly type: "uint256";
    }];
    readonly name: "increaseNextEpochCompensation";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "removeLastBlock";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "removeSuspiciousBlock";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "updateConsensusTables";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "owner";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "totalLocked";
        readonly type: "uint256";
    }];
    readonly name: "DepositPartLocked";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "owner";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "totalLocked";
        readonly type: "uint256";
    }];
    readonly name: "DepositPartUnlocked";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "owner";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "totalAmount";
        readonly type: "uint256";
    }];
    readonly name: "DepositReplenished";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "owner";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "totalAmount";
        readonly type: "uint256";
    }];
    readonly name: "DepositWithdrawn";
    readonly type: "event";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "depositOwner";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "addProfit";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "depositOwner";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "confiscateTokensFrom";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "depositOwner";
        readonly type: "address";
    }];
    readonly name: "getDepositInfo";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "totalLocked";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "profit";
            readonly type: "uint256";
        }];
        readonly internalType: "struct DepositInfo";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "depositOwner";
        readonly type: "address";
    }];
    readonly name: "getLockedTokensAmount";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "depositOwner";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "lockDeposit";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "replenish";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "beneficiary";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "replenishFor";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "funder";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "beneficiary";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "replenishForByApp";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "depositOwner";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "unlockDeposit";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "withdraw";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "getOrderMark";
    readonly outputs: readonly [{
        readonly internalType: "enum Mark";
        readonly name: "";
        readonly type: "uint8";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "provider";
        readonly type: "address";
    }];
    readonly name: "getProviderMarks";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "positive";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "negative";
            readonly type: "uint256";
        }];
        readonly internalType: "struct ProviderMarksCount";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }, {
        readonly internalType: "enum Mark";
        readonly name: "mark";
        readonly type: "uint8";
    }];
    readonly name: "setOrderMark";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "creator";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "bytes32";
        readonly name: "externalId";
        readonly type: "bytes32";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "OfferCreated";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly indexed: true;
        readonly internalType: "enum OfferType";
        readonly name: "offerType";
        readonly type: "uint8";
    }];
    readonly name: "OfferDisabled";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly indexed: true;
        readonly internalType: "enum OfferType";
        readonly name: "offerType";
        readonly type: "uint8";
    }];
    readonly name: "OfferEnabled";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "creator";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "bytes32";
        readonly name: "externalId";
        readonly type: "bytes32";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "TeeOfferCreated";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "violationRate";
        readonly type: "uint256";
    }];
    readonly name: "TeeOfferViolationRateChanged";
    readonly type: "event";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }, {
        readonly components: readonly [{
            readonly internalType: "string";
            readonly name: "name";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "description";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "teeType";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "properties";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "tlb";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "argsPublicKey";
            readonly type: "string";
        }, {
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "cpuCores";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "ram";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "diskUsage";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct SlotInfo";
                readonly name: "slotInfo";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "bandwidth";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "traffic";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "externalPort";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct OptionInfo";
                readonly name: "optionInfo";
                readonly type: "tuple";
            }];
            readonly internalType: "struct HardwareInfo";
            readonly name: "hardwareInfo";
            readonly type: "tuple";
        }];
        readonly internalType: "struct TeeOfferInfo";
        readonly name: "info";
        readonly type: "tuple";
    }, {
        readonly internalType: "bytes32";
        readonly name: "externalId";
        readonly type: "bytes32";
    }, {
        readonly internalType: "bool";
        readonly name: "enabled";
        readonly type: "bool";
    }];
    readonly name: "createTeeOffer";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }, {
        readonly components: readonly [{
            readonly internalType: "string";
            readonly name: "name";
            readonly type: "string";
        }, {
            readonly internalType: "enum OfferGroup";
            readonly name: "group";
            readonly type: "uint8";
        }, {
            readonly internalType: "enum OfferType";
            readonly name: "offerType";
            readonly type: "uint8";
        }, {
            readonly internalType: "bool";
            readonly name: "cancelable";
            readonly type: "bool";
        }, {
            readonly internalType: "string";
            readonly name: "description";
            readonly type: "string";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256[]";
                readonly name: "offers";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "enum OfferType[]";
                readonly name: "types";
                readonly type: "uint8[]";
            }];
            readonly internalType: "struct OfferRestrictions";
            readonly name: "restrictions";
            readonly type: "tuple";
        }, {
            readonly internalType: "string";
            readonly name: "input";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "output";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "allowedArgs";
            readonly type: "string";
        }, {
            readonly internalType: "address[]";
            readonly name: "allowedAccounts";
            readonly type: "address[]";
        }, {
            readonly internalType: "string";
            readonly name: "argsPublicKey";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "resultResource";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "linkage";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "hash";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "metadata";
            readonly type: "string";
        }];
        readonly internalType: "struct ValueOfferInfo";
        readonly name: "info";
        readonly type: "tuple";
    }, {
        readonly internalType: "bytes32";
        readonly name: "externalId";
        readonly type: "bytes32";
    }, {
        readonly internalType: "bool";
        readonly name: "enabled";
        readonly type: "bool";
    }];
    readonly name: "createValueOffer";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "disableOffer";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "enableOffer";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly internalType: "string";
        readonly name: "description";
        readonly type: "string";
    }];
    readonly name: "setOfferDescription";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly internalType: "string";
        readonly name: "name";
        readonly type: "string";
    }];
    readonly name: "setOfferName";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly internalType: "string";
        readonly name: "publicKey";
        readonly type: "string";
    }];
    readonly name: "setOfferPublicKey";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "cpuCores";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "ram";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "diskUsage";
                readonly type: "uint64";
            }];
            readonly internalType: "struct SlotInfo";
            readonly name: "slotInfo";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "bandwidth";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "traffic";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "externalPort";
                readonly type: "uint64";
            }];
            readonly internalType: "struct OptionInfo";
            readonly name: "optionInfo";
            readonly type: "tuple";
        }];
        readonly internalType: "struct HardwareInfo";
        readonly name: "newInfo";
        readonly type: "tuple";
    }];
    readonly name: "setTeeOfferHardwareInfo";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly internalType: "string";
            readonly name: "name";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "description";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "teeType";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "properties";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "tlb";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "argsPublicKey";
            readonly type: "string";
        }, {
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "cpuCores";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "ram";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "diskUsage";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct SlotInfo";
                readonly name: "slotInfo";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "bandwidth";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "traffic";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "externalPort";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct OptionInfo";
                readonly name: "optionInfo";
                readonly type: "tuple";
            }];
            readonly internalType: "struct HardwareInfo";
            readonly name: "hardwareInfo";
            readonly type: "tuple";
        }];
        readonly internalType: "struct TeeOfferInfo";
        readonly name: "newInfo";
        readonly type: "tuple";
    }];
    readonly name: "setTeeOfferInfo";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly internalType: "string";
        readonly name: "tlb";
        readonly type: "string";
    }];
    readonly name: "setTeeOfferTlb";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly internalType: "string";
            readonly name: "name";
            readonly type: "string";
        }, {
            readonly internalType: "enum OfferGroup";
            readonly name: "group";
            readonly type: "uint8";
        }, {
            readonly internalType: "enum OfferType";
            readonly name: "offerType";
            readonly type: "uint8";
        }, {
            readonly internalType: "bool";
            readonly name: "cancelable";
            readonly type: "bool";
        }, {
            readonly internalType: "string";
            readonly name: "description";
            readonly type: "string";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256[]";
                readonly name: "offers";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "enum OfferType[]";
                readonly name: "types";
                readonly type: "uint8[]";
            }];
            readonly internalType: "struct OfferRestrictions";
            readonly name: "restrictions";
            readonly type: "tuple";
        }, {
            readonly internalType: "string";
            readonly name: "input";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "output";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "allowedArgs";
            readonly type: "string";
        }, {
            readonly internalType: "address[]";
            readonly name: "allowedAccounts";
            readonly type: "address[]";
        }, {
            readonly internalType: "string";
            readonly name: "argsPublicKey";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "resultResource";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "linkage";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "hash";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "metadata";
            readonly type: "string";
        }];
        readonly internalType: "struct ValueOfferInfo";
        readonly name: "newInfo";
        readonly type: "tuple";
    }];
    readonly name: "setValueOfferInfo";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "begin";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "end";
        readonly type: "uint256";
    }];
    readonly name: "getTeeOffersRange";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "providerAuth";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "description";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "teeType";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "properties";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "tlb";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "argsPublicKey";
                readonly type: "string";
            }, {
                readonly components: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "uint64";
                        readonly name: "cpuCores";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "ram";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "diskUsage";
                        readonly type: "uint64";
                    }];
                    readonly internalType: "struct SlotInfo";
                    readonly name: "slotInfo";
                    readonly type: "tuple";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "uint64";
                        readonly name: "bandwidth";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "traffic";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "externalPort";
                        readonly type: "uint64";
                    }];
                    readonly internalType: "struct OptionInfo";
                    readonly name: "optionInfo";
                    readonly type: "tuple";
                }];
                readonly internalType: "struct HardwareInfo";
                readonly name: "hardwareInfo";
                readonly type: "tuple";
            }];
            readonly internalType: "struct TeeOfferInfo";
            readonly name: "info";
            readonly type: "tuple";
        }, {
            readonly internalType: "bool";
            readonly name: "enabled";
            readonly type: "bool";
        }];
        readonly internalType: "struct TeeOfferData[]";
        readonly name: "";
        readonly type: "tuple[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "enum OfferType";
        readonly name: "offerType";
        readonly type: "uint8";
    }, {
        readonly internalType: "uint256";
        readonly name: "begin";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "end";
        readonly type: "uint256";
    }];
    readonly name: "getValueOffersRange";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "providerAuth";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "enum OfferGroup";
                readonly name: "group";
                readonly type: "uint8";
            }, {
                readonly internalType: "enum OfferType";
                readonly name: "offerType";
                readonly type: "uint8";
            }, {
                readonly internalType: "bool";
                readonly name: "cancelable";
                readonly type: "bool";
            }, {
                readonly internalType: "string";
                readonly name: "description";
                readonly type: "string";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256[]";
                    readonly name: "offers";
                    readonly type: "uint256[]";
                }, {
                    readonly internalType: "enum OfferType[]";
                    readonly name: "types";
                    readonly type: "uint8[]";
                }];
                readonly internalType: "struct OfferRestrictions";
                readonly name: "restrictions";
                readonly type: "tuple";
            }, {
                readonly internalType: "string";
                readonly name: "input";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "output";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "allowedArgs";
                readonly type: "string";
            }, {
                readonly internalType: "address[]";
                readonly name: "allowedAccounts";
                readonly type: "address[]";
            }, {
                readonly internalType: "string";
                readonly name: "argsPublicKey";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "resultResource";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "linkage";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "hash";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "metadata";
                readonly type: "string";
            }];
            readonly internalType: "struct ValueOfferInfo";
            readonly name: "info";
            readonly type: "tuple";
        }, {
            readonly internalType: "bool";
            readonly name: "enabled";
            readonly type: "bool";
        }];
        readonly internalType: "struct ValueOfferData[]";
        readonly name: "";
        readonly type: "tuple[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "getOfferGroup";
    readonly outputs: readonly [{
        readonly internalType: "enum OfferGroup";
        readonly name: "";
        readonly type: "uint8";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "slotId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint32";
        readonly name: "slotCount";
        readonly type: "uint32";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "optionsIds";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "uint32[]";
        readonly name: "optionsCount";
        readonly type: "uint32[]";
    }];
    readonly name: "getOfferMinDeposit";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "getOfferOrigins";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "createdDate";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "createdBy";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "modifiedDate";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "modifiedBy";
            readonly type: "address";
        }];
        readonly internalType: "struct Origins";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "getOfferProviderActionAccount";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "getOfferProviderAuthority";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "getOfferType";
    readonly outputs: readonly [{
        readonly internalType: "enum OfferType";
        readonly name: "";
        readonly type: "uint8";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "enum OfferType";
        readonly name: "offerType";
        readonly type: "uint8";
    }];
    readonly name: "getOffersCountByType";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getOffersTotalCount";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "getTeeOffer";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "providerAuth";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "description";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "teeType";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "properties";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "tlb";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "argsPublicKey";
                readonly type: "string";
            }, {
                readonly components: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "uint64";
                        readonly name: "cpuCores";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "ram";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "diskUsage";
                        readonly type: "uint64";
                    }];
                    readonly internalType: "struct SlotInfo";
                    readonly name: "slotInfo";
                    readonly type: "tuple";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "uint64";
                        readonly name: "bandwidth";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "traffic";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "externalPort";
                        readonly type: "uint64";
                    }];
                    readonly internalType: "struct OptionInfo";
                    readonly name: "optionInfo";
                    readonly type: "tuple";
                }];
                readonly internalType: "struct HardwareInfo";
                readonly name: "hardwareInfo";
                readonly type: "tuple";
            }];
            readonly internalType: "struct TeeOfferInfo";
            readonly name: "info";
            readonly type: "tuple";
        }, {
            readonly internalType: "bool";
            readonly name: "enabled";
            readonly type: "bool";
        }];
        readonly internalType: "struct TeeOfferData";
        readonly name: "ret";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }];
    readonly name: "getTeeOfferHardwareInfo";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "cpuCores";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "ram";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "diskUsage";
                readonly type: "uint64";
            }];
            readonly internalType: "struct SlotInfo";
            readonly name: "slotInfo";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "bandwidth";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "traffic";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "externalPort";
                readonly type: "uint64";
            }];
            readonly internalType: "struct OptionInfo";
            readonly name: "optionInfo";
            readonly type: "tuple";
        }];
        readonly internalType: "struct HardwareInfo";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "getTeeOfferLastTlbAddedTime";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "getValueOffer";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "providerAuth";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "enum OfferGroup";
                readonly name: "group";
                readonly type: "uint8";
            }, {
                readonly internalType: "enum OfferType";
                readonly name: "offerType";
                readonly type: "uint8";
            }, {
                readonly internalType: "bool";
                readonly name: "cancelable";
                readonly type: "bool";
            }, {
                readonly internalType: "string";
                readonly name: "description";
                readonly type: "string";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256[]";
                    readonly name: "offers";
                    readonly type: "uint256[]";
                }, {
                    readonly internalType: "enum OfferType[]";
                    readonly name: "types";
                    readonly type: "uint8[]";
                }];
                readonly internalType: "struct OfferRestrictions";
                readonly name: "restrictions";
                readonly type: "tuple";
            }, {
                readonly internalType: "string";
                readonly name: "input";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "output";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "allowedArgs";
                readonly type: "string";
            }, {
                readonly internalType: "address[]";
                readonly name: "allowedAccounts";
                readonly type: "address[]";
            }, {
                readonly internalType: "string";
                readonly name: "argsPublicKey";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "resultResource";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "linkage";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "hash";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "metadata";
                readonly type: "string";
            }];
            readonly internalType: "struct ValueOfferInfo";
            readonly name: "info";
            readonly type: "tuple";
        }, {
            readonly internalType: "bool";
            readonly name: "enabled";
            readonly type: "bool";
        }];
        readonly internalType: "struct ValueOfferData";
        readonly name: "ret";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "isAutoCompleteOffer";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly internalType: "address";
        readonly name: "consumer";
        readonly type: "address";
    }];
    readonly name: "isOfferAllowedForConsumer";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "isOfferCancelable";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "isOfferEnabled";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "isOfferExists";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly internalType: "enum OfferType";
        readonly name: "offerType";
        readonly type: "uint8";
    }];
    readonly name: "isOfferRestrictedByOfferType";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "otherOfferId";
        readonly type: "uint256";
    }];
    readonly name: "isOfferRestrictionsPermitOtherOffer";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "isTeeOfferBanned";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "owner";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "groupId";
        readonly type: "uint256";
    }];
    readonly name: "OrdersGroupCreated";
    readonly type: "event";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "groupId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "ordersIds";
        readonly type: "uint256[]";
    }];
    readonly name: "addOrdersToGroup";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "ordersIds";
        readonly type: "uint256[]";
    }];
    readonly name: "createGroupOfOrders";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "groupId";
        readonly type: "uint256";
    }];
    readonly name: "getGroupOrders";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "getOrderGroupId";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "groupId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "ordersIds";
        readonly type: "uint256[]";
    }];
    readonly name: "removeOrdersFromGroup";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "consumer";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "bytes32";
        readonly name: "externalId";
        readonly type: "bytes32";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "parentOrderId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "OrderCreated";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }, {
        readonly indexed: true;
        readonly internalType: "enum OrderStatus";
        readonly name: "status";
        readonly type: "uint8";
    }];
    readonly name: "OrderStatusUpdated";
    readonly type: "event";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "offerId";
            readonly type: "uint256";
        }, {
            readonly internalType: "string";
            readonly name: "resultPublicKey";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "encryptedRequirements";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "encryptedArgs";
            readonly type: "string";
        }, {
            readonly internalType: "enum OrderStatus";
            readonly name: "status";
            readonly type: "uint8";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256[]";
                readonly name: "inputOffers";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "outputOffer";
                readonly type: "uint256";
            }];
            readonly internalType: "struct OrderArgs";
            readonly name: "args";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "slotId";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "slotCount";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "optionsIds";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint32[]";
                readonly name: "optionsCount";
                readonly type: "uint32[]";
            }];
            readonly internalType: "struct OrderSlots";
            readonly name: "slots";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "externalId";
            readonly type: "bytes32";
        }];
        readonly internalType: "struct OrderInfo";
        readonly name: "info";
        readonly type: "tuple";
    }, {
        readonly internalType: "uint256";
        readonly name: "deposit";
        readonly type: "uint256";
    }, {
        readonly internalType: "bool";
        readonly name: "suspended";
        readonly type: "bool";
    }];
    readonly name: "createOrder";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "consumer";
        readonly type: "address";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "offerId";
            readonly type: "uint256";
        }, {
            readonly internalType: "string";
            readonly name: "resultPublicKey";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "encryptedRequirements";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "encryptedArgs";
            readonly type: "string";
        }, {
            readonly internalType: "enum OrderStatus";
            readonly name: "status";
            readonly type: "uint8";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256[]";
                readonly name: "inputOffers";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "outputOffer";
                readonly type: "uint256";
            }];
            readonly internalType: "struct OrderArgs";
            readonly name: "args";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "slotId";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "slotCount";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "optionsIds";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint32[]";
                readonly name: "optionsCount";
                readonly type: "uint32[]";
            }];
            readonly internalType: "struct OrderSlots";
            readonly name: "slots";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "externalId";
            readonly type: "bytes32";
        }];
        readonly internalType: "struct OrderInfo";
        readonly name: "info";
        readonly type: "tuple";
    }, {
        readonly internalType: "uint256";
        readonly name: "deposit";
        readonly type: "uint256";
    }, {
        readonly internalType: "bool";
        readonly name: "suspended";
        readonly type: "bool";
    }];
    readonly name: "createOrderByApp";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "parentOrderId";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "offerId";
            readonly type: "uint256";
        }, {
            readonly internalType: "string";
            readonly name: "resultPublicKey";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "encryptedRequirements";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "encryptedArgs";
            readonly type: "string";
        }, {
            readonly internalType: "enum OrderStatus";
            readonly name: "status";
            readonly type: "uint8";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256[]";
                readonly name: "inputOffers";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "outputOffer";
                readonly type: "uint256";
            }];
            readonly internalType: "struct OrderArgs";
            readonly name: "args";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "slotId";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "slotCount";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "optionsIds";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint32[]";
                readonly name: "optionsCount";
                readonly type: "uint32[]";
            }];
            readonly internalType: "struct OrderSlots";
            readonly name: "slots";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "externalId";
            readonly type: "bytes32";
        }];
        readonly internalType: "struct OrderInfo";
        readonly name: "suborderInfo";
        readonly type: "tuple";
    }, {
        readonly components: readonly [{
            readonly internalType: "bool";
            readonly name: "blockParentOrder";
            readonly type: "bool";
        }, {
            readonly internalType: "uint256";
            readonly name: "deposit";
            readonly type: "uint256";
        }];
        readonly internalType: "struct SubOrderParams";
        readonly name: "params";
        readonly type: "tuple";
    }];
    readonly name: "createSubOrder";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "sender";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "parentOrderId";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "offerId";
            readonly type: "uint256";
        }, {
            readonly internalType: "string";
            readonly name: "resultPublicKey";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "encryptedRequirements";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "encryptedArgs";
            readonly type: "string";
        }, {
            readonly internalType: "enum OrderStatus";
            readonly name: "status";
            readonly type: "uint8";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256[]";
                readonly name: "inputOffers";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "outputOffer";
                readonly type: "uint256";
            }];
            readonly internalType: "struct OrderArgs";
            readonly name: "args";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "slotId";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "slotCount";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "optionsIds";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint32[]";
                readonly name: "optionsCount";
                readonly type: "uint32[]";
            }];
            readonly internalType: "struct OrderSlots";
            readonly name: "slots";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "externalId";
            readonly type: "bytes32";
        }];
        readonly internalType: "struct OrderInfo";
        readonly name: "suborderInfo";
        readonly type: "tuple";
    }, {
        readonly components: readonly [{
            readonly internalType: "bool";
            readonly name: "blockParentOrder";
            readonly type: "bool";
        }, {
            readonly internalType: "uint256";
            readonly name: "deposit";
            readonly type: "uint256";
        }];
        readonly internalType: "struct SubOrderParams";
        readonly name: "params";
        readonly type: "tuple";
    }];
    readonly name: "createSubOrderByApp";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "consumer";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "bool";
        readonly name: "value";
        readonly type: "bool";
    }];
    readonly name: "OrderAwaitingPaymentChanged";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "consumer";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "OrderDepositRefilled";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "consumer";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "value";
        readonly type: "uint256";
    }];
    readonly name: "OrderOptionsDepositSpentChanged";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "tokenReceiver";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "profit";
        readonly type: "uint256";
    }];
    readonly name: "OrderProfitUnlocked";
    readonly type: "event";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "isOrderProfitAvailable";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "available";
        readonly type: "bool";
    }, {
        readonly internalType: "uint256";
        readonly name: "profit";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "refillOrder";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }, {
        readonly internalType: "bool";
        readonly name: "value";
        readonly type: "bool";
    }];
    readonly name: "setAwaitingPayment";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "value";
        readonly type: "uint256";
    }];
    readonly name: "setOptionsDepositSpent";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "unlockProfit";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "orderIds";
        readonly type: "uint256[]";
    }];
    readonly name: "unlockProfitByList";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "ulockedIndex";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "consumer";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "change";
        readonly type: "uint256";
    }];
    readonly name: "OrderChangedWithdrawn";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "consumer";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "string";
        readonly name: "encryptedResult";
        readonly type: "string";
    }];
    readonly name: "OrderEncryptedResultUpdated";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "tokenReceiver";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "profit";
        readonly type: "uint256";
    }];
    readonly name: "OrderProfitWithdrawn";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "consumer";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "OrderStarted";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }, {
        readonly indexed: true;
        readonly internalType: "enum OrderStatus";
        readonly name: "status";
        readonly type: "uint8";
    }];
    readonly name: "OrderStatusUpdated";
    readonly type: "event";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "calculateOrderCurrentPrice";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "resultedPrice";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "cancelOrder";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "consumer";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "cancelOrderByApp";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }, {
        readonly internalType: "enum OrderStatus";
        readonly name: "status";
        readonly type: "uint8";
    }, {
        readonly internalType: "string";
        readonly name: "encryptedResult";
        readonly type: "string";
    }];
    readonly name: "completeOrder";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "processOrder";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "startOrder";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "sender";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "startOrderByApp";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }, {
        readonly internalType: "string";
        readonly name: "encryptedResult";
        readonly type: "string";
    }];
    readonly name: "updateOrderResult";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "calculateOrderOutputReserve";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "reservedForOutput";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "calculateTotalDepositSpent";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "depositSpent";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "calculateTotalDepositUnspent";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "depositUnspent";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "calculateTotalOrderDeposit";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "deposit";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "enum OfferGroup";
        readonly name: "parentOfferGroup";
        readonly type: "uint8";
    }, {
        readonly internalType: "enum OfferGroup";
        readonly name: "subOfferGroup";
        readonly type: "uint8";
    }];
    readonly name: "checkOrderAllowedGroup";
    readonly outputs: readonly [];
    readonly stateMutability: "pure";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "enum OrderStatus";
        readonly name: "prev";
        readonly type: "uint8";
    }, {
        readonly internalType: "enum OrderStatus";
        readonly name: "next";
        readonly type: "uint8";
    }];
    readonly name: "checkOrderAllowedStatus";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "pure";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "parentOrderId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "subOfferId";
        readonly type: "uint256";
    }, {
        readonly internalType: "enum OfferGroup";
        readonly name: "subOfferGroup";
        readonly type: "uint8";
    }];
    readonly name: "checkOrderRestrictions";
    readonly outputs: readonly [];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "getAwaitingPayment";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "getOptionsDepositSpent";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "getOrder";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "offerId";
            readonly type: "uint256";
        }, {
            readonly internalType: "string";
            readonly name: "resultPublicKey";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "encryptedRequirements";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "encryptedArgs";
            readonly type: "string";
        }, {
            readonly internalType: "enum OrderStatus";
            readonly name: "status";
            readonly type: "uint8";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256[]";
                readonly name: "inputOffers";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "outputOffer";
                readonly type: "uint256";
            }];
            readonly internalType: "struct OrderArgs";
            readonly name: "args";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "slotId";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "slotCount";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "optionsIds";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint32[]";
                readonly name: "optionsCount";
                readonly type: "uint32[]";
            }];
            readonly internalType: "struct OrderSlots";
            readonly name: "slots";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "externalId";
            readonly type: "bytes32";
        }];
        readonly internalType: "struct OrderInfo";
        readonly name: "";
        readonly type: "tuple";
    }, {
        readonly components: readonly [{
            readonly internalType: "string";
            readonly name: "encryptedResult";
            readonly type: "string";
        }, {
            readonly internalType: "uint256";
            readonly name: "orderPrice";
            readonly type: "uint256";
        }];
        readonly internalType: "struct OrderResult";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "getOrderDeposit";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "getOrderOrigins";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "createdDate";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "createdBy";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "modifiedDate";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "modifiedBy";
            readonly type: "address";
        }];
        readonly internalType: "struct Origins";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "getOrderParentOrder";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "getOrderPrice";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "getOrderSelectedUsage";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "cpuCores";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "ram";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "diskUsage";
                readonly type: "uint64";
            }];
            readonly internalType: "struct SlotInfo";
            readonly name: "slotInfo";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "enum PriceType";
                readonly name: "priceType";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint256";
                readonly name: "price";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint64";
                readonly name: "minTimeMinutes";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "maxTimeMinutes";
                readonly type: "uint64";
            }];
            readonly internalType: "struct SlotUsage";
            readonly name: "slotUsage";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "bandwidth";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "traffic";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "externalPort";
                readonly type: "uint64";
            }];
            readonly internalType: "struct OptionInfo[]";
            readonly name: "optionInfo";
            readonly type: "tuple[]";
        }, {
            readonly components: readonly [{
                readonly internalType: "enum PriceType";
                readonly name: "priceType";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint256";
                readonly name: "price";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint64";
                readonly name: "minTimeMinutes";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "maxTimeMinutes";
                readonly type: "uint64";
            }];
            readonly internalType: "struct SlotUsage[]";
            readonly name: "optionUsage";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "uint32[]";
            readonly name: "optionsCount";
            readonly type: "uint32[]";
        }];
        readonly internalType: "struct OrderUsage";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "getOrderSubOrders";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getOrdersCount";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "getStartDate";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "isOrderCompleted";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "isOrderProcessing";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "isOrderStarted";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "isOrderValid";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "auth";
        readonly type: "address";
    }];
    readonly name: "ProviderModified";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "auth";
        readonly type: "address";
    }];
    readonly name: "ProviderRegistered";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "auth";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "ProviderSecurityDepoRefilled";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "auth";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "ProviderSecurityDepoUnlocked";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "auth";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "newViolationRate";
        readonly type: "uint256";
    }];
    readonly name: "ProviderViolationRateIncremented";
    readonly type: "event";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }];
    readonly name: "getProviderActionAccount";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }];
    readonly name: "getProviderInfo";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "tokenReceiver";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "actionAccount";
            readonly type: "address";
        }, {
            readonly internalType: "string";
            readonly name: "name";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "description";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "metadata";
            readonly type: "string";
        }];
        readonly internalType: "struct ProviderInfo";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }];
    readonly name: "getProviderOrigins";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "createdDate";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "createdBy";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "modifiedDate";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "modifiedBy";
            readonly type: "address";
        }];
        readonly internalType: "struct Origins";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }];
    readonly name: "getProviderSecurityDeposit";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }];
    readonly name: "getProviderTokenReceiver";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }];
    readonly name: "getProviderViolationRate";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getProvidersAuths";
    readonly outputs: readonly [{
        readonly internalType: "address[]";
        readonly name: "";
        readonly type: "address[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getProvidersCount";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }];
    readonly name: "incrProviderViolationRate";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }];
    readonly name: "isProviderRegistered";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "tokenReceiver";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "actionAccount";
            readonly type: "address";
        }, {
            readonly internalType: "string";
            readonly name: "name";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "description";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "metadata";
            readonly type: "string";
        }];
        readonly internalType: "struct ProviderInfo";
        readonly name: "info";
        readonly type: "tuple";
    }];
    readonly name: "modifyProvider";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "refillProviderSecurityDepo";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "refillProviderSecurityDepoFor";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "tokenReceiver";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "actionAccount";
            readonly type: "address";
        }, {
            readonly internalType: "string";
            readonly name: "name";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "description";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "metadata";
            readonly type: "string";
        }];
        readonly internalType: "struct ProviderInfo";
        readonly name: "info";
        readonly type: "tuple";
    }];
    readonly name: "registerProvider";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "returnProviderSecurityDepo";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "authority";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "addLockedOrder";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "authority";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "addLockedTcb";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "orderIds";
        readonly type: "uint256[]";
    }];
    readonly name: "getAvaliableOrderRewardsAmount";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "tcbIds";
        readonly type: "uint256[]";
    }];
    readonly name: "getAvaliableTcbRewardsAmount";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "authority";
        readonly type: "address";
    }];
    readonly name: "getOrdersLockedProfitList";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "authority";
        readonly type: "address";
    }];
    readonly name: "getTcbLockedProfitList";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "authority";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "removeLockedOrder";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "authority";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "removeLockedTcb";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly internalType: "enum OfferType";
        readonly name: "offerType";
        readonly type: "uint8";
    }];
    readonly name: "addProviderOffer";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }];
    readonly name: "getProviderOffersDisabledTime";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }];
    readonly name: "getProviderOffersState";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "teeEnabled";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "valueEnabled";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "disabledTime";
            readonly type: "uint256";
        }];
        readonly internalType: "struct ProviderOffersState";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "additional";
        readonly type: "uint256";
    }];
    readonly name: "getProviderRequiredSecDepo";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }];
    readonly name: "getProviderTeeOffers";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }];
    readonly name: "getProviderValueOffers";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }];
    readonly name: "isProviderHasEnabledOffers";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }];
    readonly name: "isProviderHasEnoughSecurityDeposit";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }, {
        readonly internalType: "enum OfferType";
        readonly name: "offerType";
        readonly type: "uint8";
    }, {
        readonly internalType: "bool";
        readonly name: "enabled";
        readonly type: "bool";
    }];
    readonly name: "setProviderOfferState";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "enum ParamName";
        readonly name: "name";
        readonly type: "uint8";
    }];
    readonly name: "getConfigParam";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getProtocolIncomeDistribution";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "recipient";
            readonly type: "address";
        }, {
            readonly internalType: "uint16";
            readonly name: "amount";
            readonly type: "uint16";
        }];
        readonly internalType: "struct ProtocolIncomeRecipient[]";
        readonly name: "";
        readonly type: "tuple[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getProtocolIncomePercent";
    readonly outputs: readonly [{
        readonly internalType: "uint32";
        readonly name: "";
        readonly type: "uint32";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getProtocolTotalIncomeDistributionRatio";
    readonly outputs: readonly [{
        readonly internalType: "uint32";
        readonly name: "";
        readonly type: "uint32";
    }];
    readonly stateMutability: "pure";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getToken";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "enum ParamName";
        readonly name: "name";
        readonly type: "uint8";
    }, {
        readonly internalType: "uint256";
        readonly name: "value";
        readonly type: "uint256";
    }];
    readonly name: "setConfigParam";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "token";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "orderMinimumDeposit";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "profitWithdrawDelaySeconds";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "minSecurityDeposit";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "stopDelaySeconds";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "teeOfferSecurityDeposit";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "offerSecurityDeposit";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "teeRewardPerEpoch";
            readonly type: "uint256";
        }];
        readonly internalType: "struct SuperproParams";
        readonly name: "params";
        readonly type: "tuple";
    }];
    readonly name: "setConfigParams";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bool";
        readonly name: "isLocked";
        readonly type: "bool";
    }];
    readonly name: "setLockData";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "recipient";
            readonly type: "address";
        }, {
            readonly internalType: "uint16";
            readonly name: "amount";
            readonly type: "uint16";
        }];
        readonly internalType: "struct ProtocolIncomeRecipient[]";
        readonly name: "recipients";
        readonly type: "tuple[]";
    }];
    readonly name: "setProtocolIncomeDistribution";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint32";
        readonly name: "percent";
        readonly type: "uint32";
    }];
    readonly name: "setProtocolIncomePercent";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "creator";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "optionId";
        readonly type: "uint256";
    }, {
        readonly indexed: true;
        readonly internalType: "bytes32";
        readonly name: "externalId";
        readonly type: "bytes32";
    }];
    readonly name: "OptionAdded";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "optionId";
        readonly type: "uint256";
    }];
    readonly name: "OptionDeleted";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "optionId";
        readonly type: "uint256";
    }];
    readonly name: "OptionUpdated";
    readonly type: "event";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }, {
        readonly internalType: "bytes32";
        readonly name: "externalId";
        readonly type: "bytes32";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint64";
            readonly name: "bandwidth";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "traffic";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "externalPort";
            readonly type: "uint64";
        }];
        readonly internalType: "struct OptionInfo";
        readonly name: "info";
        readonly type: "tuple";
    }, {
        readonly components: readonly [{
            readonly internalType: "enum PriceType";
            readonly name: "priceType";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint256";
            readonly name: "price";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint64";
            readonly name: "minTimeMinutes";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "maxTimeMinutes";
            readonly type: "uint64";
        }];
        readonly internalType: "struct SlotUsage";
        readonly name: "usage";
        readonly type: "tuple";
    }];
    readonly name: "addOption";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "optionId";
        readonly type: "uint256";
    }];
    readonly name: "deleteOption";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "optionId";
        readonly type: "uint256";
    }];
    readonly name: "getOptionById";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "bandwidth";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "traffic";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "externalPort";
                readonly type: "uint64";
            }];
            readonly internalType: "struct OptionInfo";
            readonly name: "info";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "enum PriceType";
                readonly name: "priceType";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint256";
                readonly name: "price";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint64";
                readonly name: "minTimeMinutes";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "maxTimeMinutes";
                readonly type: "uint64";
            }];
            readonly internalType: "struct SlotUsage";
            readonly name: "usage";
            readonly type: "tuple";
        }];
        readonly internalType: "struct TeeOfferOption";
        readonly name: "result";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getOptionsCount";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "begin";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "end";
        readonly type: "uint256";
    }];
    readonly name: "getTeeOfferOptions";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "bandwidth";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "traffic";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "externalPort";
                readonly type: "uint64";
            }];
            readonly internalType: "struct OptionInfo";
            readonly name: "info";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "enum PriceType";
                readonly name: "priceType";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint256";
                readonly name: "price";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint64";
                readonly name: "minTimeMinutes";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "maxTimeMinutes";
                readonly type: "uint64";
            }];
            readonly internalType: "struct SlotUsage";
            readonly name: "usage";
            readonly type: "tuple";
        }];
        readonly internalType: "struct TeeOfferOption[]";
        readonly name: "";
        readonly type: "tuple[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }];
    readonly name: "getTeeOfferOptionsCount";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "optionId";
        readonly type: "uint256";
    }];
    readonly name: "isOptionExists";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "optionId";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint64";
            readonly name: "bandwidth";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "traffic";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "externalPort";
            readonly type: "uint64";
        }];
        readonly internalType: "struct OptionInfo";
        readonly name: "info";
        readonly type: "tuple";
    }, {
        readonly components: readonly [{
            readonly internalType: "enum PriceType";
            readonly name: "priceType";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint256";
            readonly name: "price";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint64";
            readonly name: "minTimeMinutes";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "maxTimeMinutes";
            readonly type: "uint64";
        }];
        readonly internalType: "struct SlotUsage";
        readonly name: "usage";
        readonly type: "tuple";
    }];
    readonly name: "updateOption";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "creator";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "slotId";
        readonly type: "uint256";
    }, {
        readonly indexed: true;
        readonly internalType: "bytes32";
        readonly name: "externalId";
        readonly type: "bytes32";
    }];
    readonly name: "TeeSlotAdded";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "slotId";
        readonly type: "uint256";
    }];
    readonly name: "TeeSlotDeleted";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "slotId";
        readonly type: "uint256";
    }];
    readonly name: "TeeSlotUpdated";
    readonly type: "event";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }, {
        readonly internalType: "bytes32";
        readonly name: "externalId";
        readonly type: "bytes32";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint64";
            readonly name: "cpuCores";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "ram";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "diskUsage";
            readonly type: "uint64";
        }];
        readonly internalType: "struct SlotInfo";
        readonly name: "info";
        readonly type: "tuple";
    }, {
        readonly components: readonly [{
            readonly internalType: "enum PriceType";
            readonly name: "priceType";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint256";
            readonly name: "price";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint64";
            readonly name: "minTimeMinutes";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "maxTimeMinutes";
            readonly type: "uint64";
        }];
        readonly internalType: "struct SlotUsage";
        readonly name: "usage";
        readonly type: "tuple";
    }];
    readonly name: "addTeeOfferSlot";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "slotId";
        readonly type: "uint256";
    }];
    readonly name: "deleteTeeOfferSlot";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getCpuDenominator";
    readonly outputs: readonly [{
        readonly internalType: "uint16";
        readonly name: "";
        readonly type: "uint16";
    }];
    readonly stateMutability: "pure";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "slotId";
        readonly type: "uint256";
    }];
    readonly name: "getTeeOfferSlotById";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "cpuCores";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "ram";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "diskUsage";
                readonly type: "uint64";
            }];
            readonly internalType: "struct SlotInfo";
            readonly name: "info";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "enum PriceType";
                readonly name: "priceType";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint256";
                readonly name: "price";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint64";
                readonly name: "minTimeMinutes";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "maxTimeMinutes";
                readonly type: "uint64";
            }];
            readonly internalType: "struct SlotUsage";
            readonly name: "usage";
            readonly type: "tuple";
        }];
        readonly internalType: "struct TeeOfferSlot";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "begin";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "end";
        readonly type: "uint256";
    }];
    readonly name: "getTeeOfferSlots";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "cpuCores";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "ram";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "diskUsage";
                readonly type: "uint64";
            }];
            readonly internalType: "struct SlotInfo";
            readonly name: "info";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "enum PriceType";
                readonly name: "priceType";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint256";
                readonly name: "price";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint64";
                readonly name: "minTimeMinutes";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "maxTimeMinutes";
                readonly type: "uint64";
            }];
            readonly internalType: "struct SlotUsage";
            readonly name: "usage";
            readonly type: "tuple";
        }];
        readonly internalType: "struct TeeOfferSlot[]";
        readonly name: "";
        readonly type: "tuple[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }];
    readonly name: "getTeeOfferSlotsCount";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getTeeOffersSlotsCountTotal";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "slotId";
        readonly type: "uint256";
    }];
    readonly name: "isTeeOfferSlotExists";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "slotId";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint64";
            readonly name: "cpuCores";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "ram";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "diskUsage";
            readonly type: "uint64";
        }];
        readonly internalType: "struct SlotInfo";
        readonly name: "info";
        readonly type: "tuple";
    }, {
        readonly components: readonly [{
            readonly internalType: "enum PriceType";
            readonly name: "priceType";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint256";
            readonly name: "price";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint64";
            readonly name: "minTimeMinutes";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "maxTimeMinutes";
            readonly type: "uint64";
        }];
        readonly internalType: "struct SlotUsage";
        readonly name: "usage";
        readonly type: "tuple";
    }];
    readonly name: "updateTeeOfferSlot";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "rewards";
        readonly type: "uint256";
    }];
    readonly name: "TcbRewardUnlocked";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "violationRate";
        readonly type: "uint256";
    }];
    readonly name: "TeeOfferViolationRateChanged";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "string";
        readonly name: "message";
        readonly type: "string";
    }];
    readonly name: "WarningMessage";
    readonly type: "event";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "_unlockTcbReward";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }, {
        readonly internalType: "bytes32";
        readonly name: "deviceID";
        readonly type: "bytes32";
    }];
    readonly name: "banTeeOffer";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }, {
        readonly internalType: "bytes32";
        readonly name: "deviceID";
        readonly type: "bytes32";
    }];
    readonly name: "blockTeeOffer";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }];
    readonly name: "confisacateAllRewards";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }];
    readonly name: "getLastTeeBenchmark";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "deviceID";
        readonly type: "bytes32";
    }];
    readonly name: "getTeeOfferByDeviceId";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }];
    readonly name: "getTeeOfferViolationRate";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }];
    readonly name: "getTeeVerifiedBenchmark";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }];
    readonly name: "incrTeeOfferViolationRate";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "isTcbProfitAvailable";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "available";
        readonly type: "bool";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "reward";
        readonly type: "uint256";
    }];
    readonly name: "lockTcbReward";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }, {
        readonly internalType: "bytes32";
        readonly name: "deviceID";
        readonly type: "bytes32";
    }];
    readonly name: "setTeeDeviceId";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "unlockTcbReward";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "tcbIds";
        readonly type: "uint256[]";
    }];
    readonly name: "unlockTcbRewardByList";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "ulockedIndex";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "benchmark";
        readonly type: "uint256";
    }];
    readonly name: "updateVerifiedTeeBenchmark";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "creator";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "slotId";
        readonly type: "uint256";
    }, {
        readonly indexed: true;
        readonly internalType: "bytes32";
        readonly name: "externalId";
        readonly type: "bytes32";
    }];
    readonly name: "ValueSlotAdded";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "slotId";
        readonly type: "uint256";
    }];
    readonly name: "ValueSlotDeleted";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "slotId";
        readonly type: "uint256";
    }];
    readonly name: "ValueSlotUpdated";
    readonly type: "event";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly internalType: "bytes32";
        readonly name: "externalId";
        readonly type: "bytes32";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint64";
            readonly name: "cpuCores";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "ram";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "diskUsage";
            readonly type: "uint64";
        }];
        readonly internalType: "struct SlotInfo";
        readonly name: "info";
        readonly type: "tuple";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint64";
            readonly name: "bandwidth";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "traffic";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "externalPort";
            readonly type: "uint64";
        }];
        readonly internalType: "struct OptionInfo";
        readonly name: "option";
        readonly type: "tuple";
    }, {
        readonly components: readonly [{
            readonly internalType: "enum PriceType";
            readonly name: "priceType";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint256";
            readonly name: "price";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint64";
            readonly name: "minTimeMinutes";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "maxTimeMinutes";
            readonly type: "uint64";
        }];
        readonly internalType: "struct SlotUsage";
        readonly name: "usage";
        readonly type: "tuple";
    }];
    readonly name: "addValueOfferSlot";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "slotId";
        readonly type: "uint256";
    }];
    readonly name: "deleteValueOfferSlot";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "getCheapestValueOffersPrice";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "price";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "slotId";
        readonly type: "uint256";
    }];
    readonly name: "getValueOfferSlotById";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "cpuCores";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "ram";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "diskUsage";
                readonly type: "uint64";
            }];
            readonly internalType: "struct SlotInfo";
            readonly name: "info";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "bandwidth";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "traffic";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "externalPort";
                readonly type: "uint64";
            }];
            readonly internalType: "struct OptionInfo";
            readonly name: "option";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "enum PriceType";
                readonly name: "priceType";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint256";
                readonly name: "price";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint64";
                readonly name: "minTimeMinutes";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "maxTimeMinutes";
                readonly type: "uint64";
            }];
            readonly internalType: "struct SlotUsage";
            readonly name: "usage";
            readonly type: "tuple";
        }];
        readonly internalType: "struct ValueOfferSlot";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "begin";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "end";
        readonly type: "uint256";
    }];
    readonly name: "getValueOfferSlots";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "cpuCores";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "ram";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "diskUsage";
                readonly type: "uint64";
            }];
            readonly internalType: "struct SlotInfo";
            readonly name: "info";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "bandwidth";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "traffic";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "externalPort";
                readonly type: "uint64";
            }];
            readonly internalType: "struct OptionInfo";
            readonly name: "option";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "enum PriceType";
                readonly name: "priceType";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint256";
                readonly name: "price";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint64";
                readonly name: "minTimeMinutes";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "maxTimeMinutes";
                readonly type: "uint64";
            }];
            readonly internalType: "struct SlotUsage";
            readonly name: "usage";
            readonly type: "tuple";
        }];
        readonly internalType: "struct ValueOfferSlot[]";
        readonly name: "";
        readonly type: "tuple[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "getValueOfferSlotsCount";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getValueOffersSlotsCountTotal";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "slotId";
        readonly type: "uint256";
    }];
    readonly name: "isValueOfferSlotExists";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "slotId";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint64";
            readonly name: "cpuCores";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "ram";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "diskUsage";
            readonly type: "uint64";
        }];
        readonly internalType: "struct SlotInfo";
        readonly name: "info";
        readonly type: "tuple";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint64";
            readonly name: "bandwidth";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "traffic";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "externalPort";
            readonly type: "uint64";
        }];
        readonly internalType: "struct OptionInfo";
        readonly name: "option";
        readonly type: "tuple";
    }, {
        readonly components: readonly [{
            readonly internalType: "enum PriceType";
            readonly name: "priceType";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint256";
            readonly name: "price";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint64";
            readonly name: "minTimeMinutes";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "maxTimeMinutes";
            readonly type: "uint64";
        }];
        readonly internalType: "struct SlotUsage";
        readonly name: "usage";
        readonly type: "tuple";
    }];
    readonly name: "updateValueOfferSlot";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "consumer";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "bytes32";
        readonly name: "externalId";
        readonly type: "bytes32";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "parentOrderId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "OrderCreated";
    readonly type: "event";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "parentOrderId";
        readonly type: "uint256";
    }];
    readonly name: "cancelWorkflow";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "offerId";
            readonly type: "uint256";
        }, {
            readonly internalType: "string";
            readonly name: "resultPublicKey";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "encryptedRequirements";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "encryptedArgs";
            readonly type: "string";
        }, {
            readonly internalType: "enum OrderStatus";
            readonly name: "status";
            readonly type: "uint8";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256[]";
                readonly name: "inputOffers";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "outputOffer";
                readonly type: "uint256";
            }];
            readonly internalType: "struct OrderArgs";
            readonly name: "args";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "slotId";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "slotCount";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "optionsIds";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint32[]";
                readonly name: "optionsCount";
                readonly type: "uint32[]";
            }];
            readonly internalType: "struct OrderSlots";
            readonly name: "slots";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "externalId";
            readonly type: "bytes32";
        }];
        readonly internalType: "struct OrderInfo";
        readonly name: "parentOrderInfo";
        readonly type: "tuple";
    }, {
        readonly internalType: "uint256";
        readonly name: "wokflowDeposit";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "offerId";
            readonly type: "uint256";
        }, {
            readonly internalType: "string";
            readonly name: "resultPublicKey";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "encryptedRequirements";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "encryptedArgs";
            readonly type: "string";
        }, {
            readonly internalType: "enum OrderStatus";
            readonly name: "status";
            readonly type: "uint8";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256[]";
                readonly name: "inputOffers";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "outputOffer";
                readonly type: "uint256";
            }];
            readonly internalType: "struct OrderArgs";
            readonly name: "args";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "slotId";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "slotCount";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "optionsIds";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint32[]";
                readonly name: "optionsCount";
                readonly type: "uint32[]";
            }];
            readonly internalType: "struct OrderSlots";
            readonly name: "slots";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "externalId";
            readonly type: "bytes32";
        }];
        readonly internalType: "struct OrderInfo[]";
        readonly name: "subOrdersInfos";
        readonly type: "tuple[]";
    }];
    readonly name: "createWorkflow";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "facetAddress";
            readonly type: "address";
        }, {
            readonly internalType: "enum IDiamondCut.FacetCutAction";
            readonly name: "action";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes4[]";
            readonly name: "functionSelectors";
            readonly type: "bytes4[]";
        }];
        readonly indexed: false;
        readonly internalType: "struct IDiamondCut.FacetCut[]";
        readonly name: "_diamondCut";
        readonly type: "tuple[]";
    }, {
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "_init";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "bytes";
        readonly name: "_calldata";
        readonly type: "bytes";
    }];
    readonly name: "DiamondCut";
    readonly type: "event";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "facetAddress";
            readonly type: "address";
        }, {
            readonly internalType: "enum IDiamondCut.FacetCutAction";
            readonly name: "action";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes4[]";
            readonly name: "functionSelectors";
            readonly type: "bytes4[]";
        }];
        readonly internalType: "struct IDiamondCut.FacetCut[]";
        readonly name: "_diamondCut";
        readonly type: "tuple[]";
    }, {
        readonly internalType: "bytes32";
        readonly name: "version";
        readonly type: "bytes32";
    }, {
        readonly internalType: "address";
        readonly name: "_init";
        readonly type: "address";
    }, {
        readonly internalType: "bytes";
        readonly name: "_calldata";
        readonly type: "bytes";
    }];
    readonly name: "diamondCut";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bytes4";
        readonly name: "_functionSelector";
        readonly type: "bytes4";
    }];
    readonly name: "facetAddress";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "facetAddress_";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "facetAddresses";
    readonly outputs: readonly [{
        readonly internalType: "address[]";
        readonly name: "";
        readonly type: "address[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_facet";
        readonly type: "address";
    }];
    readonly name: "facetFunctionSelectors";
    readonly outputs: readonly [{
        readonly internalType: "bytes4[]";
        readonly name: "";
        readonly type: "bytes4[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "facets";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "facetAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bytes4[]";
            readonly name: "functionSelectors";
            readonly type: "bytes4[]";
        }];
        readonly internalType: "struct IDiamondLoupe.Facet[]";
        readonly name: "facets_";
        readonly type: "tuple[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getVersion";
    readonly outputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getVersionHistory";
    readonly outputs: readonly [{
        readonly internalType: "bytes32[]";
        readonly name: "";
        readonly type: "bytes32[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bytes4";
        readonly name: "_interfaceId";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "previousOwner";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "newOwner";
        readonly type: "address";
    }];
    readonly name: "OwnershipTransferred";
    readonly type: "event";
}, {
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "owner_";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_newOwner";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "facetAddress";
            readonly type: "address";
        }, {
            readonly internalType: "enum IDiamondCut.FacetCutAction";
            readonly name: "action";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes4[]";
            readonly name: "functionSelectors";
            readonly type: "bytes4[]";
        }];
        readonly indexed: false;
        readonly internalType: "struct IDiamondCut.FacetCut[]";
        readonly name: "_diamondCut";
        readonly type: "tuple[]";
    }, {
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "_init";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "bytes";
        readonly name: "_calldata";
        readonly type: "bytes";
    }];
    readonly name: "DiamondCut";
    readonly type: "event";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "facetAddress";
            readonly type: "address";
        }, {
            readonly internalType: "enum IDiamondCut.FacetCutAction";
            readonly name: "action";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes4[]";
            readonly name: "functionSelectors";
            readonly type: "bytes4[]";
        }];
        readonly internalType: "struct IDiamondCut.FacetCut[]";
        readonly name: "_diamondCut";
        readonly type: "tuple[]";
    }, {
        readonly internalType: "bytes32";
        readonly name: "version";
        readonly type: "bytes32";
    }, {
        readonly internalType: "address";
        readonly name: "_init";
        readonly type: "address";
    }, {
        readonly internalType: "bytes";
        readonly name: "_calldata";
        readonly type: "bytes";
    }];
    readonly name: "diamondCut";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bytes4";
        readonly name: "_functionSelector";
        readonly type: "bytes4";
    }];
    readonly name: "facetAddress";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "facetAddresses";
    readonly outputs: readonly [{
        readonly internalType: "address[]";
        readonly name: "";
        readonly type: "address[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_facet";
        readonly type: "address";
    }];
    readonly name: "facetFunctionSelectors";
    readonly outputs: readonly [{
        readonly internalType: "bytes4[]";
        readonly name: "";
        readonly type: "bytes4[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "facets";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "facetAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bytes4[]";
            readonly name: "functionSelectors";
            readonly type: "bytes4[]";
        }];
        readonly internalType: "struct IDiamondLoupe.Facet[]";
        readonly name: "facets_";
        readonly type: "tuple[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getVersion";
    readonly outputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getVersionHistory";
    readonly outputs: readonly [{
        readonly internalType: "bytes32[]";
        readonly name: "";
        readonly type: "bytes32[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bytes4";
        readonly name: "interfaceId";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "previousOwner";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "newOwner";
        readonly type: "address";
    }];
    readonly name: "OwnershipTransferred";
    readonly type: "event";
}, {
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "owner_";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_newOwner";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "facetAddress";
            readonly type: "address";
        }, {
            readonly internalType: "enum IDiamondCut.FacetCutAction";
            readonly name: "action";
            readonly type: "uint8";
        }, {
            readonly internalType: "bytes4[]";
            readonly name: "functionSelectors";
            readonly type: "bytes4[]";
        }];
        readonly indexed: false;
        readonly internalType: "struct IDiamondCut.FacetCut[]";
        readonly name: "_diamondCut";
        readonly type: "tuple[]";
    }, {
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "_init";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "bytes";
        readonly name: "_calldata";
        readonly type: "bytes";
    }];
    readonly name: "DiamondCut";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "previousOwner";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "newOwner";
        readonly type: "address";
    }];
    readonly name: "OwnershipTransferred";
    readonly type: "event";
}, {
    readonly inputs: readonly [];
    readonly name: "init";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "onOfferDisabled";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "onOfferEnabled";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "onOrderActivated";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "onOrderDeactivated";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }];
    readonly name: "getActualTcbId";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbInitiedTime";
        readonly type: "uint256";
    }];
    readonly name: "getEpochTime";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "getTcbById";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "string";
            readonly name: "quote";
            readonly type: "string";
        }, {
            readonly internalType: "uint256";
            readonly name: "timeInitialized";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "timeAdded";
            readonly type: "uint256";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "teeOfferId";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "deviceID";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "benchmark";
                readonly type: "uint256";
            }, {
                readonly internalType: "string";
                readonly name: "properties";
                readonly type: "string";
            }];
            readonly internalType: "struct TcbPublicData";
            readonly name: "publicData";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256[]";
                readonly name: "checkingBlocks";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "enum TcbVerifiedStatus[]";
                readonly name: "checkingBlockMarks";
                readonly type: "uint8[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "lastBlocksTakenAmount";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "suspiciousBlocksTakenAmount";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint16";
                readonly name: "negative";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint16";
                readonly name: "positive";
                readonly type: "uint16";
            }, {
                readonly internalType: "uint256";
                readonly name: "previousTcb";
                readonly type: "uint256";
            }, {
                readonly internalType: "bool";
                readonly name: "lastBlocksTaken";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "suspiciousBlocksTaken";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "assignedToEpoch_DEPRECATED";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "checked";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "rewardClaimed";
                readonly type: "bool";
            }];
            readonly internalType: "struct TcbUtilityData";
            readonly name: "utilData";
            readonly type: "tuple";
        }, {
            readonly internalType: "enum TcbStatus";
            readonly name: "status";
            readonly type: "uint8";
        }];
        readonly internalType: "struct Tcb";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "getTcbReward";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "isBenchmarkChangedByLastbBlock";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "isTcbProfitAvailable";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }, {
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "isTeeOfferVerifying";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "addLastBlock";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "addSuspiciousBlock";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "addTcbToEpoch";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "compenstaion";
        readonly type: "uint256";
    }];
    readonly name: "increaseNextEpochCompensation";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "updateConsensusTables";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "updateLastBlocks";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "updateSuspicious";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "depositOwner";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "addProfit";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "depositOwner";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "confiscateTokensFrom";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "depositOwner";
        readonly type: "address";
    }];
    readonly name: "getDepositInfo";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "totalLocked";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "profit";
            readonly type: "uint256";
        }];
        readonly internalType: "struct DepositInfo";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "depositOwner";
        readonly type: "address";
    }];
    readonly name: "getLockedTokensAmount";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "depositOwner";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "lockDeposit";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "replenish";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "depositOwner";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "replenishFor";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "funder";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "depositOwner";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "replenishForByApp";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "depositOwner";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "unlockDeposit";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "withdraw";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "getOfferGroup";
    readonly outputs: readonly [{
        readonly internalType: "enum OfferGroup";
        readonly name: "";
        readonly type: "uint8";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "slotId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint32";
        readonly name: "slotCount";
        readonly type: "uint32";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "optionsIds";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "uint32[]";
        readonly name: "optionsCount";
        readonly type: "uint32[]";
    }];
    readonly name: "getOfferMinDeposit";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "getOfferProviderActionAccount";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "getOfferProviderAuthority";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "getOfferType";
    readonly outputs: readonly [{
        readonly internalType: "enum OfferType";
        readonly name: "";
        readonly type: "uint8";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getOffersTotalCount";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "additional";
        readonly type: "uint256";
    }];
    readonly name: "getProviderRequiredSecDepo";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "getTeeOffer";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "providerAuth";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "description";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "teeType";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "properties";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "tlb";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "argsPublicKey";
                readonly type: "string";
            }, {
                readonly components: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "uint64";
                        readonly name: "cpuCores";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "ram";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "diskUsage";
                        readonly type: "uint64";
                    }];
                    readonly internalType: "struct SlotInfo";
                    readonly name: "slotInfo";
                    readonly type: "tuple";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "uint64";
                        readonly name: "bandwidth";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "traffic";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "externalPort";
                        readonly type: "uint64";
                    }];
                    readonly internalType: "struct OptionInfo";
                    readonly name: "optionInfo";
                    readonly type: "tuple";
                }];
                readonly internalType: "struct HardwareInfo";
                readonly name: "hardwareInfo";
                readonly type: "tuple";
            }];
            readonly internalType: "struct TeeOfferInfo";
            readonly name: "info";
            readonly type: "tuple";
        }, {
            readonly internalType: "bool";
            readonly name: "enabled";
            readonly type: "bool";
        }];
        readonly internalType: "struct TeeOfferData";
        readonly name: "ret";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }];
    readonly name: "getTeeOfferHardwareInfo";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "cpuCores";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "ram";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "diskUsage";
                readonly type: "uint64";
            }];
            readonly internalType: "struct SlotInfo";
            readonly name: "slotInfo";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "bandwidth";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "traffic";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "externalPort";
                readonly type: "uint64";
            }];
            readonly internalType: "struct OptionInfo";
            readonly name: "optionInfo";
            readonly type: "tuple";
        }];
        readonly internalType: "struct HardwareInfo";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "getValueOffer";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "providerAuth";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "enum OfferGroup";
                readonly name: "group";
                readonly type: "uint8";
            }, {
                readonly internalType: "enum OfferType";
                readonly name: "offerType";
                readonly type: "uint8";
            }, {
                readonly internalType: "bool";
                readonly name: "cancelable";
                readonly type: "bool";
            }, {
                readonly internalType: "string";
                readonly name: "description";
                readonly type: "string";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint256[]";
                    readonly name: "offers";
                    readonly type: "uint256[]";
                }, {
                    readonly internalType: "enum OfferType[]";
                    readonly name: "types";
                    readonly type: "uint8[]";
                }];
                readonly internalType: "struct OfferRestrictions";
                readonly name: "restrictions";
                readonly type: "tuple";
            }, {
                readonly internalType: "string";
                readonly name: "input";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "output";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "allowedArgs";
                readonly type: "string";
            }, {
                readonly internalType: "address[]";
                readonly name: "allowedAccounts";
                readonly type: "address[]";
            }, {
                readonly internalType: "string";
                readonly name: "argsPublicKey";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "resultResource";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "linkage";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "hash";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "metadata";
                readonly type: "string";
            }];
            readonly internalType: "struct ValueOfferInfo";
            readonly name: "info";
            readonly type: "tuple";
        }, {
            readonly internalType: "bool";
            readonly name: "enabled";
            readonly type: "bool";
        }];
        readonly internalType: "struct ValueOfferData";
        readonly name: "ret";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "isAutoCompleteOffer";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly internalType: "address";
        readonly name: "consumer";
        readonly type: "address";
    }];
    readonly name: "isOfferAllowedForConsumer";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "isOfferCancelable";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "isOfferEnabled";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "isOfferExists";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly internalType: "enum OfferType";
        readonly name: "offerType";
        readonly type: "uint8";
    }];
    readonly name: "isOfferRestrictedByOfferType";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "otherOfferId";
        readonly type: "uint256";
    }];
    readonly name: "isOfferRestrictionsPermitOtherOffer";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "isTeeOfferBanned";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "calculateOrderCurrentPrice";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "consumer";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "cancelOrderByApp";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "consumer";
        readonly type: "address";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "offerId";
            readonly type: "uint256";
        }, {
            readonly internalType: "string";
            readonly name: "resultPublicKey";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "encryptedRequirements";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "encryptedArgs";
            readonly type: "string";
        }, {
            readonly internalType: "enum OrderStatus";
            readonly name: "status";
            readonly type: "uint8";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256[]";
                readonly name: "inputOffers";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "outputOffer";
                readonly type: "uint256";
            }];
            readonly internalType: "struct OrderArgs";
            readonly name: "args";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "slotId";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "slotCount";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "optionsIds";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint32[]";
                readonly name: "optionsCount";
                readonly type: "uint32[]";
            }];
            readonly internalType: "struct OrderSlots";
            readonly name: "slots";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "externalId";
            readonly type: "bytes32";
        }];
        readonly internalType: "struct OrderInfo";
        readonly name: "info";
        readonly type: "tuple";
    }, {
        readonly internalType: "uint256";
        readonly name: "deposit";
        readonly type: "uint256";
    }, {
        readonly internalType: "bool";
        readonly name: "suspended";
        readonly type: "bool";
    }];
    readonly name: "createOrderByApp";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "consumer";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "parentOrderId";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "offerId";
            readonly type: "uint256";
        }, {
            readonly internalType: "string";
            readonly name: "resultPublicKey";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "encryptedRequirements";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "encryptedArgs";
            readonly type: "string";
        }, {
            readonly internalType: "enum OrderStatus";
            readonly name: "status";
            readonly type: "uint8";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256[]";
                readonly name: "inputOffers";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "outputOffer";
                readonly type: "uint256";
            }];
            readonly internalType: "struct OrderArgs";
            readonly name: "args";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "slotId";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "slotCount";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "optionsIds";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint32[]";
                readonly name: "optionsCount";
                readonly type: "uint32[]";
            }];
            readonly internalType: "struct OrderSlots";
            readonly name: "slots";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "externalId";
            readonly type: "bytes32";
        }];
        readonly internalType: "struct OrderInfo";
        readonly name: "suborderInfo";
        readonly type: "tuple";
    }, {
        readonly components: readonly [{
            readonly internalType: "bool";
            readonly name: "blockParentOrder";
            readonly type: "bool";
        }, {
            readonly internalType: "uint256";
            readonly name: "deposit";
            readonly type: "uint256";
        }];
        readonly internalType: "struct SubOrderParams";
        readonly name: "params";
        readonly type: "tuple";
    }];
    readonly name: "createSubOrderByApp";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "getOrder";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "offerId";
            readonly type: "uint256";
        }, {
            readonly internalType: "string";
            readonly name: "resultPublicKey";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "encryptedRequirements";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "encryptedArgs";
            readonly type: "string";
        }, {
            readonly internalType: "enum OrderStatus";
            readonly name: "status";
            readonly type: "uint8";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256[]";
                readonly name: "inputOffers";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "outputOffer";
                readonly type: "uint256";
            }];
            readonly internalType: "struct OrderArgs";
            readonly name: "args";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "slotId";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "slotCount";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "optionsIds";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint32[]";
                readonly name: "optionsCount";
                readonly type: "uint32[]";
            }];
            readonly internalType: "struct OrderSlots";
            readonly name: "slots";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "externalId";
            readonly type: "bytes32";
        }];
        readonly internalType: "struct OrderInfo";
        readonly name: "";
        readonly type: "tuple";
    }, {
        readonly components: readonly [{
            readonly internalType: "string";
            readonly name: "encryptedResult";
            readonly type: "string";
        }, {
            readonly internalType: "uint256";
            readonly name: "orderPrice";
            readonly type: "uint256";
        }];
        readonly internalType: "struct OrderResult";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "consumer";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "startOrderByApp";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "sender";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "withdrawChangeByApp";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "calculateOrderOutputReserve";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "enum OfferGroup";
        readonly name: "parentOfferGroup";
        readonly type: "uint8";
    }, {
        readonly internalType: "enum OfferGroup";
        readonly name: "subOfferGroup";
        readonly type: "uint8";
    }];
    readonly name: "checkOrderAllowedGroup";
    readonly outputs: readonly [];
    readonly stateMutability: "pure";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "enum OrderStatus";
        readonly name: "prev";
        readonly type: "uint8";
    }, {
        readonly internalType: "enum OrderStatus";
        readonly name: "next";
        readonly type: "uint8";
    }];
    readonly name: "checkOrderAllowedStatus";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "pure";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "parentOrderId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "subOfferId";
        readonly type: "uint256";
    }, {
        readonly internalType: "enum OfferGroup";
        readonly name: "subOfferGroup";
        readonly type: "uint8";
    }];
    readonly name: "checkOrderRestrictions";
    readonly outputs: readonly [];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "getAwaitingPayment";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "getOrder";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "offerId";
            readonly type: "uint256";
        }, {
            readonly internalType: "string";
            readonly name: "resultPublicKey";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "encryptedRequirements";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "encryptedArgs";
            readonly type: "string";
        }, {
            readonly internalType: "enum OrderStatus";
            readonly name: "status";
            readonly type: "uint8";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256[]";
                readonly name: "inputOffers";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint256";
                readonly name: "outputOffer";
                readonly type: "uint256";
            }];
            readonly internalType: "struct OrderArgs";
            readonly name: "args";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "slotId";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "slotCount";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint256[]";
                readonly name: "optionsIds";
                readonly type: "uint256[]";
            }, {
                readonly internalType: "uint32[]";
                readonly name: "optionsCount";
                readonly type: "uint32[]";
            }];
            readonly internalType: "struct OrderSlots";
            readonly name: "slots";
            readonly type: "tuple";
        }, {
            readonly internalType: "bytes32";
            readonly name: "externalId";
            readonly type: "bytes32";
        }];
        readonly internalType: "struct OrderInfo";
        readonly name: "";
        readonly type: "tuple";
    }, {
        readonly components: readonly [{
            readonly internalType: "string";
            readonly name: "encryptedResult";
            readonly type: "string";
        }, {
            readonly internalType: "uint256";
            readonly name: "orderPrice";
            readonly type: "uint256";
        }];
        readonly internalType: "struct OrderResult";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "getOrderDeposit";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "getOrderOrigins";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "createdDate";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "createdBy";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "modifiedDate";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "modifiedBy";
            readonly type: "address";
        }];
        readonly internalType: "struct Origins";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "getOrderParentOrder";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "getOrderPrice";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "getOrderSubOrders";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getOrdersCount";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "getStartDate";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "isOrderCompleted";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "isOrderProcessing";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly name: "isOrderProfitAvailable";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }, {
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "isOrderStarted";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "isOrderValid";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }];
    readonly name: "confiscateSecurityDeposit";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }];
    readonly name: "getProviderActionAccount";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "additional";
        readonly type: "uint256";
    }];
    readonly name: "getProviderRequiredSecDepo";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }];
    readonly name: "getProviderSecurityDeposit";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }];
    readonly name: "getProviderTokenReceiver";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }];
    readonly name: "incrProviderViolationRate";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }];
    readonly name: "isProviderRegistered";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "authority";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "addLockedOrder";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "authority";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "addLockedTcb";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "authority";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "orderId";
        readonly type: "uint256";
    }];
    readonly name: "removeLockedOrder";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "authority";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }];
    readonly name: "removeLockedTcb";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly internalType: "enum OfferType";
        readonly name: "offerType";
        readonly type: "uint8";
    }];
    readonly name: "addProviderOffer";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }];
    readonly name: "getProviderOffersDisabledTime";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }];
    readonly name: "isProviderHasEnabledOffers";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }];
    readonly name: "isProviderHasEnoughSecurityDeposit";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "providerAuth";
        readonly type: "address";
    }, {
        readonly internalType: "enum OfferType";
        readonly name: "offerType";
        readonly type: "uint8";
    }, {
        readonly internalType: "bool";
        readonly name: "enabled";
        readonly type: "bool";
    }];
    readonly name: "setProviderOfferState";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "getCheapestValueOffersPrice";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "price";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "optionId";
        readonly type: "uint256";
    }];
    readonly name: "getOptionById";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "bandwidth";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "traffic";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "externalPort";
                readonly type: "uint64";
            }];
            readonly internalType: "struct OptionInfo";
            readonly name: "info";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "enum PriceType";
                readonly name: "priceType";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint256";
                readonly name: "price";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint64";
                readonly name: "minTimeMinutes";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "maxTimeMinutes";
                readonly type: "uint64";
            }];
            readonly internalType: "struct SlotUsage";
            readonly name: "usage";
            readonly type: "tuple";
        }];
        readonly internalType: "struct TeeOfferOption";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "slotId";
        readonly type: "uint256";
    }];
    readonly name: "getTeeOfferSlotById";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "cpuCores";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "ram";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "diskUsage";
                readonly type: "uint64";
            }];
            readonly internalType: "struct SlotInfo";
            readonly name: "info";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "enum PriceType";
                readonly name: "priceType";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint256";
                readonly name: "price";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint64";
                readonly name: "minTimeMinutes";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "maxTimeMinutes";
                readonly type: "uint64";
            }];
            readonly internalType: "struct SlotUsage";
            readonly name: "usage";
            readonly type: "tuple";
        }];
        readonly internalType: "struct TeeOfferSlot";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "slotId";
        readonly type: "uint256";
    }];
    readonly name: "getValueOfferSlotById";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "id";
            readonly type: "uint256";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "cpuCores";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "ram";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "diskUsage";
                readonly type: "uint64";
            }];
            readonly internalType: "struct SlotInfo";
            readonly name: "info";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "bandwidth";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "traffic";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "externalPort";
                readonly type: "uint64";
            }];
            readonly internalType: "struct OptionInfo";
            readonly name: "option";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "enum PriceType";
                readonly name: "priceType";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint256";
                readonly name: "price";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint64";
                readonly name: "minTimeMinutes";
                readonly type: "uint64";
            }, {
                readonly internalType: "uint64";
                readonly name: "maxTimeMinutes";
                readonly type: "uint64";
            }];
            readonly internalType: "struct SlotUsage";
            readonly name: "usage";
            readonly type: "tuple";
        }];
        readonly internalType: "struct ValueOfferSlot";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "teeOfferId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "slotId";
        readonly type: "uint256";
    }];
    readonly name: "isTeeOfferSlotExists";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "slotId";
        readonly type: "uint256";
    }];
    readonly name: "isValueOfferSlotExists";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "enum ParamName";
        readonly name: "name";
        readonly type: "uint8";
    }];
    readonly name: "getConfigParam";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getProtocolIncomeDistribution";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "recipient";
            readonly type: "address";
        }, {
            readonly internalType: "uint16";
            readonly name: "amount";
            readonly type: "uint16";
        }];
        readonly internalType: "struct ProtocolIncomeRecipient[]";
        readonly name: "";
        readonly type: "tuple[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getProtocolIncomePercent";
    readonly outputs: readonly [{
        readonly internalType: "uint32";
        readonly name: "";
        readonly type: "uint32";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getToken";
    readonly outputs: readonly [{
        readonly internalType: "contract ISuperproToken";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "owner";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "spender";
        readonly type: "address";
    }];
    readonly name: "allowance";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "spender";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "approve";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "account";
        readonly type: "address";
    }];
    readonly name: "balanceOf";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "account";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "burnFrom";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "transfer";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "from";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "transferFrom";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly internalType: "bytes32";
        readonly name: "deviceID";
        readonly type: "bytes32";
    }];
    readonly name: "banTeeOffer";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly internalType: "bytes32";
        readonly name: "deviceID";
        readonly type: "bytes32";
    }];
    readonly name: "blockTeeOffer";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "confisacateAllRewards";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "getTeeOfferViolationRate";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "getTeeVerifiedBenchmark";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }];
    readonly name: "incrTeeOfferViolationRate";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "tcbId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "reward";
        readonly type: "uint256";
    }];
    readonly name: "lockTcbReward";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly internalType: "bytes32";
        readonly name: "deviceID";
        readonly type: "bytes32";
    }];
    readonly name: "setTeeDeviceId";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offerId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "benchmark";
        readonly type: "uint256";
    }];
    readonly name: "updateVerifiedTeeBenchmark";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "owner";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "spender";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "value";
        readonly type: "uint256";
    }];
    readonly name: "Approval";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "from";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "value";
        readonly type: "uint256";
    }];
    readonly name: "Transfer";
    readonly type: "event";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "owner";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "spender";
        readonly type: "address";
    }];
    readonly name: "allowance";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "spender";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "approve";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "account";
        readonly type: "address";
    }];
    readonly name: "balanceOf";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "burn";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "account";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "burnFrom";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "decimals";
    readonly outputs: readonly [{
        readonly internalType: "uint8";
        readonly name: "";
        readonly type: "uint8";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "spender";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "subtractedValue";
        readonly type: "uint256";
    }];
    readonly name: "decreaseAllowance";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "spender";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "addedValue";
        readonly type: "uint256";
    }];
    readonly name: "increaseAllowance";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly internalType: "string";
        readonly name: "";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "symbol";
    readonly outputs: readonly [{
        readonly internalType: "string";
        readonly name: "";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "totalSupply";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "transfer";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "from";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "transferFrom";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}];
export default abi;
