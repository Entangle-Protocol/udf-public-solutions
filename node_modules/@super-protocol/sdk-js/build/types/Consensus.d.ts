import { BlockchainId, TokenAmount } from './Web3';
export declare enum TcbVerifiedStatus {
    Valid = 0,
    InvalidQuote = 1,
    InvalidMrEnclave = 2,
    InvalidBcbHash = 3
}
export type TcbPublicData = {
    teeOffer?: BlockchainId;
    deviceID: string;
    benchmark: number;
    properties: string;
};
export type TcbUtilityData = {
    checkingBlocks: [BlockchainId];
    checkingBlockMarks: [TcbVerifiedStatus];
    lastBlocksTakenAmount: number;
    suspiciousBlocksTakenAmount: number;
    negative: number;
    positive: number;
    previousTcb: BlockchainId;
    lastBlocksTaken: boolean;
    suspiciousBlocksTaken: boolean;
    assignedToEpoch: boolean;
    checked: boolean;
    rewardClaimed: boolean;
};
export type Epoch = {
    reward: string;
    benchmark: number;
    penaltyBenchmark: number;
};
export declare enum TcbStatus {
    Inited = "0",
    Completed = "1",
    Banned = "2",
    BenchmarkChanged = "3"
}
export type TcbData = {
    quote: string;
    timeInitialized: number;
    timeAdded: number;
    publicData: TcbPublicData;
    utilData: TcbUtilityData;
    status: TcbStatus;
};
export type EpochInfo = {
    reward: TokenAmount;
    benchmark: bigint | string;
    penaltyBenchmark: bigint | string;
};
export type ConsensusConstants = {
    CONSENSUS_L1: number;
    CONSENSUS_L2: number;
    CONSENSUS_K: number;
    CONSENSUS_MAX_PENALTIES: number;
    MAX_BECHMARK_OVERRUN_PERCENT: number;
    CONSENSUS_EPOCH_DURATION: number;
};
export declare const ConsensusConstantsStructure: {
    CONSENSUS_L1: NumberConstructor;
    CONSENSUS_L2: NumberConstructor;
    CONSENSUS_K: NumberConstructor;
    CONSENSUS_MAX_PENALTIES: NumberConstructor;
    MAX_BECHMARK_OVERRUN_PERCENT: NumberConstructor;
    CONSENSUS_EPOCH_DURATION: NumberConstructor;
};
