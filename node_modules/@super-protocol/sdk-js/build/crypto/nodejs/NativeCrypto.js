"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = require("crypto");
const events_1 = require("events");
const dto_js_1 = require("@super-protocol/dto-js");
/**
 *
 */
class NativeCrypto {
    /**
     * Here would be better to check cipher type using
     * ```
     * getCipherInfo(cipher)!.keyLength
     * ```
     * but it doesn't work in browser
     */
    static getKeyLength(cipher) {
        if (/256\-xts/.test(cipher)) {
            return 64;
        }
        if (/256|128\-xts|chacha20/.test(cipher) && cipher !== 'aes-128-cbc-hmac-sha256') {
            return 32;
        }
        if (/192|des\-ede3|desx|des3$/.test(cipher) || cipher === 'id-smime-alg-cms3deswrap') {
            return 24;
        }
        if (/128|des\-ede/.test(cipher)) {
            return 16;
        }
        if (/64|des/.test(cipher)) {
            return 8;
        }
        if (/40/.test(cipher)) {
            return 5;
        }
        return 16;
    }
    /**
     * Here would be better to check cipher type using
     * ```
     * getCipherInfo(cipher)!.ivLength
     * ```
     * but it doesn't work in browser
     */
    static getIVLength(cipher) {
        if (this.isCCM(cipher) || this.isGCM(cipher) || this.isOCB(cipher)) {
            return 12;
        }
        if (/wrap\-pad/.test(cipher)) {
            return 4;
        }
        if (/wrap|cast|des|bf|blowfish|idea|rc2/.test(cipher)) {
            return 8;
        }
        return 16;
    }
    static createKey(cipher) {
        const length = this.getKeyLength(cipher);
        return (0, crypto_1.randomBytes)(length);
    }
    static createIV(cipher) {
        const length = this.getIVLength(cipher);
        return (0, crypto_1.randomBytes)(length);
    }
    static createCipher(cipher, key, iv) {
        if (this.isECB(cipher) || this.isRC4(cipher)) {
            return (0, crypto_1.createCipher)(cipher, key);
        }
        if (this.isCCM(cipher) || this.isOCB(cipher)) {
            const options = {
                authTagLength: 16,
            };
            return (0, crypto_1.createCipheriv)(cipher, key, iv, options);
        }
        return (0, crypto_1.createCipheriv)(cipher, key, iv);
    }
    static createDecipher(cipher, key, iv, mac) {
        if (iv) {
            const options = {};
            if (this.isCCM(cipher) || this.isOCB(cipher)) {
                options.authTagLength = 16;
            }
            const decipher = (0, crypto_1.createDecipheriv)(cipher, key, iv, options);
            if (mac) {
                decipher.setAuthTag(mac);
            }
            return decipher;
        }
        else {
            return (0, crypto_1.createDecipher)(cipher, key);
        }
    }
    static encrypt(key, content, cipherName, outputEncoding = dto_js_1.Encoding.base64, 
    // TODO: replace BufferEncoding with Encoding
    inputEncoding = 'binary') {
        const iv = this.createIV(cipherName);
        const result = {};
        const cipher = this.createCipher(cipherName, key, iv);
        result.ciphertext = cipher.update(content, inputEncoding, outputEncoding);
        result.ciphertext += cipher.final(outputEncoding);
        if (!this.isECB(cipherName) && !this.isRC4(cipherName)) {
            result.iv = iv.toString(outputEncoding);
        }
        if (this.isCCM(cipherName) || this.isGCM(cipherName) || this.isOCB(cipherName)) {
            result.mac = cipher.getAuthTag().toString(outputEncoding);
        }
        return result;
    }
    static encryptStream(key, inputStream, outputStream, cipherName, encoding = dto_js_1.Encoding.base64) {
        return __awaiter(this, void 0, void 0, function* () {
            const iv = this.createIV(cipherName);
            const result = {};
            const cipher = this.createCipher(cipherName, key, iv);
            inputStream.pipe(cipher).pipe(outputStream);
            yield (0, events_1.once)(outputStream, 'finish');
            result.iv = iv.toString(encoding);
            if (this.isCCM(cipherName) || this.isGCM(cipherName)) {
                result.mac = cipher.getAuthTag().toString(encoding);
            }
            return result;
        });
    }
    static decrypt(key, content, cipherName, params, inputEncoding = dto_js_1.Encoding.base64, 
    // TODO: replace BufferEncoding with Encoding
    outputEncoding = 'binary') {
        const decipher = this.createDecipher(cipherName, key, params === null || params === void 0 ? void 0 : params.iv, params === null || params === void 0 ? void 0 : params.mac);
        let decrypted = decipher.update(content, inputEncoding, outputEncoding);
        decrypted += decipher.final(outputEncoding);
        return decrypted;
    }
    static decryptStream(key, inputStream, outputStream, cipherName, params) {
        return __awaiter(this, void 0, void 0, function* () {
            const decipher = this.createDecipher(cipherName, key, params === null || params === void 0 ? void 0 : params.iv, params === null || params === void 0 ? void 0 : params.mac);
            inputStream.pipe(decipher).pipe(outputStream);
            yield (0, events_1.once)(outputStream, 'finish');
        });
    }
    static createHashFromBuffer(data, algorithm, encoding = dto_js_1.Encoding.base64) {
        const hash = (0, crypto_1.createHash)(algorithm);
        hash.update(data);
        return {
            algo: algorithm,
            encoding,
            hash: hash.digest(encoding),
        };
    }
    static createHashFromStream(inputStream, algorithm, encoding = dto_js_1.Encoding.base64) {
        const hash = (0, crypto_1.createHash)(algorithm);
        return new Promise((resolve) => {
            hash.on('finish', () => {
                resolve({
                    algo: algorithm,
                    encoding,
                    hash: hash.digest(encoding),
                });
            });
            inputStream.pipe(hash);
        });
    }
}
/**
 * Here would be better to check cipher type using
 * ```
 * getCipherInfo(cipher)!.mode === 'mode'
 * ```
 * but it doesn't work in browser
 */
NativeCrypto.isCCM = (cipher) => /ccm/i.test(cipher) || cipher === 'chacha20-poly1305';
NativeCrypto.isGCM = (cipher) => /gcm/i.test(cipher);
NativeCrypto.isOCB = (cipher) => /ocb/i.test(cipher);
NativeCrypto.isECB = (cipher) => /ecb/i.test(cipher) || cipher === 'des-ede' || cipher === 'des-ede3';
NativeCrypto.isRC4 = (cipher) => /^rc4/i.test(cipher);
exports.default = NativeCrypto;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTmF0aXZlQ3J5cHRvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NyeXB0by9ub2RlanMvTmF0aXZlQ3J5cHRvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQ0EsbUNBWWdCO0FBRWhCLG1DQUE4QjtBQUU5QixtREFBNEY7QUFFNUY7O0dBRUc7QUFDSCxNQUFNLFlBQVk7SUFnQmhCOzs7Ozs7T0FNRztJQUNJLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBYztRQUN2QyxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDM0IsT0FBTyxFQUFFLENBQUM7U0FDWDtRQUNELElBQUksdUJBQXVCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLE1BQU0sS0FBSyx5QkFBeUIsRUFBRTtZQUNoRixPQUFPLEVBQUUsQ0FBQztTQUNYO1FBQ0QsSUFBSSwwQkFBMEIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksTUFBTSxLQUFLLDBCQUEwQixFQUFFO1lBQ3BGLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFDRCxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDL0IsT0FBTyxFQUFFLENBQUM7U0FDWDtRQUNELElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUN6QixPQUFPLENBQUMsQ0FBQztTQUNWO1FBQ0QsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3JCLE9BQU8sQ0FBQyxDQUFDO1NBQ1Y7UUFDRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSSxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQWM7UUFDdEMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLEtB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