"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dto_js_1 = require("@super-protocol/dto-js");
const crypto_1 = require("crypto");
const NativeCrypto_1 = __importDefault(require("./NativeCrypto"));
class RSAHybrid {
    static getKeyFingerprint(key) {
        const jsonKey = key.export({ format: 'jwk' });
        const buffer = Buffer.concat([
            Buffer.from('ssh-rsa'),
            Buffer.from(jsonKey.e || ''),
            Buffer.from(jsonKey.n || ''),
        ]);
        const hex = (0, crypto_1.createHash)('md5').update(buffer).digest('hex');
        return hex.match(/.{2}/g).join(':');
    }
    static publicEncrypt(rsaKey, aesKey) {
        const publicKey = (0, crypto_1.createPublicKey)({
            key: rsaKey,
            format: 'pem',
        });
        const encryptedKey = (0, crypto_1.publicEncrypt)({
            key: publicKey,
            padding: crypto_1.constants.RSA_PKCS1_OAEP_PADDING,
            oaepHash: 'sha256',
        }, Buffer.from(aesKey));
        const keyFingerprint = this.getKeyFingerprint(publicKey);
        return {
            [keyFingerprint]: encryptedKey.toString('base64'),
        };
    }
    static privateDecrypt(rsaKey, keys) {
        const privateKey = (0, crypto_1.createPrivateKey)({
            key: rsaKey,
            format: 'pem',
        });
        const keyFingerprint = this.getKeyFingerprint(privateKey);
        const encryptedKey = keys[keyFingerprint];
        const aesKey = (0, crypto_1.privateDecrypt)({
            key: privateKey,
            padding: crypto_1.constants.RSA_PKCS1_OAEP_PADDING,
            oaepHash: 'sha256',
        }, Buffer.from(encryptedKey, 'base64'));
        return aesKey;
    }
    static encrypt(content, encryption) {
        const aesKey = (0, crypto_1.randomBytes)(32);
        const keys = this.publicEncrypt(encryption.key, aesKey);
        const encrypted = NativeCrypto_1.default.encrypt(aesKey, content, dto_js_1.Cipher.AES_256_GCM, encryption.encoding);
        return Object.assign(Object.assign({}, encrypted), { encoding: encryption.encoding, algo: dto_js_1.CryptoAlgorithm.RSAHybrid, cipher: dto_js_1.Cipher.RSA_OAEP_AES_GCM, keys: JSON.stringify(keys) });
    }
    static encryptStream(inputStream, outputStream, encryption) {
        return __awaiter(this, void 0, void 0, function* () {
            const aesKey = (0, crypto_1.randomBytes)(32);
            const keys = this.publicEncrypt(encryption.key, aesKey);
            const encrypted = (yield NativeCrypto_1.default.encryptStream(aesKey, inputStream, outputStream, dto_js_1.Cipher.AES_256_GCM, encryption.encoding));
            return Object.assign(Object.assign({}, encrypted), { encoding: encryption.encoding, algo: dto_js_1.CryptoAlgorithm.RSAHybrid, cipher: dto_js_1.Cipher.RSA_OAEP_AES_GCM, keys: JSON.stringify(keys) });
        });
    }
    static decrypt(encryption) {
        const iv = Buffer.from(encryption.iv, encryption.encoding);
        const mac = Buffer.from(encryption.mac, encryption.encoding);
        const aesKey = this.privateDecrypt(encryption.key, JSON.parse(encryption.keys));
        const decrypted = NativeCrypto_1.default.decrypt(aesKey, encryption.ciphertext, dto_js_1.Cipher.AES_256_GCM, {
            iv,
            mac,
        }, encryption.encoding);
        return decrypted;
    }
    static decryptStream(inputStream, outputStream, encryption) {
        return __awaiter(this, void 0, void 0, function* () {
            const iv = Buffer.from(encryption.iv, encryption.encoding);
            const mac = Buffer.from(encryption.mac, encryption.encoding);
            const aesKey = this.privateDecrypt(encryption.key, JSON.parse(encryption.keys));
            yield NativeCrypto_1.default.decryptStream(aesKey, inputStream, outputStream, dto_js_1.Cipher.AES_256_GCM, {
                iv,
                mac,
            });
        });
    }
}
exports.default = RSAHybrid;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUlNBLUh5YnJpZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jcnlwdG8vbm9kZWpzL1JTQS1IeWJyaWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFDQSxtREFNZ0M7QUFDaEMsbUNBVWdCO0FBQ2hCLGtFQUEwQztBQUkxQyxNQUFNLFNBQVM7SUFDTixNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBYztRQUM1QyxNQUFNLE9BQU8sR0FBZSxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDMUQsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUMzQixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUN0QixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQzVCLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDN0IsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxHQUFHLEdBQUcsSUFBQSxtQkFBVSxFQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFM0QsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRU8sTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFjLEVBQUUsTUFBYztRQUN6RCxNQUFNLFNBQVMsR0FBRyxJQUFBLHdCQUFlLEVBQUM7WUFDaEMsR0FBRyxFQUFFLE1BQU07WUFDWCxNQUFNLEVBQUUsS0FBSztTQUNkLENBQUMsQ0FBQztRQUNILE1BQU0sWUFBWSxHQUFHLElBQUEsc0JBQWEsRUFDaEM7WUFDRSxHQUFHLEVBQUUsU0FBUztZQUNkLE9BQU8sRUFBRSxr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