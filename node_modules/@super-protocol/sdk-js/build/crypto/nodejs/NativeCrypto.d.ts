/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import { ReadStream, WriteStream } from 'fs';
import { Cipher, Decipher } from 'crypto';
import { Readable } from 'stream';
import { Encoding, EncryptionWithMacIV, Hash, HashAlgorithm } from '@super-protocol/dto-js';
/**
 *
 */
declare class NativeCrypto {
    /**
     * Here would be better to check cipher type using
     * ```
     * getCipherInfo(cipher)!.mode === 'mode'
     * ```
     * but it doesn't work in browser
     */
    static readonly isCCM: (cipher: string) => boolean;
    static readonly isGCM: (cipher: string) => boolean;
    static readonly isOCB: (cipher: string) => boolean;
    static readonly isECB: (cipher: string) => boolean;
    static readonly isRC4: (cipher: string) => boolean;
    /**
     * Here would be better to check cipher type using
     * ```
     * getCipherInfo(cipher)!.keyLength
     * ```
     * but it doesn't work in browser
     */
    static getKeyLength(cipher: string): number;
    /**
     * Here would be better to check cipher type using
     * ```
     * getCipherInfo(cipher)!.ivLength
     * ```
     * but it doesn't work in browser
     */
    static getIVLength(cipher: string): number;
    static createKey(cipher: string): Buffer;
    static createIV(cipher: string): Buffer;
    static createCipher(cipher: string, key: Buffer, iv: Buffer): Cipher;
    static createDecipher(cipher: string, key: Buffer, iv?: Buffer, mac?: Buffer): Decipher;
    static encrypt(key: Buffer, content: string, cipherName: string, outputEncoding?: Encoding, inputEncoding?: BufferEncoding): Partial<EncryptionWithMacIV>;
    static encryptStream(key: Buffer, inputStream: ReadStream, outputStream: WriteStream, cipherName: any, encoding?: Encoding): Promise<Partial<EncryptionWithMacIV>>;
    static decrypt(key: Buffer, content: string, cipherName: string, params?: {
        iv: Buffer;
        mac?: Buffer;
    }, inputEncoding?: Encoding, outputEncoding?: BufferEncoding): string;
    static decryptStream(key: Buffer, inputStream: ReadStream, outputStream: WriteStream, cipherName: string, params?: {
        iv: Buffer;
        mac: Buffer;
    }): Promise<void>;
    static createHashFromBuffer(data: Buffer, algorithm: HashAlgorithm, encoding?: Encoding): Hash;
    static createHashFromStream(inputStream: Readable, algorithm: HashAlgorithm, encoding?: Encoding): Promise<Hash>;
}
export default NativeCrypto;
