/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import { Encryption, Hash } from '@super-protocol/dto-js';
import fs from 'fs';
import { Readable } from 'stream';
declare class Crypto {
    /**
     * Used to encrypt data before sending it to blockchain
     * @param algorithm - encryption algorithm
     * @param content - string data to encrypt
     * @param key - key in string format (default encoding base64)
     * @param encoding - encoding of key and output data
     * @returns {Promise<Encryption>} - object what contains encrypted data, key and spec to decryption
     */
    static encrypt(content: string, encryption: Encryption): Promise<Encryption>;
    /**
     * Encrypts data stream
     * @param inputStream - path to file that will be encrypted
     * @param outputStream - place where it will be saved
     * @param algorithm - file encryption algorithm
     * @param key – key that will be used to encrypt data
     * @returns {Promise<Encryption>} - encryption info
     */
    static encryptStream(inputStream: fs.ReadStream, outputStream: fs.WriteStream, encryption: Encryption): Promise<Encryption>;
    /**
     * Used to decrypt data from blockchain
     * @param encryption - object what contains encrypted data, key and spec to decryption
     * @returns {Promise<string>} - decrypted string
     */
    static decrypt(encryption: Encryption): Promise<string>;
    /**
     * Decrypts data stream
     * @param inputStream - stream with data to decrypt
     * @param outputStream - stream where the decrypted data will be written
     * @param encryption – encryption info
     */
    static decryptStream(inputStream: fs.ReadStream, outputStream: fs.WriteStream, encryption: Encryption): Promise<void>;
    /**
     * Create hash from content
     * @param content - buffer data to create hash from
     * @param hashInfo - information about hash algorithm and encoding
     * @returns Hash structure with hash itself hash algorithm and encoding
     */
    static createHash(content: Buffer, hashInfo: Omit<Hash, 'hash'>): Promise<Hash>;
    /**
     * Create hash from stream
     * @param inputStream - readable stream
     * @param hashInfo - information about hash algorithm and encoding
     * @returns Hash structure with hash itself hash algorithm and encoding
     */
    static createHash(inputStream: Readable, hashInfo: Omit<Hash, 'hash'>): Promise<Hash>;
}
export default Crypto;
