"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const BaseConnector_1 = require("./BaseConnector");
const web3_1 = __importStar(require("web3"));
const web3_eth_abi_1 = require("web3-eth-abi");
const constants_1 = require("../constants");
const helper_1 = require("../utils/helper");
const TxManager_1 = __importDefault(require("../utils/TxManager"));
const abi_1 = require("../contracts/abi");
const ethers_1 = require("ethers");
// TODO: remove this dependencies
const store_1 = __importDefault(require("../store"));
const Superpro_1 = __importDefault(require("../staticModels/Superpro"));
const SuperproToken_1 = __importDefault(require("../staticModels/SuperproToken"));
const Monitoring_1 = require("../utils/Monitoring");
class BlockchainConnector extends BaseConnector_1.BaseConnector {
    constructor() {
        super();
    }
    static getInstance() {
        if (!BlockchainConnector.instance) {
            BlockchainConnector.instance = new BlockchainConnector();
        }
        return BlockchainConnector.instance;
    }
    /**
     * Function for connecting to blockchain
     * Used to setting up settings for blockchain connector
     * Needs to run this function before using blockchain connector
     */
    initialize(config) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.trace(config, 'Initializing');
            const url = (config === null || config === void 0 ? void 0 : config.blockchainUrl) || constants_1.defaultBlockchainUrl;
            store_1.default.web3Https = new web3_1.default(url);
            const web3Context = new web3_1.Web3Context({
                provider: store_1.default.web3Https.currentProvider,
                config: { contractDataInputFill: 'data' },
            });
            store_1.default.gasPrice = (_a = config === null || config === void 0 ? void 0 : config.gasPrice) !== null && _a !== void 0 ? _a : constants_1.defaultGasPrice;
            if (config === null || config === void 0 ? void 0 : config.gasLimit)
                store_1.default.gasLimit = config.gasLimit;
            if (config === null || config === void 0 ? void 0 : config.gasLimitMultiplier)
                store_1.default.gasLimitMultiplier = config.gasLimitMultiplier;
            if (config === null || config === void 0 ? void 0 : config.gasPriceMultiplier)
                store_1.default.gasPriceMultiplier = config.gasPriceMultiplier;
            if (config === null || config === void 0 ? void 0 : config.txConcurrency)
                store_1.default.txConcurrency = config.txConcurrency;
            if (config === null || config === void 0 ? void 0 : config.txIntervalMs)
                store_1.default.txIntervalMs = config.txIntervalMs;
            Superpro_1.default.address = config.contractAddress;
            this.contract = new web3_1.Contract(abi_1.abi, Superpro_1.default.address, web3Context);
            TxManager_1.default.init(store_1.default.web3Https);
            SuperproToken_1.default.addressHttps = yield Superpro_1.default.getTokenAddress(this.contract);
            Monitoring_1.Monitoring.getInstance().initializeLogging();
            this.initialized = true;
            this.logger.trace('Initialized');
        });
    }
    /**
     * Function for connecting provider action account
     * Needs to run this function before using any set methods in blockchain connector
     */
    initializeActionAccount(actionAccountKey, manageNonce = true) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkIfInitialized();
            store_1.default.web3Https.eth.accounts.wallet.add(actionAccountKey);
            const actionAccount = store_1.default.web3Https.eth.accounts.privateKeyToAccount(actionAccountKey).address;
            if (!store_1.default.actionAccount)
                store_1.default.actionAccount = actionAccount;
            if (!store_1.default.keys[actionAccount])
                store_1.default.keys[actionAccount] = actionAccountKey;
            if (!this.defaultActionAccount)
                this.defaultActionAccount = actionAccount;
            if (manageNonce) {
                yield TxManager_1.default.initAccount(actionAccount);
            }
            return actionAccount;
        });
    }
    /**
     * Returns balance of blockchain platform tokens in wei
     */
    getBalance(address) {
        this.checkIfInitialized();
        return store_1.default.web3Https.eth.getBalance(address).then((balance) => balance.toString());
    }
    getTimestamp() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this.checkIfInitialized();
            const block = yield ((_a = store_1.default.web3Https) === null || _a === void 0 ? void 0 : _a.eth.getBlock('latest'));
            return block.timestamp;
        });
    }
    /**
     * Returns transactions events info
     * @param txHash - transaction hash
     * @returns {Promise<EventData[]>} - Transaction events info
     */
    getTransactionEvents(txHash) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkIfInitialized();
            const receipt = yield store_1.default.web3Https.eth.getTransactionReceipt(txHash);
            const eventData = [];
            const eventsDescriptor = abi_1.abi
                .filter((desc) => desc.type === 'event')
                .map((desc) => (Object.assign(Object.assign({}, desc), { signature: (0, web3_eth_abi_1.encodeEventSignature)(desc) })));
            for (const log of receipt.logs) {
                if (!log.address || log.address === constants_1.POLYGON_MATIC_EVENT_PATH) {
                    continue;
                }
                const descriptor = eventsDescriptor.find((desc) => { var _a; return desc.signature === ((_a = log.topics) === null || _a === void 0 ? void 0 : _a[0]); });
                if (descriptor) {
                    const decodedParams = (0, web3_eth_abi_1.decodeLog)(descriptor.inputs, log.data, log.topics.slice(1));
                    eventData.push({
                        contract: log.address,
                        name: descriptor.name || 'UknownEvenet',
                        data: (0, helper_1.cleanWeb3Data)(decodedParams),
                    });
                }
            }
            return eventData;
        });
    }
    /**
     * Function for adding event listeners on TEE offer created event in TEE offers factory contract
     * @param callback - function for processing created TEE offer
     * @returns unsubscribe - unsubscribe function from event
     */
    getLastBlockInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkIfInitialized();
            const index = Number(yield store_1.default.web3Https.eth.getBlockNumber());
            const hash = (yield store_1.default.web3Https.eth.getBlock(index)).hash;
            return {
                index,
                hash,
            };
        });
    }
    /**
     * Returns transactions reciept
     * @param txHash - transaction hash
     * @returns {Promise<TransactionReceipt>} - Transaction reciept
     */
    getTransactionReceipt(txHash) {
        this.checkIfInitialized();
        return store_1.default.web3Https.eth.getTransactionReceipt(txHash);
    }
    /**
     * Returns balance of blockchain platform tokens in wei
     */
    transfer(to, amount, transactionOptions) {
        this.checkIfInitialized();
        (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
        const transaction = {
            to,
            value: amount,
        };
        return TxManager_1.default.publishTransaction(transaction, transactionOptions);
    }
    /**
     * Returns transactions count
     * @param address - wallet address
     * @returns {Promise<number>} - Transactions count
     */
    getTransactionCount(address, status) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkIfInitialized();
            if (status) {
                return Number(yield store_1.default.web3Https.eth.getTransactionCount(address, status));
            }
            else {
                return Number(yield store_1.default.web3Https.eth.getTransactionCount(address));
            }
        });
    }
    getAddressByKey(pk) {
        return new ethers_1.Wallet(pk).address;
    }
    /**
     * Fetch transactions for specific addresses starting with specific block until last block
     * @param addresses - array of addresses IN LOWER CASE to fetch transactions (from these addresses and to these addresses)
     * @param startBlock - number of block to start fetching transactions (if empty fetch only for last block)
     * @param lastBlock - number of block to last fetching transactions (if empty fetch only for last block)
     * @param batchSize - block size for asynchronous transaction loading
     * @returns {Promise<{
     *   transactionsByAddress, - found transactions sorted by addresses
     *   lastBlock, - number of last fetched block (can be used to start fetching from this block next time)
     * }>}
     */
    getTransactions({ addresses, startBlock, lastBlock, batchSize = constants_1.BLOCK_SIZE_TO_FETCH_TRANSACTION, timeout, }) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkIfInitialized();
            const blockchainLastBlock = Number(yield store_1.default.web3Https.eth.getBlockNumber());
            if (lastBlock) {
                lastBlock = Math.min(lastBlock, blockchainLastBlock);
            }
            else {
                lastBlock = blockchainLastBlock;
            }
            if (!startBlock) {
                startBlock = Math.max(lastBlock - 1000, 0);
            }
            const transactionsByAddress = {};
            const validAddresses = addresses
                .filter((address) => { var _a; return (_a = store_1.default.web3Https) === null || _a === void 0 ? void 0 : _a.utils.isAddress(address); })
                .map((address) => {
                const lowerCaseAddress = address.toLowerCase();
                if (address !== lowerCaseAddress) {
                    this.logger.warn({ address }, `Must use adresses in lower case fomat! ${address} -> ${lowerCaseAddress}`);
                }
                return lowerCaseAddress;
            });
            if (!validAddresses.length) {
                return {
                    transactionsByAddress,
                    lastBlock,
                };
            }
            validAddresses.forEach((address) => (transactionsByAddress[address] = []));
            while (startBlock <= lastBlock) {
                const batch = new store_1.default.web3Https.BatchRequest();
                const batchLastBlock = Math.min(startBlock + batchSize - 1, lastBlock);
                for (let blockNumber = startBlock; blockNumber <= batchLastBlock; blockNumber++) {
                    const hexedBlockNumber = '0x' + blockNumber.toString(16);
                    batch
                        .add({
                        jsonrpc: '2.0',
                        method: 'eth_getBlockByNumber',
                        params: [hexedBlockNumber, true],
                    })
                        .catch((err) => this.logger.error(err));
                }
                const blocks = yield (0, helper_1.executeBatchAsync)(batch, timeout);
                blocks.forEach((block) => {
                    if (!(block === null || block === void 0 ? void 0 : block.transactions))
                        return;
                    block.transactions.forEach((transaction) => {
                        if (typeof transaction === 'string') {
                            return;
                        }
                        let address = null;
                        if (validAddresses.includes(transaction.from))
                            address = transaction.from;
                        else if (transaction.to && validAddresses.includes(transaction.to))
                            address = transaction.to;
                        if (address) {
                            transactionsByAddress[address].push(Object.assign(Object.assign({}, transaction), { timestamp: Number(block.timestamp) * 1000, input: transaction.input }));
                        }
                    });
                });
                startBlock = batchLastBlock + 1;
            }
            return {
                transactionsByAddress,
                lastBlock,
            };
        });
    }
    shutdown() {
        super.shutdown();
        store_1.default.web3Https = undefined;
        Monitoring_1.Monitoring.getInstance().shutdownLogging();
    }
}
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], BlockchainConnector.prototype, "getBalance", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], BlockchainConnector.prototype, "getTransactionEvents", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String, Object]),
    __metadata("design:returntype", Promise)
], BlockchainConnector.prototype, "transfer", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], BlockchainConnector.prototype, "getTransactions", null);
exports.default = BlockchainConnector;
//# sourceMappingURL=data:application/json;base64,