import { BaseConnector, Config } from './BaseConnector';
import { TransactionReceipt } from 'web3';
import { TransactionOptions, EventData, BlockInfo, TokenAmount } from '../types/Web3';
import BlockchainTransaction from '../types/blockchainConnector/StorageAccess';
declare class BlockchainConnector extends BaseConnector {
    private defaultActionAccount?;
    private static instance;
    private constructor();
    static getInstance(): BlockchainConnector;
    /**
     * Function for connecting to blockchain
     * Used to setting up settings for blockchain connector
     * Needs to run this function before using blockchain connector
     */
    initialize(config: Config): Promise<void>;
    /**
     * Function for connecting provider action account
     * Needs to run this function before using any set methods in blockchain connector
     */
    initializeActionAccount(actionAccountKey: string, manageNonce?: boolean): Promise<string>;
    /**
     * Returns balance of blockchain platform tokens in wei
     */
    getBalance(address: string): Promise<string>;
    getTimestamp(): Promise<bigint>;
    /**
     * Returns transactions events info
     * @param txHash - transaction hash
     * @returns {Promise<EventData[]>} - Transaction events info
     */
    getTransactionEvents(txHash: string): Promise<EventData[]>;
    /**
     * Function for adding event listeners on TEE offer created event in TEE offers factory contract
     * @param callback - function for processing created TEE offer
     * @returns unsubscribe - unsubscribe function from event
     */
    getLastBlockInfo(): Promise<BlockInfo>;
    /**
     * Returns transactions reciept
     * @param txHash - transaction hash
     * @returns {Promise<TransactionReceipt>} - Transaction reciept
     */
    getTransactionReceipt(txHash: string): Promise<TransactionReceipt>;
    /**
     * Returns balance of blockchain platform tokens in wei
     */
    transfer(to: string, amount: TokenAmount, transactionOptions?: TransactionOptions): Promise<TransactionReceipt>;
    /**
     * Returns transactions count
     * @param address - wallet address
     * @returns {Promise<number>} - Transactions count
     */
    getTransactionCount(address: string, status?: string): Promise<number>;
    getAddressByKey(pk: string): string;
    /**
     * Fetch transactions for specific addresses starting with specific block until last block
     * @param addresses - array of addresses IN LOWER CASE to fetch transactions (from these addresses and to these addresses)
     * @param startBlock - number of block to start fetching transactions (if empty fetch only for last block)
     * @param lastBlock - number of block to last fetching transactions (if empty fetch only for last block)
     * @param batchSize - block size for asynchronous transaction loading
     * @returns {Promise<{
     *   transactionsByAddress, - found transactions sorted by addresses
     *   lastBlock, - number of last fetched block (can be used to start fetching from this block next time)
     * }>}
     */
    getTransactions({ addresses, startBlock, lastBlock, batchSize, timeout, }: {
        addresses: string[];
        startBlock?: number;
        lastBlock?: number;
        batchSize?: number;
        timeout?: number;
    }): Promise<BlockchainTransaction>;
    shutdown(): void;
}
export default BlockchainConnector;
