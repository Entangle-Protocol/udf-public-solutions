import { DepositInfo, BlockInfo, TransactionOptions, TokenAmount } from '../types';
declare class Deposits {
    private static readonly logger;
    static get address(): string;
    /**
     * Function for fetching deposit info
     * @param depositOwner - Deposit owner
     */
    static getDepositInfo(depositOwner: string): Promise<DepositInfo>;
    /**
     * Function for fetching amount of locked tokens
     * @param depositOwner - Deposit owner
     */
    static getLockedTokensAmount(depositOwner: string): Promise<TokenAmount>;
    /**
     * Function for replenish deposit
     * @param amount - replenish amount
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     * @returns {Promise<void>} - Does not return id of created order!
     */
    static replenish(amount: TokenAmount, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Function for replenish deposit of given account
     * @param beneficiary - account
     * @param amount - replenish amount
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     * @returns {Promise<void>} - Does not return id of created order!
     */
    static replenishFor(beneficiary: string, amount: TokenAmount, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Function for withdraw deposit
     * @param amount - withdraw amount
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     * @returns {Promise<void>} - Does not return id of created order!
     */
    static withdraw(amount: TokenAmount, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Function for adding event listeners on DepositReplenished event in contract
     * @param owner - owner address
     * @param callback - function for processing created order
     * @returns unsubscribe - unsubscribe function from event
     */
    static onDepositReplenished(callback: onDepositReplenishedCallback, owner?: string): () => void;
    /**
     * Function for adding event listeners on DepositWithdrawn event in contract
     * @param owner - owner address
     * @param callback - function for processing created order
     * @returns unsubscribe - unsubscribe function from event
     */
    static onDepositWithdrawn(callback: onDepositWithdrawnCallback, owner?: string): () => void;
    /**
     * Function for adding event listeners on DepositPartLocked event in contract
     * @param owner - owner address
     * @param callback - function for processing created order
     * @returns unsubscribe - unsubscribe function from event
     */
    static onDepositPartLocked(callback: onDepositPartLockedCallback, owner?: string): () => void;
    /**
     * Function for adding event listeners on DepositPartUnlocked event in contract
     * @param owner - owner address
     * @param callback - function for processing created order
     * @returns unsubscribe - unsubscribe function from event
     */
    static onDepositPartUnlocked(callback: onDepositPartUnlockedCallback, owner?: string): () => void;
}
export type onDepositReplenishedCallback = (owner: string, amount: TokenAmount, totalLocked: TokenAmount, block?: BlockInfo) => void;
export type onDepositWithdrawnCallback = (owner: string, amount: TokenAmount, totalLocked: TokenAmount, block?: BlockInfo) => void;
export type onDepositPartLockedCallback = (owner: string, amount: TokenAmount, totalLocked: TokenAmount, block?: BlockInfo) => void;
export type onDepositPartUnlockedCallback = (owner: string, amount: TokenAmount, totalLocked: TokenAmount, block?: BlockInfo) => void;
export default Deposits;
