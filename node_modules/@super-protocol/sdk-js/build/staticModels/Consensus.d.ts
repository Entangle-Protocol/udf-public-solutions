import { EpochInfo, ConsensusConstants, TransactionOptions, BlockInfo, BlockchainId, TokenAmount } from '../types';
declare class Consensus {
    private static readonly logger;
    private static tcbIds?;
    static get address(): string;
    /**
     * Function for fetching list of all tcb ids
     * @returns list of tcb ids
     */
    static getAllTcbs(): Promise<BlockchainId[]>;
    static getEpochTime(time: number): Promise<{
        epochStart: number;
        epochEnd: number;
        epochIndex: number;
    }>;
    static getEpoch(epochIndex: number): Promise<EpochInfo>;
    static getSuspiciousBlockTable(): Promise<string[]>;
    static unlockProfitByTcbList(tcbIds: BlockchainId[], transactionOptions?: TransactionOptions): Promise<void>;
    static getSuspiciousBlockTableSize(): Promise<string>;
    static getLastBlockTable(): Promise<BlockchainId[]>;
    static getLastBlockTableSize(): Promise<string>;
    static getConstants(): Promise<ConsensusConstants>;
    static onTcbBanned(callback: onTcbBannedCallback): () => void;
    static onTcbCompleted(callback: onTcbCompletedCallback): () => void;
    static onTcbInitialized(callback: onTcbInitializedCallback): () => void;
    static onTcbBenchmarkChanged(callback: onTcbBenchmarkChangedCallback): () => void;
    static onRewardsClaimed(callback: onRewardsClaimedCallback): () => void;
    static onTcbRewardUnlocked(callback: onTcbRewardUnlockedCallback): () => void;
}
export type onRewardsClaimedCallback = (tcbId: BlockchainId, amount: TokenAmount, claimer: string, block?: BlockInfo) => void;
export type onTcbRewardUnlockedCallback = (tcbId: BlockchainId, rewards: TokenAmount, block?: BlockInfo) => void;
export type onTcbBenchmarkChangedCallback = (tcbId: BlockchainId, provider: string, block?: BlockInfo) => void;
export type onTcbInitializedCallback = (tcbId: BlockchainId, provider: string, block?: BlockInfo) => void;
export type onTcbCompletedCallback = (tcbId: BlockchainId, provider: string, block?: BlockInfo) => void;
export type onTcbBannedCallback = (tcbId: BlockchainId, provider: string, block?: BlockInfo) => void;
export default Consensus;
