import StaticModel from './StaticModel';
import { OfferCreatedEvent, ValueSlotAddedEvent, BlockInfo, TransactionOptions, OfferInfo, OfferType, BlockchainId } from '../types';
declare class Offers implements StaticModel {
    private static readonly logger;
    static offers?: BlockchainId[];
    static get address(): string;
    /**
     * Function for fetching list of all offers ids
     */
    static getAll(): Promise<BlockchainId[]>;
    /**
     * Function for fetching total count of value offer slots
     */
    static getSlotsCount(): Promise<number>;
    /**
     * Creates new offer
     * @param providerAuthorityAccount - address of authority account of provider
     * @param offerInfo - data of new offer
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    static create(providerAuthorityAccount: string, offerInfo: OfferInfo, externalId?: string, enabled?: boolean, transactionOptions?: TransactionOptions): Promise<void>;
    static getByExternalId(filter: {
        externalId: string;
        creator?: string;
    }, fromBlock?: number | string, toBlock?: number | string): Promise<OfferCreatedEvent | null>;
    static getSlotByExternalId(filter: {
        externalId: string;
        creator?: string;
        offerId?: BlockchainId;
    }, fromBlock?: number | string, toBlock?: number | string): Promise<ValueSlotAddedEvent | null>;
    /**
     * Function for adding event listeners on onSlotAdded event in contract
     * @param creator - creator address
     * @param callback - function for processing created order
     * @returns unsubscribe - unsubscribe function from event
     */
    static onSlotAdded(callback: onSlotAddedCallback, creator?: string): () => void;
    /**
     * Function for adding event listeners on onSlotUpdated event in contract
     * @param callback - function for processing created order
     * @returns unsubscribe - unsubscribe function from event
     */
    static onSlotUpdated(callback: onSlotUpdatedCallback): () => void;
    /**
     * Function for adding event listeners on onSlotDeleted event in contract
     * @param callback - function for processing created order
     * @returns unsubscribe - unsubscribe function from event
     */
    static onSlotDeleted(callback: onSlotDeletedCallback): () => void;
    /**
     * Function for adding event listeners on offer created event in offers factory contract
     * @param callback - function for processing created offer
     * @returns unsubscribe - unsubscribe function from event
     */
    static onCreated(callback: onOfferCreatedCallback): () => void;
    static onEnabled(callback: onOfferEnabledCallback): () => void;
    static onDisabled(callback: onOfferDisbledCallback): () => void;
}
export type onOfferCreatedCallback = (id: BlockchainId, creator: string, externalId: string, block?: BlockInfo) => void;
export type onOfferEnabledCallback = (providerAuth: string, id: BlockchainId, offerType: OfferType, block?: BlockInfo) => void;
export type onOfferDisbledCallback = (providerAuth: string, id: BlockchainId, offerType: OfferType, block?: BlockInfo) => void;
export type onSlotAddedCallback = (creator: string, offerId: BlockchainId, slotId: BlockchainId, externalId: string, block?: BlockInfo) => void;
export type onSlotUpdatedCallback = (offerId: BlockchainId, slotId: BlockchainId, block?: BlockInfo) => void;
export type onSlotDeletedCallback = (offerId: BlockchainId, slotId: BlockchainId, block?: BlockInfo) => void;
export default Offers;
