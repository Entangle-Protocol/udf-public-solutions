"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Superpro_1 = __importDefault(require("./Superpro"));
const connectors_1 = require("../connectors");
class ActiveOffers {
    static get address() {
        return Superpro_1.default.address;
    }
    static getListOfActiveOffersSize() {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = connectors_1.BlockchainConnector.getInstance().getContract();
            return Number(yield contract.methods.getListOfActiveOffersSize().call());
        });
    }
    static getActiveOffersEventsQueueLength() {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = connectors_1.BlockchainConnector.getInstance().getContract();
            return Number(yield contract.methods.getActiveOffersEventsQueueLength().call());
        });
    }
    /**
     * Function returns ids of active offers (value and TEE)
     * Attention! Check active offers events queue length before calling this function, for actualy status it should be equal to 0.
     * @param begin The first element of range.
     * @param end One past the final element in the range.
     * @returns {Promise<BlockchainId[]>}
     */
    static getListOfActiveOffersRange(begin = 0, end = 0) {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = connectors_1.BlockchainConnector.getInstance().getContract();
            end = Number(yield contract.methods.getListOfActiveOffersSize().call());
            return contract.methods
                .getListOfActiveOffersRange(begin, end)
                .call()
                .then((ids) => ids.map((id) => id.toString()));
        });
    }
}
exports.default = ActiveOffers;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWN0aXZlT2ZmZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3N0YXRpY01vZGVscy9BY3RpdmVPZmZlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQSwwREFBa0M7QUFDbEMsOENBQW9EO0FBR3BELE1BQU0sWUFBWTtJQUNULE1BQU0sS0FBSyxPQUFPO1FBQ3ZCLE9BQU8sa0JBQVEsQ0FBQyxPQUFPLENBQUM7SUFDMUIsQ0FBQztJQUVNLE1BQU0sQ0FBTyx5QkFBeUI7O1lBQzNDLE1BQU0sUUFBUSxHQUFHLGdDQUFtQixDQUFDLFdBQVcsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBRWpFLE9BQU8sTUFBTSxDQUFDLE1BQU0sUUFBUSxDQUFDLE9BQU8sQ0FBQyx5QkFBeUIsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDM0UsQ0FBQztLQUFBO0lBRU0sTUFBTSxDQUFPLGdDQUFnQzs7WUFDbEQsTUFBTSxRQUFRLEdBQUcsZ0NBQW1CLENBQUMsV0FBVyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7WUFFakUsT0FBTyxNQUFNLENBQUMsTUFBTSxRQUFRLENBQUMsT0FBTyxDQUFDLGdDQUFnQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNsRixDQUFDO0tBQUE7SUFFRDs7Ozs7O09BTUc7SUFDSSxNQUFNLENBQU8sMEJBQTBCLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQzs7WUFDL0QsTUFBTSxRQUFRLEdBQUcsZ0NBQW1CLENBQUMsV0FBVyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7WUFFakUsR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLFFBQVEsQ0FBQyxPQUFPLENBQUMseUJBQXlCLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBRXhFLE9BQU8sUUFBUSxDQUFDLE9BQU87aUJBQ3BCLDBCQUEwQixDQUFDLEtBQUssRUFBRSxHQUFHLENBQUM7aUJBQ3RDLElBQUksRUFBRTtpQkFDTixJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbkQsQ0FBQztLQUFBO0NBQ0Y7QUFFRCxrQkFBZSxZQUFZLENBQUMifQ==