"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = __importDefault(require("../logger"));
const helper_1 = require("../utils/helper");
const utils_1 = require("ethers/lib/utils");
const types_1 = require("../types");
const connectors_1 = require("../connectors");
const Superpro_1 = __importDefault(require("./Superpro"));
const TxManager_1 = __importDefault(require("../utils/TxManager"));
const StaticModel_1 = __importDefault(require("./StaticModel"));
class TeeOffers {
    static get address() {
        return Superpro_1.default.address;
    }
    static packHardwareInfo(hw) {
        return __awaiter(this, void 0, void 0, function* () {
            hw.slotInfo.cpuCores *= yield TeeOffers.getDenominator();
            return hw;
        });
    }
    static unpackHardwareInfo(hw) {
        return __awaiter(this, void 0, void 0, function* () {
            const cpuDenominator = yield TeeOffers.getDenominator();
            hw.slotInfo = (0, helper_1.unpackSlotInfo)(hw.slotInfo, cpuDenominator);
            hw.optionInfo = (0, helper_1.formatOptionInfo)(hw.optionInfo);
            return hw;
        });
    }
    static getDenominator() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.cpuDenominator) {
                const contract = connectors_1.BlockchainConnector.getInstance().getContract();
                this.cpuDenominator = Number(yield contract.methods.getCpuDenominator().call());
            }
            return this.cpuDenominator;
        });
    }
    /**
     * Function for fetching list of all TEE offers addresses
     */
    static getAll() {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = connectors_1.BlockchainConnector.getInstance().getContract();
            const count = Number(yield contract.methods.getOffersTotalCount().call());
            const teeOfffersSet = new Set(this.teeOffers);
            for (let offerId = teeOfffersSet.size + 1; offerId <= count; ++offerId) {
                const offerType = (yield contract.methods.getOfferType(offerId).call()).toString();
                if (offerType === types_1.OfferType.TeeOffer) {
                    teeOfffersSet.add(offerId.toString());
                }
            }
            this.teeOffers = Array.from(teeOfffersSet);
            return this.teeOffers;
        });
    }
    /**
     * Creates new TEE offer
     * @param providerAuthorityAccount - address of authority account of provider
     * @param teeOfferInfo - data of new TEE offer
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    static create(providerAuthorityAccount, teeOfferInfo, externalId = 'default', enabled = true, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = connectors_1.BlockchainConnector.getInstance().getContract();
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            // Converts offer info to array of arrays (used in blockchain)
            teeOfferInfo.hardwareInfo = yield TeeOffers.packHardwareInfo(teeOfferInfo.hardwareInfo);
            const formattedExternalId = (0, utils_1.formatBytes32String)(externalId);
            yield TxManager_1.default.execute(contract.methods.createTeeOffer(providerAuthorityAccount, teeOfferInfo, formattedExternalId, enabled), transactionOptions);
        });
    }
    static getByExternalId(filter, fromBlock, toBlock) {
        return __awaiter(this, void 0, void 0, function* () {
            const founded = yield StaticModel_1.default.findItemsById('TeeOfferCreated', filter, fromBlock, toBlock);
            if (!founded)
                return null;
            return founded;
        });
    }
    /**
     * Function for fetching TEE offer id by TEE deviceId
     * @param deviceId - unque TEE device id (unparsed, from blockchain)
     * @returns TEE offer id
     */
    static getByDeviceId(deviceId) {
        const contract = connectors_1.BlockchainConnector.getInstance().getContract();
        const fromattedDeviceId = (0, helper_1.packDeviceId)(deviceId);
        return contract.methods.getTeeOfferByDeviceId(fromattedDeviceId).call();
    }
    /**
     * Function for fetching total count of tee offer slots
     */
    static getSlotsCount() {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = connectors_1.BlockchainConnector.getInstance().getContract();
            return Number(yield contract.methods.getTeeOffersSlotsCountTotal().call());
        });
    }
    /**
     * Function for fetching whether tee offer option exists or not
     * @param optionId - Option ID
     */
    static isOptionExists(optionId) {
        const contract = connectors_1.BlockchainConnector.getInstance().getContract();
        return contract.methods.isOptionExists(optionId).call();
    }
    /**
     * Function for fetching total count of options
     */
    static getOptionsCount() {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = connectors_1.BlockchainConnector.getInstance().getContract();
            return Number(yield contract.methods.getOptionsCount().call());
        });
    }
    /**
     * Function for fetching tee offer option by id
     * @param optionId - Option ID
     */
    static getOptionById(optionId) {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = connectors_1.BlockchainConnector.getInstance().getContract();
            return yield contract.methods
                .getOptionById(optionId)
                .call()
                .then((option) => (0, helper_1.formatTeeOfferOption)(option));
        });
    }
    static getSlotByExternalId(filter, fromBlock, toBlock) {
        return __awaiter(this, void 0, void 0, function* () {
            const founded = yield StaticModel_1.default.findItemsById('TeeSlotAdded', filter, fromBlock, toBlock);
            if (!founded)
                return null;
            return founded;
        });
    }
    static getOptionByExternalId(filter, fromBlock, toBlock) {
        return __awaiter(this, void 0, void 0, function* () {
            const founded = yield StaticModel_1.default.findItemsById('OptionAdded', filter, fromBlock, toBlock);
            if (!founded)
                return null;
            return founded;
        });
    }
    /**
     * Function for adding event listeners on onSlotAdded event in contract
     * @param creator - creator address
     * @param callback - function for processing created order
     * @returns unsubscribe - unsubscribe function from event
     */
    static onSlotAdded(callback, creator) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onTeeSlotAdded' });
        const subscription = contract.events.TeeSlotAdded();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            if (creator && parsedEvent.creator != creator) {
                return;
            }
            callback(parsedEvent.creator, parsedEvent.offerId, parsedEvent.slotId, (0, utils_1.parseBytes32String)(parsedEvent.externalId), {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    /**
     * Function for adding event listeners on onSlotUpdated event in contract
     * @param callback - function for processing created order
     * @returns unsubscribe - unsubscribe function from event
     */
    static onSlotUpdated(callback) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onTeeSlotUpdated' });
        const subscription = contract.events.TeeSlotUpdated();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            callback(parsedEvent.offerId, parsedEvent.slotId, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    /**
     * Function for adding event listeners on onSlotDeleted event in contract
     * @param callback - function for processing created order
     * @returns unsubscribe - unsubscribe function from event
     */
    static onSlotDeleted(callback) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onTeeSlotDeleted' });
        const subscription = contract.events.TeeSlotDeleted();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            callback(parsedEvent.offerId, parsedEvent.slotId, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    /**
     * Function for adding event listeners on OptionAdded event in contract
     * @param creator - creator address
     * @param callback - function for processing created order
     * @returns unsubscribe - unsubscribe function from event
     */
    static onOptionAdded(callback, creator) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onTeeOptionAddedCallback' });
        const subscription = contract.events.OptionAdded();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            if (creator && parsedEvent.creator != creator) {
                return;
            }
            callback(parsedEvent.creator, parsedEvent.teeOfferId, parsedEvent.optionId, (0, utils_1.parseBytes32String)(parsedEvent.externalId), {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    /**
     * Function for adding event listeners on OptionUpdated event in contract
     * @param teeOfferId - tee offer id
     * @param callback - function for processing created order
     * @returns unsubscribe - unsubscribe function from event
     */
    static onOptionUpdated(callback, teeOfferId) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onTeeOptionUpdatedCallback' });
        const subscription = contract.events.OptionUpdated();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            if (teeOfferId && event.returnValues.teeOfferId != (0, helper_1.convertBigIntToString)(teeOfferId)) {
                return;
            }
            callback(parsedEvent.teeOfferId, parsedEvent.optionId, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    /**
     * Function for adding event listeners on OptionDeleted event in contract
     * @param teeOfferId - tee offer id
     * @param callback - function for processing created order
     * @returns unsubscribe - unsubscribe function from event
     */
    static onOptionDeleted(callback, teeOfferId) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onTeeOptionDeletedCallback' });
        const subscription = contract.events.OptionDeleted();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            if (teeOfferId && parsedEvent.teeOfferId != (0, helper_1.convertBigIntToString)(teeOfferId)) {
                return;
            }
            callback(parsedEvent.teeOfferId, parsedEvent.optionId, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    /**
     * Function for adding event listeners on TEE offer created event in TEE offers factory contract
     * @param callback - function for processing created TEE offer
     * @returns unsubscribe - unsubscribe function from event
     */
    static onCreated(callback) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onTeeOfferCreated' });
        const subscription = contract.events.TeeOfferCreated();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            callback(parsedEvent.offerId, parsedEvent.creator, (0, utils_1.parseBytes32String)(parsedEvent.externalId), {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    static onViolationRateChanged(callback) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onTeeOfferViolationRateChanged' });
        const subscription = contract.events.TeeOfferViolationRateChanged();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            callback(parsedEvent.offerId, parsedEvent.providerAuth, parsedEvent.violationRate, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
}
TeeOffers.logger = logger_1.default.child({ className: 'TeeOffers' });
TeeOffers.teeOffers = [];
exports.default = TeeOffers;
//# sourceMappingURL=data:application/json;base64,