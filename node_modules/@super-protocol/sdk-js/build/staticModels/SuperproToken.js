"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = __importDefault(require("../logger"));
const abi_1 = require("../contracts/abi");
const store_1 = __importDefault(require("../store"));
const helper_1 = require("../utils/helper");
const TxManager_1 = __importDefault(require("../utils/TxManager"));
class SuperproToken {
    static get addressHttps() {
        return SuperproToken._addressHttps;
    }
    static set addressHttps(newAddress) {
        SuperproToken._addressHttps = newAddress;
        SuperproToken.contractHttps = new store_1.default.web3Https.eth.Contract(abi_1.abi, newAddress, {
            provider: store_1.default.web3Https.currentProvider,
            config: { contractDataInputFill: 'data' },
        });
    }
    static get addressWss() {
        return SuperproToken._addressWss;
    }
    static set addressWss(newAddress) {
        SuperproToken._addressWss = newAddress;
        SuperproToken.contractWss = new store_1.default.web3Wss.eth.Contract(abi_1.abi, newAddress, {
            provider: store_1.default.web3Wss.currentProvider,
            config: { contractDataInputFill: 'data' },
        });
    }
    /**
     * Checks if contract has been initialized, if not - initialize contract
     */
    static checkInit() {
        if (!SuperproToken.contractHttps) {
            throw Error(`SuperproToken must be initialized before it can be used`);
        }
        return SuperproToken.contractHttps;
    }
    /**
     * Checks if contract has been initialized with socket support
     */
    static checkWssInit() {
        return SuperproToken.contractWss;
    }
    /**
     * Fetching balance of SuperProtocol tokens on address
     */
    static balanceOf(address) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkInit();
            return (0, helper_1.convertBigIntToString)(yield this.contractHttps.methods.balanceOf(address).call());
        });
    }
    /**
     * Fetching allowance of SuperProtocol tokens on address
     */
    static allowance(from, to) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkInit();
            return (0, helper_1.convertBigIntToString)(yield this.contractHttps.methods.allowance(from, to).call());
        });
    }
    /**
     * Transfers specific amount of SP tokens to specific address
     * @param to - address to revive tokens
     * @param amount - amount of tokens to transfer
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    static transfer(to, amount, transactionOptions, checkTxBeforeSend = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = this.checkInit();
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            if (checkTxBeforeSend) {
                yield TxManager_1.default.dryRun(contract.methods.transfer(to, amount), transactionOptions);
            }
            const receipt = yield TxManager_1.default.execute(contract.methods.transfer(to, amount), transactionOptions, SuperproToken.addressHttps);
            return store_1.default.web3Https.eth.getTransaction(receipt.transactionHash);
        });
    }
    /**
     * Approve tokens for specific address
     * @param address - address for approval
     * @param amount - number of tokens to be approved
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    static approve(address, amount, transactionOptions, checkTxBeforeSend = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = this.checkInit();
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            if (checkTxBeforeSend) {
                yield TxManager_1.default.dryRun(contract.methods.approve(address, amount), transactionOptions);
            }
            yield TxManager_1.default.execute(contract.methods.approve(address, amount), transactionOptions, SuperproToken.addressHttps);
        });
    }
    static onTokenApprove(callback, owner, spender) {
        const contract = this.checkWssInit();
        const logger = this.logger.child({ method: 'onTokenApprove' });
        const subscription = contract.events.Approval();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            if (owner && parsedEvent.owner != owner) {
                return;
            }
            if (spender && parsedEvent.spender != spender) {
                return;
            }
            callback(parsedEvent.owner, parsedEvent.spender, parsedEvent.value, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    static onTokenTransfer(callback, from, to) {
        const contract = this.checkWssInit();
        const logger = this.logger.child({ method: 'onTokenTransfer' });
        const subscription = contract.events.Transfer();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            if (from && parsedEvent.from != from) {
                return;
            }
            if (to && parsedEvent.to != to) {
                return;
            }
            callback(parsedEvent.from, parsedEvent.to, parsedEvent.value, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
}
SuperproToken.logger = logger_1.default.child({ className: 'SuperproToken' });
exports.default = SuperproToken;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3VwZXJwcm9Ub2tlbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdGF0aWNNb2RlbHMvU3VwZXJwcm9Ub2tlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUNBLHVEQUFtQztBQUNuQywwQ0FBdUM7QUFDdkMscURBQTZCO0FBQzdCLDRDQUl5QjtBQUd6QixtRUFBMkM7QUFFM0MsTUFBTSxhQUFhO0lBT1YsTUFBTSxLQUFLLFlBQVk7UUFDNUIsT0FBTyxhQUFhLENBQUMsYUFBYSxDQUFDO0lBQ3JDLENBQUM7SUFFTSxNQUFNLEtBQUssWUFBWSxDQUFDLFVBQWtCO1FBQy9DLGFBQWEsQ0FBQyxhQUFhLEdBQUcsVUFBVSxDQUFDO1FBQ3pDLGFBQWEsQ0FBQyxhQUFhLEdBQUcsSUFBSSxlQUFLLENBQUMsU0FBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsU0FBRyxFQUFFLFVBQVUsRUFBRTtZQUMvRSxRQUFRLEVBQUUsZUFBSyxDQUFDLFNBQVUsQ0FBQyxlQUFlO1lBQzFDLE1BQU0sRUFBRSxFQUFFLHFCQUFxQixFQUFFLE1BQU0sRUFBRTtTQUMxQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sTUFBTSxLQUFLLFVBQVU7UUFDMUIsT0FBTyxhQUFhLENBQUMsV0FBVyxDQUFDO0lBQ25DLENBQUM7SUFFTSxNQUFNLEtBQUssVUFBVSxDQUFDLFVBQWtCO1FBQzdDLGFBQWEsQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDO1FBQ3ZDLGFBQWEsQ0FBQyxXQUFXLEdBQUcsSUFBSSxlQUFLLENBQUMsT0FBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsU0FBRyxFQUFFLFVBQVUsRUFBRTtZQUMzRSxRQUFRLEVBQUUsZUFBSyxDQUFDLE9BQVEsQ0FBQyxlQUFlO1lBQ3hDLE1BQU0sRUFBRSxFQUFFLHFCQUFxQixFQUFFLE1BQU0sRUFBRTtTQUMxQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFD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