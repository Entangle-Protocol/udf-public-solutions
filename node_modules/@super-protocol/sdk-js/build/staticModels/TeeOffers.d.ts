import { BlockInfo, TransactionOptions, HardwareInfo, TeeOfferInfo, OfferCreatedEvent, OptionAddedEvent, TeeSlotAddedEvent, TeeOfferOption, BlockchainId } from '../types';
declare class TeeOffers {
    private static cpuDenominator?;
    private static readonly logger;
    static teeOffers: BlockchainId[];
    static get address(): string;
    static packHardwareInfo(hw: HardwareInfo): Promise<HardwareInfo>;
    static unpackHardwareInfo(hw: HardwareInfo): Promise<HardwareInfo>;
    static getDenominator(): Promise<number>;
    /**
     * Function for fetching list of all TEE offers addresses
     */
    static getAll(): Promise<BlockchainId[]>;
    /**
     * Creates new TEE offer
     * @param providerAuthorityAccount - address of authority account of provider
     * @param teeOfferInfo - data of new TEE offer
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    static create(providerAuthorityAccount: string, teeOfferInfo: TeeOfferInfo, externalId?: string, enabled?: boolean, transactionOptions?: TransactionOptions): Promise<void>;
    static getByExternalId(filter: {
        externalId: string;
        creator?: string;
    }, fromBlock?: number | string, toBlock?: number | string): Promise<OfferCreatedEvent | null>;
    /**
     * Function for fetching TEE offer id by TEE deviceId
     * @param deviceId - unque TEE device id (unparsed, from blockchain)
     * @returns TEE offer id
     */
    static getByDeviceId(deviceId: string): Promise<BlockchainId>;
    /**
     * Function for fetching total count of tee offer slots
     */
    static getSlotsCount(): Promise<number>;
    /**
     * Function for fetching whether tee offer option exists or not
     * @param optionId - Option ID
     */
    static isOptionExists(optionId: BlockchainId): Promise<boolean>;
    /**
     * Function for fetching total count of options
     */
    static getOptionsCount(): Promise<number>;
    /**
     * Function for fetching tee offer option by id
     * @param optionId - Option ID
     */
    static getOptionById(optionId: BlockchainId): Promise<TeeOfferOption>;
    static getSlotByExternalId(filter: {
        externalId: string;
        creator?: string;
        offerId?: BlockchainId;
    }, fromBlock?: number | string, toBlock?: number | string): Promise<TeeSlotAddedEvent | null>;
    static getOptionByExternalId(filter: {
        externalId: string;
        creator?: string;
        teeOfferId?: BlockchainId;
    }, fromBlock?: number | string, toBlock?: number | string): Promise<OptionAddedEvent | null>;
    /**
     * Function for adding event listeners on onSlotAdded event in contract
     * @param creator - creator address
     * @param callback - function for processing created order
     * @returns unsubscribe - unsubscribe function from event
     */
    static onSlotAdded(callback: onTeeSlotAddedCallback, creator?: string): () => void;
    /**
     * Function for adding event listeners on onSlotUpdated event in contract
     * @param callback - function for processing created order
     * @returns unsubscribe - unsubscribe function from event
     */
    static onSlotUpdated(callback: onTeeSlotUpdatedCallback): () => void;
    /**
     * Function for adding event listeners on onSlotDeleted event in contract
     * @param callback - function for processing created order
     * @returns unsubscribe - unsubscribe function from event
     */
    static onSlotDeleted(callback: onTeeSlotDeletedCallback): () => void;
    /**
     * Function for adding event listeners on OptionAdded event in contract
     * @param creator - creator address
     * @param callback - function for processing created order
     * @returns unsubscribe - unsubscribe function from event
     */
    static onOptionAdded(callback: onTeeOptionAddedCallback, creator?: string): () => void;
    /**
     * Function for adding event listeners on OptionUpdated event in contract
     * @param teeOfferId - tee offer id
     * @param callback - function for processing created order
     * @returns unsubscribe - unsubscribe function from event
     */
    static onOptionUpdated(callback: onTeeOptionUpdatedCallback, teeOfferId?: BlockchainId): () => void;
    /**
     * Function for adding event listeners on OptionDeleted event in contract
     * @param teeOfferId - tee offer id
     * @param callback - function for processing created order
     * @returns unsubscribe - unsubscribe function from event
     */
    static onOptionDeleted(callback: onTeeOptionDeletedCallback, teeOfferId?: BlockchainId): () => void;
    /**
     * Function for adding event listeners on TEE offer created event in TEE offers factory contract
     * @param callback - function for processing created TEE offer
     * @returns unsubscribe - unsubscribe function from event
     */
    static onCreated(callback: onTeeOfferCreatedCallback): () => void;
    static onViolationRateChanged(callback: onTeeViolationRateChangedCallback): () => void;
}
export type onTeeOfferCreatedCallback = (offerId: BlockchainId, creator: string, externalId: string, block?: BlockInfo) => void;
export type onTeeViolationRateChangedCallback = (offerId: BlockchainId, providerAuth: string, violationRate: bigint | string, block?: BlockInfo) => void;
export type onTeeOptionAddedCallback = (creator: string, teeOfferId: BlockchainId, optionId: BlockchainId, externalId: string, block?: BlockInfo) => void;
export type onTeeOptionUpdatedCallback = (teeOfferId: BlockchainId, optionId: BlockchainId, block?: BlockInfo) => void;
export type onTeeOptionDeletedCallback = (teeOfferId: BlockchainId, optionId: BlockchainId, block?: BlockInfo) => void;
export type onTeeSlotAddedCallback = (creator: string, offerId: BlockchainId, slotId: BlockchainId, externalId: string, block?: BlockInfo) => void;
export type onTeeSlotUpdatedCallback = (offerId: BlockchainId, slotId: BlockchainId, block?: BlockInfo) => void;
export type onTeeSlotDeletedCallback = (offerId: BlockchainId, slotId: BlockchainId, block?: BlockInfo) => void;
export default TeeOffers;
