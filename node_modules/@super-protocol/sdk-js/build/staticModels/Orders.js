"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("ethers/lib/utils");
const logger_1 = __importDefault(require("../logger"));
const helper_1 = require("../utils/helper");
const Superpro_1 = __importDefault(require("./Superpro"));
const TxManager_1 = __importDefault(require("../utils/TxManager"));
const connectors_1 = require("../connectors");
const models_1 = require("../models");
const StaticModel_1 = __importDefault(require("./StaticModel"));
class Orders {
    static get address() {
        return Superpro_1.default.address;
    }
    /**
     * Function for fetching list of all orders ids
     * @returns list of orders ids
     */
    static getAll() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const contract = connectors_1.BlockchainConnector.getInstance().getContract();
            this.orders = (_a = this.orders) !== null && _a !== void 0 ? _a : [];
            const ordersSet = new Set(this.orders);
            const ordersCount = Number(yield contract.methods.getOrdersCount().call());
            for (let orderId = ordersSet.size + 1; orderId <= ordersCount; orderId++) {
                ordersSet.add(orderId.toString());
            }
            this.orders = Array.from(ordersSet);
            return this.orders;
        });
    }
    /**
     * Function for fetching orders count
     */
    static getCount() {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = connectors_1.BlockchainConnector.getInstance().getContract();
            return Number(yield contract.methods.getOrdersCount().call());
        });
    }
    /**
     * Function for creating orders
     * @param orderInfo - order info for new order
     * @param suspended - is orders suspended
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     * @returns {Promise<void>} - Does not return id of created order!
     */
    static createOrder(orderInfo, deposit, suspended = false, transactionOptions, checkTxBeforeSend = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = connectors_1.BlockchainConnector.getInstance().getContract();
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            deposit = deposit !== null && deposit !== void 0 ? deposit : '0';
            const orderInfoArguments = Object.assign(Object.assign({}, orderInfo), { externalId: (0, utils_1.formatBytes32String)(orderInfo.externalId) });
            if (checkTxBeforeSend) {
                yield TxManager_1.default.dryRun(contract.methods.createOrder(orderInfoArguments, deposit, suspended), transactionOptions);
            }
            yield TxManager_1.default.execute(contract.methods.createOrder(orderInfoArguments, deposit, suspended), transactionOptions);
        });
    }
    static getByExternalId(filter, fromBlock, toBlock) {
        return __awaiter(this, void 0, void 0, function* () {
            const founded = yield StaticModel_1.default.findItemsById('OrderCreated', filter, fromBlock, toBlock);
            if (!founded)
                return null;
            return founded;
        });
    }
    /**
     * Function for create workflow
     * @param parentOrderInfo - order info for new order
     * @param subOrdersInfo - array of sub orders infos
     * @param externalId - external id
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     * @returns {Promise<void>} - Does not return id of created order!
     */
    static createWorkflow(parentOrderInfo, subOrdersInfo, workflowDeposit, transactionOptions, checkTxBeforeSend = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = connectors_1.BlockchainConnector.getInstance().getContract();
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            workflowDeposit = workflowDeposit !== null && workflowDeposit !== void 0 ? workflowDeposit : '0';
            const parentOrderInfoArgs = Object.assign(Object.assign({}, parentOrderInfo), { externalId: (0, utils_1.formatBytes32String)(parentOrderInfo.externalId) });
            const subOrdersInfoArgs = subOrdersInfo.map((o) => (Object.assign(Object.assign({}, o), { externalId: (0, utils_1.formatBytes32String)(o.externalId) })));
            if (checkTxBeforeSend) {
                yield TxManager_1.default.dryRun(contract.methods.createWorkflow(parentOrderInfoArgs, workflowDeposit, subOrdersInfoArgs), transactionOptions);
            }
            yield TxManager_1.default.execute(contract.methods.createWorkflow(parentOrderInfoArgs, workflowDeposit, subOrdersInfoArgs), transactionOptions);
        });
    }
    /**
     * Function for cancel workflow
     * @param parentOrderId - Parent order id
     * @returns {Promise<void>} - Does not return id of created order!
     */
    static cancelWorkflow(perentOrderId, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = connectors_1.BlockchainConnector.getInstance().getContract();
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield TxManager_1.default.execute(contract.methods.cancelWorkflow(perentOrderId), transactionOptions);
        });
    }
    /**
     * Function for refilling order deposit
     * @param orderId - order id
     * @param amount - amount of tokens to refilling
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    static refillOrderDeposit(orderId, amount, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = connectors_1.BlockchainConnector.getInstance().getContract();
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield TxManager_1.default.execute(contract.methods.refillOrder(orderId, amount), transactionOptions);
        });
    }
    static unlockProfitByOrderList(orderIds, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = connectors_1.BlockchainConnector.getInstance().getContract();
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            let executedCount;
            try {
                executedCount = Number((yield TxManager_1.default.dryRun(contract.methods.unlockProfitByList(orderIds), transactionOptions)));
            }
            catch (e) {
                executedCount = 0;
            }
            if (executedCount === orderIds.length) {
                yield TxManager_1.default.execute(contract.methods.unlockProfitByList(orderIds), transactionOptions);
            }
            else {
                for (const orderId of orderIds) {
                    yield new models_1.Order(orderId).unlockProfit();
                }
            }
        });
    }
    /**
     * Function for adding event listeners on order created event in orders factory contract
     * @param callback - function for processing created order
     * @returns unsubscribe - unsubscribe function from event
     */
    static onCreated(callback) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onOrderCreated' });
        const subscription = contract.events.OrderCreated();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            callback(parsedEvent.consumer, (0, utils_1.parseBytes32String)(parsedEvent.externalId), parsedEvent.offerId, parsedEvent.parentOrderId, parsedEvent.orderId, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    /**
     * Function for adding event listeners on order started event in orders contract
     * @param callback - function for processing suborder filled event
     * @param orderId - order id
     * @returns unsubscribe - unsubscribe function from event
     */
    static onStarted(callback, orderId) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onOrderStarted' });
        const subscription = contract.events.OrderStarted();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            if (orderId && parsedEvent.orderId != (0, helper_1.convertBigIntToString)(orderId)) {
                return;
            }
            callback(parsedEvent.orderId, parsedEvent.consumer, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    /**
     * Function for adding event listeners on order updated status event in orders contract
     * @param callback - function for processing order updated status event
     * @param orderId - order id
     * @returns unsubscribe - unsubscribe function from event
     */
    static onStatusUpdated(callback, orderId) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onOrdersStatusUpdated' });
        const subscription = contract.events.OrderStatusUpdated();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            if (orderId && parsedEvent.orderId != (0, helper_1.convertBigIntToString)(orderId)) {
                return;
            }
            callback(parsedEvent.orderId, parsedEvent.status, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    /**
     * Function for adding event listeners on order refilled event in orders contract
     * @param callback - function for processing order refilled event
     * @param consumer - consumer address
     * @param orderId - order id
     * @returns unsubscribe - unsubscribe function from event
     */
    static onDepositRefilled(callback, consumer, orderId) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onOrderDepositRefilled' });
        const subscription = contract.events.OrderDepositRefilled();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            if (orderId && parsedEvent.orderId != (0, helper_1.convertBigIntToString)(orderId)) {
                return;
            }
            if (consumer && parsedEvent.consumer != consumer) {
                return;
            }
            callback(parsedEvent.orderId, parsedEvent.consumer, parsedEvent.amount, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    /**
     * Function for adding event listeners on order changed withdrawn event in orders contract
     * @param callback - function for processing order changed withdrawn event
     * @param orderId - order id
     * @returns unsubscribe - unsubscribe function from event
     */
    static onChangedWithdrawn(callback, orderId) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onOrderChangedWithdrawn' });
        const subscription = contract.events.OrderChangedWithdrawn();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            if (orderId && parsedEvent.orderId != (0, helper_1.convertBigIntToString)(orderId)) {
                return;
            }
            callback(parsedEvent.orderId, parsedEvent.consumer, parsedEvent.change, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    /**
     * Function for adding event listeners on order changed refunded event in orders contract
     * @param callback - function for processing order changed refunded event
     * @param tokenReceiver - token receiver address
     * @param orderId - order id
     * @returns unsubscribe - unsubscribe function from event
     */
    static onProfitWithdrawn(callback, orderId, tokenReceiver) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onOrderProfitWithdrawn' });
        const subscription = contract.events.OrderProfitWithdrawn();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            if (orderId && parsedEvent.orderId != (0, helper_1.convertBigIntToString)(orderId)) {
                return;
            }
            if (tokenReceiver && parsedEvent.tokenReceiver != tokenReceiver) {
                return;
            }
            callback(parsedEvent.orderId, parsedEvent.tokenReceiver, parsedEvent.profit, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    /**
     * Function for adding event listeners on order awaiting payment event in orders contract
     * @param callback - function for processing order awaiting payment event
     * @param consumer - order creator address
     * @param orderId - order id
     * @returns unsubscribe - unsubscribe function from event
     */
    static onAwaitingPaymentChanged(callback, consumer, orderId) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onOrderAwaitingPaymentChanged' });
        const subscription = contract.events.OrderAwaitingPaymentChanged();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            if (orderId && parsedEvent.orderId != (0, helper_1.convertBigIntToString)(orderId)) {
                return;
            }
            if (consumer && parsedEvent.consumer != consumer) {
                return;
            }
            callback(parsedEvent.orderId, parsedEvent.consumer, parsedEvent.awaitingPayment, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    /**
     * Function for adding event listeners on order encrypted result updated event in orders contract
     * @param callback - function for processing order encrypted result updated event
     * @param consumer - order creator address
     * @param orderId - order id
     * @returns unsubscribe - unsubscribe function from event
     */
    static onEncryptedResultUpdated(callback, consumer, orderId) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onOrderEncryptedResultUpdated' });
        const subscription = contract.events.OrderEncryptedResultUpdated();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            if (orderId && parsedEvent.orderId != (0, helper_1.convertBigIntToString)(orderId)) {
                return;
            }
            if (consumer && parsedEvent.consumer != consumer) {
                return;
            }
            callback(parsedEvent.orderId, parsedEvent.consumer, parsedEvent.encryptedResult, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    /**
     * Function for adding event listeners on OrderOptionsDepositSpentChanged event in orders contract
     * @param callback - function for processing order encrypted result updated event
     * @param consumer - order creator address
     * @param orderId - order id
     * @returns unsubscribe - unsubscribe function from event
     */
    static onOptionsDepositSpentChanged(callback, consumer, orderId) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onOrderOptionsDepositSpentChanged' });
        const subscription = contract.events.OrderOptionsDepositSpentChanged();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            if (orderId && parsedEvent.orderId != (0, helper_1.convertBigIntToString)(orderId)) {
                return;
            }
            if (consumer && parsedEvent.consumer != consumer) {
                return;
            }
            callback(parsedEvent.consumer, parsedEvent.orderId, parsedEvent.value, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    /**
     * Function for adding event listeners on onOrderProfitUnlocked event in orders contract
     * @param callback - function for processing order encrypted result updated event
     * @param tokenReceiver - tokenReceiver
     * @param orderId - order id
     * @returns unsubscribe - unsubscribe function from event
     */
    static onOProfitUnlocked(callback, tokenReceiver, orderId) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onOrderProfitUnlocked' });
        const subscription = contract.events.OrderProfitUnlocked();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            if (orderId && parsedEvent.orderId != (0, helper_1.convertBigIntToString)(orderId)) {
                return;
            }
            if (tokenReceiver && parsedEvent.tokenReceiver != tokenReceiver) {
                return;
            }
            callback(parsedEvent.tokenReceiver, parsedEvent.orderId, parsedEvent.profit, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
}
Orders.logger = logger_1.default.child({ className: 'Orders' });
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, String, Object, Object, Object]),
    __metadata("design:returntype", Promise)
], Orders, "createOrder", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object, Object]),
    __metadata("design:returntype", Promise)
], Orders, "getByExternalId", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Array, String, Object, Object]),
    __metadata("design:returntype", Promise)
], Orders, "createWorkflow", null);
exports.default = Orders;
//# sourceMappingURL=data:application/json;base64,