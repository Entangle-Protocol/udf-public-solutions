import { OrderInfo, OrderStatus, BlockInfo, TransactionOptions, OrderCreatedEvent, BlockchainId, TokenAmount } from '../types';
import StaticModel from './StaticModel';
declare class Orders implements StaticModel {
    private static readonly logger;
    static orders?: BlockchainId[];
    static get address(): string;
    /**
     * Function for fetching list of all orders ids
     * @returns list of orders ids
     */
    static getAll(): Promise<BlockchainId[]>;
    /**
     * Function for fetching orders count
     */
    static getCount(): Promise<number>;
    /**
     * Function for creating orders
     * @param orderInfo - order info for new order
     * @param suspended - is orders suspended
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     * @returns {Promise<void>} - Does not return id of created order!
     */
    static createOrder(orderInfo: OrderInfo, deposit?: TokenAmount, suspended?: boolean, transactionOptions?: TransactionOptions, checkTxBeforeSend?: boolean): Promise<void>;
    static getByExternalId(filter: {
        externalId: string;
        consumer?: string;
    }, fromBlock?: number | string, toBlock?: number | string): Promise<OrderCreatedEvent | null>;
    /**
     * Function for create workflow
     * @param parentOrderInfo - order info for new order
     * @param subOrdersInfo - array of sub orders infos
     * @param externalId - external id
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     * @returns {Promise<void>} - Does not return id of created order!
     */
    static createWorkflow(parentOrderInfo: OrderInfo, subOrdersInfo: OrderInfo[], workflowDeposit: TokenAmount, transactionOptions?: TransactionOptions, checkTxBeforeSend?: boolean): Promise<void>;
    /**
     * Function for cancel workflow
     * @param parentOrderId - Parent order id
     * @returns {Promise<void>} - Does not return id of created order!
     */
    static cancelWorkflow(perentOrderId: BlockchainId, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Function for refilling order deposit
     * @param orderId - order id
     * @param amount - amount of tokens to refilling
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    static refillOrderDeposit(orderId: BlockchainId, amount: TokenAmount, transactionOptions?: TransactionOptions): Promise<void>;
    static unlockProfitByOrderList(orderIds: BlockchainId[], transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Function for adding event listeners on order created event in orders factory contract
     * @param callback - function for processing created order
     * @returns unsubscribe - unsubscribe function from event
     */
    static onCreated(callback: onOrderCreatedCallback): () => void;
    /**
     * Function for adding event listeners on order started event in orders contract
     * @param callback - function for processing suborder filled event
     * @param orderId - order id
     * @returns unsubscribe - unsubscribe function from event
     */
    static onStarted(callback: onOrderStartedCallback, orderId?: bigint): () => void;
    /**
     * Function for adding event listeners on order updated status event in orders contract
     * @param callback - function for processing order updated status event
     * @param orderId - order id
     * @returns unsubscribe - unsubscribe function from event
     */
    static onStatusUpdated(callback: onOrdersStatusUpdatedCallback, orderId?: BlockchainId): () => void;
    /**
     * Function for adding event listeners on order refilled event in orders contract
     * @param callback - function for processing order refilled event
     * @param consumer - consumer address
     * @param orderId - order id
     * @returns unsubscribe - unsubscribe function from event
     */
    static onDepositRefilled(callback: onOrderDepositRefilledCallback, consumer?: string, orderId?: BlockchainId): () => void;
    /**
     * Function for adding event listeners on order changed withdrawn event in orders contract
     * @param callback - function for processing order changed withdrawn event
     * @param orderId - order id
     * @returns unsubscribe - unsubscribe function from event
     */
    static onChangedWithdrawn(callback: onOrderChangedWithdrawnCallback, orderId?: BlockchainId): () => void;
    /**
     * Function for adding event listeners on order changed refunded event in orders contract
     * @param callback - function for processing order changed refunded event
     * @param tokenReceiver - token receiver address
     * @param orderId - order id
     * @returns unsubscribe - unsubscribe function from event
     */
    static onProfitWithdrawn(callback: onOrderProfitWithdrawnCallback, orderId?: BlockchainId, tokenReceiver?: string): () => void;
    /**
     * Function for adding event listeners on order awaiting payment event in orders contract
     * @param callback - function for processing order awaiting payment event
     * @param consumer - order creator address
     * @param orderId - order id
     * @returns unsubscribe - unsubscribe function from event
     */
    static onAwaitingPaymentChanged(callback: onOrderAwaitingPaymentChangedCallback, consumer?: string, orderId?: BlockchainId): () => void;
    /**
     * Function for adding event listeners on order encrypted result updated event in orders contract
     * @param callback - function for processing order encrypted result updated event
     * @param consumer - order creator address
     * @param orderId - order id
     * @returns unsubscribe - unsubscribe function from event
     */
    static onEncryptedResultUpdated(callback: onOrderEncryptedResultUpdatedCallback, consumer?: string, orderId?: BlockchainId): () => void;
    /**
     * Function for adding event listeners on OrderOptionsDepositSpentChanged event in orders contract
     * @param callback - function for processing order encrypted result updated event
     * @param consumer - order creator address
     * @param orderId - order id
     * @returns unsubscribe - unsubscribe function from event
     */
    static onOptionsDepositSpentChanged(callback: onOrderOptionsDepositSpentChangedCallback, consumer?: string, orderId?: BlockchainId): () => void;
    /**
     * Function for adding event listeners on onOrderProfitUnlocked event in orders contract
     * @param callback - function for processing order encrypted result updated event
     * @param tokenReceiver - tokenReceiver
     * @param orderId - order id
     * @returns unsubscribe - unsubscribe function from event
     */
    static onOProfitUnlocked(callback: onOrderProfitUnlockedCallback, tokenReceiver?: string, orderId?: BlockchainId): () => void;
}
export type onOrderStartedCallback = (orderId: BlockchainId, consumer: string, block?: BlockInfo) => void;
export type onOrdersStatusUpdatedCallback = (orderId: BlockchainId, status: OrderStatus, block?: BlockInfo) => void;
export type onOrderCreatedCallback = (consumer: string, externalId: string, offerId: BlockchainId, parentOrderId: BlockchainId, orderId: BlockchainId, block?: BlockInfo) => void;
export type onOrderDepositRefilledCallback = (orderId: BlockchainId, consumer: string, amount: TokenAmount, block?: BlockInfo) => void;
export type onOrderChangedWithdrawnCallback = (orderId: BlockchainId, consumer: string, change: TokenAmount, block?: BlockInfo) => void;
export type onOrderProfitWithdrawnCallback = (orderId: BlockchainId, tokenReceiver: string, profit: TokenAmount, block?: BlockInfo) => void;
export type onOrderAwaitingPaymentChangedCallback = (orderId: BlockchainId, consumer: string, awaitingPaymentFlag: boolean, block?: BlockInfo) => void;
export type onOrderEncryptedResultUpdatedCallback = (orderId: BlockchainId, consumer: string, encryptedResult: string, block?: BlockInfo) => void;
export type onOrderOptionsDepositSpentChangedCallback = (consumer: string, orderId: BlockchainId, value: TokenAmount, block?: BlockInfo) => void;
export type onOrderProfitUnlockedCallback = (tokenReceiver: string, orderId: BlockchainId, profit: TokenAmount, block?: BlockInfo) => void;
export default Orders;
