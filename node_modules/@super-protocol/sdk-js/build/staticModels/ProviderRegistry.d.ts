import { ProviderInfo, BlockInfo, TransactionOptions, TokenAmount } from '../types';
declare class ProviderRegistry {
    private static readonly logger;
    static providers?: string[];
    /**
     * Function for fetching list of all providers addresses
     */
    static getAllProviders(): Promise<string[]>;
    /**
     * Fetch provider security deposit by provider authority account
     */
    static getSecurityDeposit(providerAuthority: string): Promise<TokenAmount>;
    static isProviderRegistered(providerAuthority: string): Promise<boolean>;
    /**
     * Refills security provider deposit
     * Call this function with provider authority account (in transactionOptions)
     * @param amount - amount of additional tokens
     * @param recipient - target provider authority address
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    static refillSecurityDepositFor(amount: TokenAmount, recipient: string, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Reg new provider
     * @param providerInfo - data of new provider
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    static registerProvider(providerInfo: ProviderInfo, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Refills security deposit for provider
     * Call this function with provider authority account (in transactionOptions)
     * @param amount - amount of additional tokens
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    static refillSecurityDeposit(amount: TokenAmount, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Return security deposit for provider
     * Call this function with provider authority account (in transactionOptions)
     * @param amount - amount of tokens to return
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    static returnSecurityDeposit(amount: TokenAmount, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Function for adding event listeners on provider registered event in provider registry
     * @param callback - function for processing new provider
     * @returns unsubscribe - unsubscribe function from event
     */
    static onProviderRegistered(callback: onProviderRegisteredCallback): () => void;
    /**
     * Function for adding event listeners on provider modified event in provider registry
     * @param callback - function for processing modified provider
     * @returns unsubscribe - unsubscribe function from event
     */
    static onProviderModified(callback: onProviderModifiedCallback): () => void;
    /**
     * Function for adding event listeners on provider violation rate incremented event in provider registry
     * @param callback - function for processing new violation rate
     * @returns unsubscribe - unsubscribe function from event
     */
    static onProviderViolationRateIncremented(callback: onProviderViolationRateIncrementedCallback): () => void;
    /**
     * Function for adding event listeners on provider security deposit refilled event in provider registry
     * @param callback - function for processing refilled security deposit
     * @returns unsubscribe - unsubscribe function from event
     */
    static onProviderSecurityDepoRefilled(callback: onProviderSecurityDepoRefilledCallback): () => void;
    /**
     * Function for adding event listeners on provider security deposit unlocked event in provider registry
     * @param callback - function for processing unlocked security deposit
     * @returns unsubscribe - unsubscribe function from event
     */
    static onProviderSecurityDepoUnlocked(callback: onProviderSecurityDepoUnlockedCallback): () => void;
}
export type onProviderRegisteredCallback = (address: string, block?: BlockInfo) => void;
export type onProviderModifiedCallback = (address: string, block?: BlockInfo) => void;
export type onProviderSecurityDepoRefilledCallback = (address: string, amount: TokenAmount, block?: BlockInfo) => void;
export type onProviderSecurityDepoUnlockedCallback = (address: string, amount: TokenAmount, block?: BlockInfo) => void;
export type onProviderViolationRateIncrementedCallback = (address: string, newViolationRate: bigint | string, block?: BlockInfo) => void;
export default ProviderRegistry;
