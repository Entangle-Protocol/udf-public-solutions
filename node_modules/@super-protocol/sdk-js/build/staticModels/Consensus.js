"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = __importDefault(require("../logger"));
const TCB_1 = __importDefault(require("../models/TCB"));
const Superpro_1 = __importDefault(require("./Superpro"));
const helper_1 = require("../utils/helper");
const TxManager_1 = __importDefault(require("../utils/TxManager"));
const connectors_1 = require("../connectors");
class Consensus {
    static get address() {
        return Superpro_1.default.address;
    }
    /**
     * Function for fetching list of all tcb ids
     * @returns list of tcb ids
     */
    static getAllTcbs() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const contract = connectors_1.BlockchainConnector.getInstance().getContract();
            const tcbSet = new Set((_a = this.tcbIds) !== null && _a !== void 0 ? _a : []);
            const tcbsCount = Number(yield contract.methods.getTcbsCount().call());
            for (let tcbId = tcbSet.size + 1; tcbId <= tcbsCount; tcbId++) {
                tcbSet.add(tcbId.toString());
            }
            this.tcbIds = Array.from(tcbSet);
            return this.tcbIds;
        });
    }
    static getEpochTime(time) {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = connectors_1.BlockchainConnector.getInstance().getContract();
            const response = yield contract.methods.getEpochTime(time).call();
            return {
                epochStart: Number(response[0]),
                epochEnd: Number(response[1]),
                epochIndex: Number(response[2]),
            };
        });
    }
    static getEpoch(epochIndex) {
        const contract = connectors_1.BlockchainConnector.getInstance().getContract();
        return contract.methods
            .getEpoch(epochIndex)
            .call()
            .then((epoch) => (0, helper_1.cleanWeb3Data)(epoch));
    }
    static getSuspiciousBlockTable() {
        const contract = connectors_1.BlockchainConnector.getInstance().getContract();
        return contract.methods.getSuspiciousBlockTable().call();
    }
    static unlockProfitByTcbList(tcbIds, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = connectors_1.BlockchainConnector.getInstance().getContract();
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            let executedCount;
            try {
                executedCount = Number((yield TxManager_1.default.dryRun(contract.methods.unlockTcbRewardByList(tcbIds), transactionOptions)));
            }
            catch (e) {
                executedCount = 0;
            }
            if (executedCount === tcbIds.length) {
                yield TxManager_1.default.execute(contract.methods.unlockTcbRewardByList(tcbIds), transactionOptions);
            }
            else {
                for (const tcbId of tcbIds) {
                    yield new TCB_1.default(tcbId).unlockRewards();
                }
            }
        });
    }
    static getSuspiciousBlockTableSize() {
        const contract = connectors_1.BlockchainConnector.getInstance().getContract();
        return contract.methods
            .getSuspiciousBlockTableSize()
            .call()
            .then((size) => size.toString());
    }
    static getLastBlockTable() {
        const contract = connectors_1.BlockchainConnector.getInstance().getContract();
        return contract.methods
            .getLastBlockTable()
            .call()
            .then((ids) => ids.map((id) => id.toString()));
    }
    static getLastBlockTableSize() {
        const contract = connectors_1.BlockchainConnector.getInstance().getContract();
        return contract.methods
            .getLastBlockTableSize()
            .call()
            .then((size) => size.toString());
    }
    static getConstants() {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = connectors_1.BlockchainConnector.getInstance().getContract();
            const response = yield contract.methods.getConsensusConstants().call();
            return response;
        });
    }
    static onTcbBanned(callback) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onTcbBanned' });
        const subscription = contract.events.TcbBanned();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            callback(parsedEvent.tcbId, parsedEvent.provider, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    static onTcbCompleted(callback) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onTcbCompleted' });
        const subscription = contract.events.TcbCompleted();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            callback(parsedEvent.tcbId, parsedEvent.provider, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    static onTcbInitialized(callback) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onTcbInitialized' });
        const subscription = contract.events.TcbInitialized();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            callback(parsedEvent.tcbId, parsedEvent.provider, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    static onTcbBenchmarkChanged(callback) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onTcbBenchmarkChanged' });
        const subscription = contract.events.TcbBenchmarkChanged();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            callback(parsedEvent.tcbId, parsedEvent.provider, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    static onRewardsClaimed(callback) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onRewardsClaimed' });
        const subscription = contract.events.RewardsClaimed();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            callback(parsedEvent.tcbId, parsedEvent.amount, parsedEvent.claimer, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    static onTcbRewardUnlocked(callback) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onTcbRewardUnlocked' });
        const subscription = contract.events.TcbRewardUnlocked();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            callback(parsedEvent.tcbId, parsedEvent.rewards, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
}
Consensus.logger = logger_1.default.child({ className: 'Consensus' });
exports.default = Consensus;
//# sourceMappingURL=data:application/json;base64,