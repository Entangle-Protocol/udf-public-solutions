"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = __importDefault(require("../logger"));
const StaticModel_1 = __importDefault(require("./StaticModel"));
const helper_1 = require("../utils/helper");
const utils_1 = require("ethers/lib/utils");
const types_1 = require("../types");
const Superpro_1 = __importDefault(require("./Superpro"));
const TxManager_1 = __importDefault(require("../utils/TxManager"));
const connectors_1 = require("../connectors");
class Offers {
    static get address() {
        return Superpro_1.default.address;
    }
    /**
     * Function for fetching list of all offers ids
     */
    static getAll() {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = connectors_1.BlockchainConnector.getInstance().getContract();
            const count = Number(yield contract.methods.getOffersTotalCount().call());
            this.offers = this.offers || [];
            const offersSet = new Set(this.offers);
            for (let offerId = offersSet.size + 1; offerId <= count; ++offerId) {
                const offerType = (yield contract.methods.getOfferType(offerId).call()).toString();
                if (offerType !== types_1.OfferType.TeeOffer) {
                    offersSet.add(offerId.toString());
                }
            }
            this.offers = Array.from(offersSet);
            return this.offers;
        });
    }
    /**
     * Function for fetching total count of value offer slots
     */
    static getSlotsCount() {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = connectors_1.BlockchainConnector.getInstance().getContract();
            return Number(yield contract.methods.getValueOffersSlotsCount().call());
        });
    }
    /**
     * Creates new offer
     * @param providerAuthorityAccount - address of authority account of provider
     * @param offerInfo - data of new offer
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    static create(providerAuthorityAccount, offerInfo, externalId = 'default', enabled = true, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = connectors_1.BlockchainConnector.getInstance().getContract();
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            const formattedExternalId = (0, utils_1.formatBytes32String)(externalId);
            yield TxManager_1.default.execute(contract.methods.createValueOffer(providerAuthorityAccount, offerInfo, formattedExternalId, enabled), transactionOptions);
        });
    }
    static getByExternalId(filter, fromBlock, toBlock) {
        return __awaiter(this, void 0, void 0, function* () {
            const founded = yield StaticModel_1.default.findItemsById('OfferCreated', filter, fromBlock, toBlock);
            if (!founded)
                return null;
            return founded;
        });
    }
    static getSlotByExternalId(filter, fromBlock, toBlock) {
        return __awaiter(this, void 0, void 0, function* () {
            const found = yield StaticModel_1.default.findItemsById('ValueSlotAdded', filter, fromBlock, toBlock);
            if (!found)
                return null;
            return found;
        });
    }
    /**
     * Function for adding event listeners on onSlotAdded event in contract
     * @param creator - creator address
     * @param callback - function for processing created order
     * @returns unsubscribe - unsubscribe function from event
     */
    static onSlotAdded(callback, creator) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onValueSlotAdded' });
        const subscription = contract.events.ValueSlotAdded();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            if (creator && parsedEvent.creator != creator) {
                return;
            }
            callback(parsedEvent.creator, parsedEvent.offerId, parsedEvent.slotId, (0, utils_1.parseBytes32String)(parsedEvent.externalId), {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    /**
     * Function for adding event listeners on onSlotUpdated event in contract
     * @param callback - function for processing created order
     * @returns unsubscribe - unsubscribe function from event
     */
    static onSlotUpdated(callback) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onValueSlotUpdated' });
        const subscription = contract.events.ValueSlotUpdated();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            callback(parsedEvent.offerId, parsedEvent.slotId, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    /**
     * Function for adding event listeners on onSlotDeleted event in contract
     * @param callback - function for processing created order
     * @returns unsubscribe - unsubscribe function from event
     */
    static onSlotDeleted(callback) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onValueSlotDeleted' });
        const subscription = contract.events.ValueSlotDeleted();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            callback(parsedEvent.offerId, parsedEvent.slotId, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    /**
     * Function for adding event listeners on offer created event in offers factory contract
     * @param callback - function for processing created offer
     * @returns unsubscribe - unsubscribe function from event
     */
    static onCreated(callback) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onOfferCreated' });
        const subscription = contract.events.OfferCreated();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            callback(parsedEvent.offerId, parsedEvent.creator, (0, utils_1.parseBytes32String)(parsedEvent.externalId), {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    static onEnabled(callback) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onOfferEnabled' });
        const subscription = contract.events.OfferEnabled();
        subscription.on('data', (event) => {
            callback(event.returnValues.providerAuth, event.returnValues.offerId, event.returnValues.offerType, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    static onDisabled(callback) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onOfferDisabled' });
        const subscription = contract.events.OfferDisabled();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            callback(parsedEvent.providerAuth, parsedEvent.offerId, parsedEvent.offerType, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
}
Offers.logger = logger_1.default.child({ className: 'Offers' });
exports.default = Offers;
//# sourceMappingURL=data:application/json;base64,