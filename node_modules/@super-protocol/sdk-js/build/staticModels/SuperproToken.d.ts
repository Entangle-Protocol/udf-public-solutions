import { Transaction } from 'web3';
import { TransactionOptions, BlockInfo, TokenAmount } from '../types';
declare class SuperproToken {
    private static _addressHttps;
    private static _addressWss;
    private static contractHttps?;
    private static contractWss?;
    private static readonly logger;
    static get addressHttps(): string;
    static set addressHttps(newAddress: string);
    static get addressWss(): string;
    static set addressWss(newAddress: string);
    /**
     * Checks if contract has been initialized, if not - initialize contract
     */
    private static checkInit;
    /**
     * Checks if contract has been initialized with socket support
     */
    private static checkWssInit;
    /**
     * Fetching balance of SuperProtocol tokens on address
     */
    static balanceOf(address: string): Promise<TokenAmount>;
    /**
     * Fetching allowance of SuperProtocol tokens on address
     */
    static allowance(from: string, to: string): Promise<TokenAmount>;
    /**
     * Transfers specific amount of SP tokens to specific address
     * @param to - address to revive tokens
     * @param amount - amount of tokens to transfer
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    static transfer(to: string, amount: TokenAmount, transactionOptions?: TransactionOptions, checkTxBeforeSend?: boolean): Promise<Transaction>;
    /**
     * Approve tokens for specific address
     * @param address - address for approval
     * @param amount - number of tokens to be approved
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    static approve(address: string, amount: TokenAmount, transactionOptions?: TransactionOptions, checkTxBeforeSend?: boolean): Promise<void>;
    static onTokenApprove(callback: onTokenApproveCallback, owner?: string, spender?: string): () => void;
    static onTokenTransfer(callback: onTokenTransferCallback, from?: string, to?: string): () => void;
}
export type onTokenApproveCallback = (owner: string, spender: string, value: TokenAmount, block?: BlockInfo) => void;
export type onTokenTransferCallback = (from: string, to: string, value: TokenAmount, block?: BlockInfo) => void;
export default SuperproToken;
