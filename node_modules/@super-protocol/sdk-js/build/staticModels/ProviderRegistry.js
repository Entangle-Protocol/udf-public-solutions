"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = __importDefault(require("../logger"));
const helper_1 = require("../utils/helper");
const connectors_1 = require("../connectors");
const TxManager_1 = __importDefault(require("../utils/TxManager"));
class ProviderRegistry {
    /**
     * Function for fetching list of all providers addresses
     */
    static getAllProviders() {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = connectors_1.BlockchainConnector.getInstance().getContract();
            this.providers = yield contract.methods.getProvidersAuths().call();
            return this.providers;
        });
    }
    /**
     * Fetch provider security deposit by provider authority account
     */
    static getSecurityDeposit(providerAuthority) {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = connectors_1.BlockchainConnector.getInstance().getContract();
            return (0, helper_1.convertBigIntToString)(yield contract.methods.getProviderSecurityDeposit(providerAuthority).call());
        });
    }
    static isProviderRegistered(providerAuthority) {
        const contract = connectors_1.BlockchainConnector.getInstance().getContract();
        return contract.methods.isProviderRegistered(providerAuthority).call();
    }
    /**
     * Refills security provider deposit
     * Call this function with provider authority account (in transactionOptions)
     * @param amount - amount of additional tokens
     * @param recipient - target provider authority address
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    static refillSecurityDepositFor(amount, recipient, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = connectors_1.BlockchainConnector.getInstance().getContract();
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield TxManager_1.default.execute(contract.methods.refillProviderSecurityDepoFor(recipient, amount), transactionOptions);
        });
    }
    /**
     * Reg new provider
     * @param providerInfo - data of new provider
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    static registerProvider(providerInfo, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = connectors_1.BlockchainConnector.getInstance().getContract();
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield TxManager_1.default.execute(contract.methods.registerProvider(providerInfo), transactionOptions);
        });
    }
    /**
     * Refills security deposit for provider
     * Call this function with provider authority account (in transactionOptions)
     * @param amount - amount of additional tokens
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    static refillSecurityDeposit(amount, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = connectors_1.BlockchainConnector.getInstance().getContract();
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield TxManager_1.default.execute(contract.methods.refillProviderSecurityDepo(amount), transactionOptions);
        });
    }
    /**
     * Return security deposit for provider
     * Call this function with provider authority account (in transactionOptions)
     * @param amount - amount of tokens to return
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    static returnSecurityDeposit(amount, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = connectors_1.BlockchainConnector.getInstance().getContract();
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield TxManager_1.default.execute(contract.methods.returnProviderSecurityDepo(amount), transactionOptions);
        });
    }
    /**
     * Function for adding event listeners on provider registered event in provider registry
     * @param callback - function for processing new provider
     * @returns unsubscribe - unsubscribe function from event
     */
    static onProviderRegistered(callback) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onProviderRegistered' });
        const subscription = contract.events.ProviderRegistered();
        subscription.on('data', (event) => {
            callback(event.returnValues.auth, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    /**
     * Function for adding event listeners on provider modified event in provider registry
     * @param callback - function for processing modified provider
     * @returns unsubscribe - unsubscribe function from event
     */
    static onProviderModified(callback) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onProviderModified' });
        const subscription = contract.events.ProviderModified();
        subscription.on('data', (event) => {
            callback(event.returnValues.auth, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    /**
     * Function for adding event listeners on provider violation rate incremented event in provider registry
     * @param callback - function for processing new violation rate
     * @returns unsubscribe - unsubscribe function from event
     */
    static onProviderViolationRateIncremented(callback) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onProviderViolationRateIncremented' });
        const subscription = contract.events.ProviderViolationRateIncremented();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            callback(parsedEvent.auth, parsedEvent.newViolationRate, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    /**
     * Function for adding event listeners on provider security deposit refilled event in provider registry
     * @param callback - function for processing refilled security deposit
     * @returns unsubscribe - unsubscribe function from event
     */
    static onProviderSecurityDepoRefilled(callback) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onProviderSecurityDepoRefilled' });
        const subscription = contract.events.ProviderSecurityDepoRefilled();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            callback(parsedEvent.auth, parsedEvent.amount, {
                index: Number(event.blockNumber),
                hash: event.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
    /**
     * Function for adding event listeners on provider security deposit unlocked event in provider registry
     * @param callback - function for processing unlocked security deposit
     * @returns unsubscribe - unsubscribe function from event
     */
    static onProviderSecurityDepoUnlocked(callback) {
        const contract = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const logger = this.logger.child({ method: 'onProviderSecurityDepoUnlocked' });
        const subscription = contract.events.ProviderSecurityDepoUnlocked();
        subscription.on('data', (event) => {
            const parsedEvent = (0, helper_1.cleanWeb3Data)(event.returnValues);
            callback(parsedEvent.auth, parsedEvent.amount, {
                index: Number(event.blockNumber),
                hash: parsedEvent.blockHash,
            });
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
}
ProviderRegistry.logger = logger_1.default.child({ className: 'ProviderRegistry' });
exports.default = ProviderRegistry;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvdmlkZXJSZWdpc3RyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdGF0aWNNb2RlbHMvUHJvdmlkZXJSZWdpc3RyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLHVEQUFtQztBQUNuQyw0Q0FJeUI7QUFHekIsOENBQThFO0FBQzlFLG1FQUEyQztBQUUzQyxNQUFNLGdCQUFnQjtJQUtwQjs7T0FFRztJQUNJLE1BQU0sQ0FBTyxlQUFlOztZQUNqQyxNQUFNLFFBQVEsR0FBRyxnQ0FBbUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNqRSxJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sUUFBUSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1lBRW5FLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN4QixDQUFDO0tBQUE7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBTyxrQkFBa0IsQ0FBQyxpQkFBeUI7O1lBQzlELE1BQU0sUUFBUSxHQUFHLGdDQUFtQixDQUFDLFdBQVcsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBRWpFLE9BQU8sSUFBQSw4QkFBcUIsRUFDMUIsTUFBTSxRQUFRLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDLGlCQUFpQixDQUFDLENBQUMsSUFBSSxFQUFFLENBQzVFLENBQUM7UUFDSixDQUFDO0tBQUE7SUFFTSxNQUFNLENBQUMsb0JBQW9CLENBQUMsaUJBQXlCO1FBQzFELE1BQU0sUUFBUSxHQUFHLGdDQUFtQixDQUFDLFdBQVcsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRWpFLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3pFLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSSxNQUFNLENBQU8sd0JBQXdCLENBQzFD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