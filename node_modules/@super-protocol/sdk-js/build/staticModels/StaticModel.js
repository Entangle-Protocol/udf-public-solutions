"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("ethers/lib/utils");
const BlockchainConnector_1 = __importDefault(require("../connectors/BlockchainConnector"));
const logger_1 = __importDefault(require("../logger"));
const helper_1 = require("../utils/helper");
class StaticModel {
    static findItemsById(eventName, filter, fromBlock, toBlock) {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = BlockchainConnector_1.default.getInstance().getContract();
            const options = { filter };
            if (!(0, helper_1.isValidBytes32Hex)(filter.externalId)) {
                options.filter.externalId = (0, utils_1.formatBytes32String)(filter.externalId);
            }
            if (fromBlock)
                options.fromBlock = fromBlock;
            if (toBlock)
                options.toBlock = toBlock;
            const foundIds = yield contract.getPastEvents(eventName, options);
            if (!foundIds.length) {
                return null;
            }
            if (foundIds.length > 1) {
                StaticModel.logger.warn({ eventName, foundIds }, `More than one item found, please refine your filters!`);
            }
            const parsedEvent = (0, helper_1.cleanWeb3Data)(foundIds[0].returnValues);
            parsedEvent.externalId = (0, utils_1.parseBytes32String)(parsedEvent.externalId);
            return parsedEvent;
        });
    }
}
StaticModel.logger = logger_1.default.child({ className: 'Offers' });
exports.default = StaticModel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RhdGljTW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc3RhdGljTW9kZWxzL1N0YXRpY01vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNENBQTJFO0FBRTNFLDRGQUFvRTtBQUVwRSx1REFBbUM7QUFDbkMsNENBQW1FO0FBUW5FLE1BQU0sV0FBVztJQUdSLE1BQU0sQ0FBTyxhQUFhLENBQy9CLFNBQTJDLEVBQzNDLE1BQTRCLEVBQzVCLFNBQTJCLEVBQzNCLE9BQXlCOztZQUV6QixNQUFNLFFBQVEsR0FBRyw2QkFBbUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNqRSxNQUFNLE9BQU8sR0FBaUIsRUFBRSxNQUFNLEVBQUUsQ0FBQztZQUN6QyxJQUFJLENBQUMsSUFBQSwwQkFBaUIsRUFBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUU7Z0JBQ3pDLE9BQU8sQ0FBQyxNQUFPLENBQUMsVUFBVSxHQUFHLElBQUEsMkJBQW1CLEVBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQ3JFO1lBQ0QsSUFBSSxTQUFTO2dCQUFFLE9BQU8sQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1lBQzdDLElBQUksT0FBTztnQkFBRSxPQUFPLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztZQUV2QyxNQUFNLFFBQVEsR0FBRyxNQUFNLFFBQVEsQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ2xFLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO2dCQUNwQixPQUFPLElBQUksQ0FBQzthQUNiO1lBQ0QsSUFBSSxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDdkIsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3JCLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxFQUN2Qix1REFBdUQsQ0FDeEQsQ0FBQzthQUNIO1lBRUQsTUFBTSxXQUFXLEdBQUcsSUFBQSxzQkFBYSxFQUM5QixRQUFRLENBQUMsQ0FBQyxDQUFjLENBQUMsWUFBNkIsQ0FDcEIsQ0FBQztZQUN0QyxXQUFXLENBQUMsVUFBVSxHQUFHLElBQUEsMEJBQWtCLEVBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBRXBFLE9BQU8sV0FBVyxDQUFDO1FBQ3JCLENBQUM7S0FBQTs7QUFqQ3VCLGtCQUFNLEdBQUcsZ0JBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztBQW9DN0Usa0JBQWUsV0FBVyxDQUFDIn0=