"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuoteValidator = void 0;
const axios_1 = __importDefault(require("axios"));
const elliptic_1 = require("elliptic");
const node_forge_1 = require("node-forge");
const x509_1 = require("@fidm/x509");
const js_encoding_utils_1 = require("js-encoding-utils");
const pkijs_1 = require("pkijs");
const asn1js_1 = require("asn1js");
const lodash_1 = __importDefault(require("lodash"));
const QuoteParser_1 = require("./QuoteParser");
const logger_1 = __importDefault(require("../logger"));
const errors_1 = require("./errors");
const statuses_1 = require("./statuses");
const dto_js_1 = require("@super-protocol/dto-js");
const crypto_1 = __importDefault(require("../crypto"));
const DEFAULT_BASE_SGX_URL = 'https://api.trustedservices.intel.com';
const INTEL_SGX_ROOT_CA_URL = 'https://certificates.trustedservices.intel.com/IntelSGXRootCA.der';
const SGX_OID = '1.2.840.113741.1.13.1';
const FMSPC_OID = `${SGX_OID}.4`;
const PCEID_OID = `${SGX_OID}.3`;
const TCB_OID = `${SGX_OID}.2`;
const PCESVN_OID = `${TCB_OID}.17`;
const INTEL_ROOT_PUB_KEY = new Uint8Array([
    4, 11, 169, 196, 192, 192, 200, 97, 147, 163, 254, 35, 214, 176, 44, 218, 16, 168, 187, 212, 232,
    142, 72, 180, 69, 133, 97, 163, 110, 112, 85, 37, 245, 103, 145, 142, 46, 220, 136, 228, 13, 134,
    11, 208, 204, 78, 226, 106, 172, 201, 136, 229, 5, 169, 83, 85, 140, 69, 63, 107, 9, 4, 174, 115,
    148,
]);
class QuoteValidator {
    constructor(baseUrl) {
        this.isDefault = !baseUrl;
        this.baseUrl = `${this.isDefault ? DEFAULT_BASE_SGX_URL : baseUrl}/sgx/certification/v4`;
        this.teeSgxParser = new QuoteParser_1.TeeSgxParser();
        this.logger = logger_1.default.child({ className: QuoteValidator.name });
    }
    splitChain(chain) {
        const begin = '-----BEGIN CERTIFICATE-----';
        const end = '-----END CERTIFICATE-----';
        return chain
            .split(begin)
            .filter(Boolean)
            .map((cert) => begin.concat(cert.slice(0, cert.indexOf(end)), end));
    }
    findSequenceByOID(hexValue, targetOID) {
        const buffer = node_forge_1.util.hexToBytes(hexValue);
        const asn1Data = node_forge_1.asn1.fromDer(buffer);
        return this.searchForSequence(asn1Data, targetOID);
    }
    searchForSequence(asn1Data, targetOID) {
        if (asn1Data.type === node_forge_1.asn1.Type.SEQUENCE) {
            for (const child of asn1Data.value) {
                if (child.type === node_forge_1.asn1.Type.OID) {
                    const oid = node_forge_1.asn1.derToOid(child.value);
                    if (oid === targetOID) {
                        return asn1Data;
                    }
                }
            }
        }
        if (Array.isArray(asn1Data.value)) {
            for (const child of asn1Data.value) {
                const result = this.searchForSequence(child, targetOID);
                if (result) {
                    return result;
                }
            }
        }
        return null;
    }
    verifyDataBySignature(data, signature, key) {
        const ellipticEc = new elliptic_1.ec('p256');
        const result = ellipticEc.verify(data, {
            r: signature.subarray(0, 32),
            s: signature.subarray(32),
        }, ellipticEc.keyFromPublic(key, 'hex'));
        return result;
    }
    checkValidDate(from, to) {
        const now = Date.now();
        return from < now && now < to;
    }
    checkChainForIssuers(pckCert, platformCert, rootCert) {
        return (lodash_1.default.isEqual(pckCert.issuer, platformCert.subject) &&
            lodash_1.default.isEqual(platformCert.issuer, rootCert.subject));
    }
    getCrl(crlData) {
        const crlDer = crlData.startsWith('-----')
            ? js_encoding_utils_1.formatter.pemToBin(crlData)
            : Buffer.from(crlData, 'hex');
        const crlAsn = (0, asn1js_1.fromBER)(crlDer);
        return new pkijs_1.CertificateRevocationList({ schema: crlAsn.result });
    }
    checkCertificatesInCrl(crl, certIds) {
        if (!crl.thisUpdate || !crl.nextUpdate) {
            throw new errors_1.TeeQuoteValidatorError('Certificate revocation list has no update date field');
        }
        if (!this.checkValidDate(crl.thisUpdate.value.valueOf(), crl.nextUpdate.value.valueOf())) {
            throw new errors_1.TeeQuoteValidatorError('Certificate revocation list has invalid update date');
        }
        if (crl.revokedCertificates) {
            const isAnyRevoked = crl.revokedCertificates.find((revoked) => certIds.includes(Buffer.from(revoked.userCertificate.valueBlock.valueHexView).toString('hex')));
            if (isAnyRevoked) {
                throw new errors_1.TeeQuoteValidatorError('Certificate in revokation list');
            }
        }
    }
    getCertificates(quote) {
        return __awaiter(this, void 0, void 0, function* () {
            const platformCrlResult = yield axios_1.default.get(`${this.baseUrl}/pckcrl?ca=platform&encoding=pem`);
            const platformChain = decodeURIComponent(platformCrlResult.headers['sgx-pck-crl-issuer-chain']);
            const [platformFetchedPem, rootFetchedPem] = this.splitChain(platformChain); // [platform, root]
            const platformFetchedCert = x509_1.Certificate.fromPEM(Buffer.from(platformFetchedPem));
            const rootFetchedCert = x509_1.Certificate.fromPEM(Buffer.from(rootFetchedPem));
            if (!this.checkValidDate(platformFetchedCert.validFrom.valueOf(), platformFetchedCert.validTo.valueOf())) {
                throw new errors_1.TeeQuoteValidatorError('Platform certificate validation date is not valid');
            }
            if (!this.checkValidDate(rootFetchedCert.validFrom.valueOf(), rootFetchedCert.validTo.valueOf())) {
                throw new errors_1.TeeQuoteValidatorError('Root certificate validation date is not valid');
            }
            if (!lodash_1.default.isEqual(rootFetchedCert.issuer, rootFetchedCert.subject)) {
                throw new errors_1.TeeQuoteValidatorError('Root certificate is not self-signed');
            }
            if (Buffer.compare(rootFetchedCert.publicKey.keyRaw, INTEL_ROOT_PUB_KEY) !== 0) {
                throw new errors_1.TeeQuoteValidatorError('Wrong Intel root certificate public key');
            }
            const certificatePems = this.splitChain(quote.qeCertificationData.toString()); // [pck, platform, root]
            const pckCert = x509_1.Certificate.fromPEM(Buffer.from(certificatePems[0]));
            const certType = quote.qeCertificationDataType;
            if (!this.checkValidDate(pckCert.validFrom.valueOf(), pckCert.validTo.valueOf())) {
                throw new errors_1.TeeQuoteValidatorError('PCK certificate validation date is not valid');
            }
            if (certType !== 5) {
                throw new errors_1.TeeQuoteValidatorError(`Unsupported certification data type: ${certType}`);
            }
            if (rootFetchedPem !== certificatePems[2]) {
                throw new errors_1.TeeQuoteValidatorError("Invalid SGX root certificate in quote's certificate chain");
            }
            if (!this.checkChainForIssuers(pckCert, platformFetchedCert, rootFetchedCert)) {
                throw new errors_1.TeeQuoteValidatorError('Invalid issuers in certificates chain');
            }
            const certIds = [
                rootFetchedCert.serialNumber,
                platformFetchedCert.serialNumber,
                pckCert.serialNumber,
            ];
            if (this.isDefault) {
                const intelCrlDer = yield axios_1.default.get(INTEL_SGX_ROOT_CA_URL, {
                    responseType: 'arraybuffer',
                });
                const intelCrlAsn = (0, asn1js_1.fromBER)(Buffer.from(intelCrlDer.data));
                this.checkCertificatesInCrl(new pkijs_1.CertificateRevocationList({ schema: intelCrlAsn.result }), certIds);
            }
            else {
                const intelCrlDer = yield axios_1.default.get(`${this.baseUrl}/rootcacrl`);
                const intelCrl = this.getCrl(intelCrlDer.data);
                this.checkCertificatesInCrl(intelCrl, certIds);
            }
            const platformCrl = this.getCrl(platformCrlResult.data);
            this.checkCertificatesInCrl(platformCrl, certIds);
            return { pckCert, rootCertPem: rootFetchedPem };
        });
    }
    verifyQeReportSignature(quote, pckPublicKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const signature = Buffer.from(quote.qeReportSignature);
            const reportHash = yield this.getSha256Hash(Buffer.from(quote.qeReport));
            return this.verifyDataBySignature(reportHash, signature, pckPublicKey);
        });
    }
    verifyQeReportData(quote, report) {
        return __awaiter(this, void 0, void 0, function* () {
            const qeAuthData = quote.qeAuthenticationData;
            const attestationKey = quote.ecdsaAttestationKey;
            const qeReportDataHash = report.dataHash;
            const calculatedHash = yield this.getSha256Hash(Buffer.concat([attestationKey, qeAuthData]));
            const result = Buffer.compare(qeReportDataHash, calculatedHash);
            return result === 0;
        });
    }
    verifyEnclaveReportSignature(quote) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = Buffer.from(quote.ecdsaAttestationKey);
            const headerBuffer = Buffer.from(quote.rawHeader);
            const reportBuffer = Buffer.from(quote.report);
            const expected = quote.isvEnclaveReportSignature;
            const calculatedHash = yield this.getSha256Hash(Buffer.concat([headerBuffer, reportBuffer]));
            const ellipticEc = new elliptic_1.ec('p256');
            const result = ellipticEc.verify(calculatedHash, {
                r: expected.subarray(0, 32),
                s: expected.subarray(32),
            }, Buffer.concat([Buffer.from([4]), key]));
            return result;
        });
    }
    validateQuoteStructure(quote, report, pckPublicKey) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!(yield this.verifyQeReportSignature(quote, pckPublicKey))) {
                throw new errors_1.TeeQuoteValidatorError('Wrong QE report signature');
            }
            if (!(yield this.verifyQeReportData(quote, report))) {
                throw new errors_1.TeeQuoteValidatorError('Wrong QE report data');
            }
            if (!(yield this.verifyEnclaveReportSignature(quote))) {
                throw new errors_1.TeeQuoteValidatorError('Wrong enclave report signature');
            }
        });
    }
    getSgxExtensionData(pckCert) {
        const sgxExtensionData = pckCert.extensions.find((item) => item.oid === SGX_OID);
        if (!sgxExtensionData) {
            throw new errors_1.TeeQuoteValidatorError('SGX data not found in PCK certificate');
        }
        return sgxExtensionData;
    }
    getDataFromExtension(sgxExtensionData, targetOid, targetType) {
        const rawData = this.findSequenceByOID(sgxExtensionData.value.toString('hex'), targetOid);
        if (!rawData) {
            throw new errors_1.TeeQuoteValidatorError(`OID ${targetOid} not found in PCK certificate's SGX data`);
        }
        const data = rawData.value.filter((asnElement) => asnElement.type === targetType);
        if (!data.length) {
            throw new errors_1.TeeQuoteValidatorError(`Data on OID ${targetOid} of type ${targetType} not found`);
        }
        const result = node_forge_1.util.bytesToHex(data[0].value);
        return targetType === node_forge_1.asn1.Type.OCTETSTRING ? result : parseInt(result, 16).toString();
    }
    getTcbInfo(fmspc, rootCertPem) {
        return __awaiter(this, void 0, void 0, function* () {
            const tcbData = yield axios_1.default.get(`${this.baseUrl}/tcb?fmspc=${fmspc}`);
            const tcbInfoHeader = 'tcb-info-issuer-chain';
            const tcbInfoChain = this.splitChain(decodeURIComponent(tcbData.headers[tcbInfoHeader])); // [tcb, root]
            if (tcbInfoChain[1] !== rootCertPem) {
                throw new errors_1.TeeQuoteValidatorError('Invalid SGX root certificate in TCB chain');
            }
            const tcbCert = x509_1.Certificate.fromPEM(Buffer.from(tcbInfoChain[0]));
            const key = tcbCert.publicKey.keyRaw;
            const signature = Buffer.from(tcbData.data.signature, 'hex');
            const calculatedhash = yield this.getSha256Hash(Buffer.from(JSON.stringify(tcbData.data.tcbInfo)));
            const result = this.verifyDataBySignature(calculatedhash, signature, key);
            if (!result) {
                throw new errors_1.TeeQuoteValidatorError('TCB info signature is not valid');
            }
            if (tcbData.data.tcbInfo.nextUpdate.valueOf() > Date.now()) {
                throw new errors_1.TeeQuoteValidatorError('TCB next update date is out of date');
            }
            return tcbData.data;
        });
    }
    getQEIdentity(rootCertPem) {
        return __awaiter(this, void 0, void 0, function* () {
            const qeIdentityData = yield axios_1.default.get(`${this.baseUrl}/qe/identity`);
            const qeIdentityHeader = 'sgx-enclave-identity-issuer-chain';
            const qeIdentityChain = this.splitChain(decodeURIComponent(qeIdentityData.headers[qeIdentityHeader])); // [qeIdentity, root]
            if (qeIdentityChain[1] !== rootCertPem) {
                throw new errors_1.TeeQuoteValidatorError('Invalid SGX root certificate in enclave identity chain');
            }
            const qeIdentityCert = x509_1.Certificate.fromPEM(Buffer.from(qeIdentityChain[0]));
            const key = qeIdentityCert.publicKey.keyRaw;
            const signature = Buffer.from(qeIdentityData.data.signature, 'hex');
            const calculatedhash = yield this.getSha256Hash(Buffer.from(JSON.stringify(qeIdentityData.data.enclaveIdentity)));
            const result = this.verifyDataBySignature(calculatedhash, signature, key);
            if (!result) {
                throw new errors_1.TeeQuoteValidatorError('Enclave identity signature is not valid');
            }
            if (qeIdentityData.data.enclaveIdentity.nextUpdate.valueOf() > Date.now()) {
                throw new errors_1.TeeQuoteValidatorError('Enclave identity next update date is out of date');
            }
            return qeIdentityData.data;
        });
    }
    getQEIdentityStatus(report, qeIdentity) {
        const mrSigner = report.mrSigner.toString('hex');
        if (mrSigner.toUpperCase() !== qeIdentity.enclaveIdentity.mrsigner) {
            throw new errors_1.TeeQuoteValidatorError('Wrong MR signer in QE report');
        }
        if (report.isvProdId !== qeIdentity.enclaveIdentity.isvprodid) {
            throw new errors_1.TeeQuoteValidatorError('Wrong ISV PROD ID in QE report');
        }
        const tcbLevel = qeIdentity.enclaveIdentity.tcbLevels.find((tcbLevel) => tcbLevel.tcb.isvsvn <= report.isvSvn);
        const status = tcbLevel === null || tcbLevel === void 0 ? void 0 : tcbLevel.tcbStatus;
        if (status) {
            this.logger.info(`Enclave identity status is ${tcbLevel === null || tcbLevel === void 0 ? void 0 : tcbLevel.tcbStatus}`);
            return status;
        }
        return statuses_1.QEIdentityStatuses.OutOfDate;
    }
    getTcbStatus(fmspc, pceId, tcbData, sgxExtensionData) {
        if (fmspc.toUpperCase() !== tcbData.tcbInfo.fmspc.toUpperCase()) {
            throw new errors_1.TeeQuoteValidatorError('Wrong FMSPC in PCK certificate');
        }
        if (pceId !== tcbData.tcbInfo.pceId) {
            throw new errors_1.TeeQuoteValidatorError('Wrong PCEID in PCK certificate');
        }
        const pceSvn = this.getDataFromExtension(sgxExtensionData, PCESVN_OID, node_forge_1.asn1.Type.INTEGER);
        const sgxComponents = [...Array(16).keys()].map((i) => this.getDataFromExtension(sgxExtensionData, `${TCB_OID}.${i + 1}`, node_forge_1.asn1.Type.INTEGER));
        const tcbLevel = tcbData.tcbInfo.tcbLevels.find((tcbLevel) => tcbLevel.tcb.pcesvn <= Number(pceSvn) &&
            tcbLevel.tcb.sgxtcbcomponents.every((el, index) => el.svn <= Number(sgxComponents[index])));
        const status = tcbLevel === null || tcbLevel === void 0 ? void 0 : tcbLevel.tcbStatus;
        if (status) {
            this.logger.info(`TCB status is ${tcbLevel === null || tcbLevel === void 0 ? void 0 : tcbLevel.tcbStatus}`);
            return status;
        }
        return statuses_1.TCBStatuses.OutOfDate;
    }
    getQuoteValidationStatus(qeIdentityStatus, tcbStatus) {
        if (qeIdentityStatus === statuses_1.QEIdentityStatuses.OutOfDate) {
            if (tcbStatus === statuses_1.TCBStatuses.UpToDate || tcbStatus === statuses_1.TCBStatuses.SWHardeningNeeded) {
                return statuses_1.QuoteValidationStatuses.SecurityPatchNeeded;
            }
            if (tcbStatus === statuses_1.TCBStatuses.OutOfDateConfigurationNeeded ||
                tcbStatus === statuses_1.TCBStatuses.ConfigurationAndSWHardeningNeeded) {
                return statuses_1.QuoteValidationStatuses.SoftwareUpdateNeeded;
            }
        }
        if (qeIdentityStatus === statuses_1.QEIdentityStatuses.Revoked || tcbStatus === statuses_1.TCBStatuses.Revoked) {
            throw new errors_1.TeeQuoteValidatorError('QE identity or TCB revoked');
        }
        if (tcbStatus === statuses_1.TCBStatuses.UpToDate) {
            return statuses_1.QuoteValidationStatuses.UpToDate;
        }
        if (tcbStatus === statuses_1.TCBStatuses.OutOfDate) {
            return statuses_1.QuoteValidationStatuses.SecurityPatchNeeded;
        }
        if (tcbStatus === statuses_1.TCBStatuses.ConfigurationNeeded) {
            return statuses_1.QuoteValidationStatuses.ConfigurationNeeded;
        }
        return statuses_1.QuoteValidationStatuses.SoftwareUpdateNeeded;
    }
    getQuoteValidationStatusDescription(status) {
        switch (status) {
            case statuses_1.QuoteValidationStatuses.UpToDate:
                return 'The Quote verification passed and is at the latest TCB level.';
            case statuses_1.QuoteValidationStatuses.ConfigurationNeeded:
                return `The SGX platform firmware and SW are at the latest security patching level
                    but there are platform hardware configurations may expose the enclave to vulnerabilities.`;
            case statuses_1.QuoteValidationStatuses.SecurityPatchNeeded:
                return `The SGX platform firmware and SW are not at the latest security patching level.
                    The platform needs to be patched with firmware and/or software patches.`;
            case statuses_1.QuoteValidationStatuses.SoftwareUpdateNeeded:
                return `The SGX platform firmware and SW are at the latest security patching level but there are
                    certain vulnerabilities that can only be mitigated with software mitigations implemented by the enclave.`;
            default:
                return 'Quote verification failed.';
        }
    }
    validate(quoteBuffer) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const quote = this.teeSgxParser.parseQuote(quoteBuffer);
                const report = this.teeSgxParser.parseReport(quote.qeReport);
                const { pckCert, rootCertPem } = yield this.getCertificates(quote);
                yield this.validateQuoteStructure(quote, report, pckCert.publicKey.keyRaw);
                this.logger.info('Quote structure validated successfully');
                const sgxExtensionData = this.getSgxExtensionData(pckCert);
                const fmspc = this.getDataFromExtension(sgxExtensionData, FMSPC_OID, node_forge_1.asn1.Type.OCTETSTRING);
                const pceId = this.getDataFromExtension(sgxExtensionData, PCEID_OID, node_forge_1.asn1.Type.OCTETSTRING);
                const tcbData = yield this.getTcbInfo(fmspc, rootCertPem);
                const qeIdentity = yield this.getQEIdentity(rootCertPem);
                const qeIdentityStatus = this.getQEIdentityStatus(report, qeIdentity);
                const tcbStatus = this.getTcbStatus(fmspc, pceId, tcbData, sgxExtensionData);
                const quoteValidationStatus = this.getQuoteValidationStatus(qeIdentityStatus, tcbStatus);
                this.logger.info(`Quote validation status is ${quoteValidationStatus}`);
                return {
                    quoteValidationStatus,
                    description: this.getQuoteValidationStatusDescription(quoteValidationStatus),
                };
            }
            catch (error) {
                this.logger.error(`Validation error: ${error}`);
                return {
                    quoteValidationStatus: statuses_1.QuoteValidationStatuses.Error,
                    description: this.getQuoteValidationStatusDescription(statuses_1.QuoteValidationStatuses.Error),
                    error,
                };
            }
        });
    }
    isQuoteHasUserData(quoteBuffer, userDataBuffer) {
        return __awaiter(this, void 0, void 0, function* () {
            const quote = this.teeSgxParser.parseQuote(quoteBuffer);
            const report = this.teeSgxParser.parseReport(quote.report);
            const userDataHash = yield this.getSha256Hash(userDataBuffer);
            const slicedQuoteData = report.userData.slice(0, userDataHash.length);
            const compareResult = Buffer.compare(slicedQuoteData, userDataHash);
            return compareResult === 0;
        });
    }
    getSha256Hash(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const hashInfo = {
                algo: dto_js_1.HashAlgorithm.SHA256,
                encoding: dto_js_1.Encoding.base64,
            };
            const hashData = yield crypto_1.default.createHash(data, hashInfo);
            return Buffer.from(hashData.hash, hashData.encoding);
        });
    }
}
exports.QuoteValidator = QuoteValidator;
//# sourceMappingURL=data:application/json;base64,