"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeeSgxParser = void 0;
const x509_1 = require("@fidm/x509");
const asn1js = __importStar(require("asn1js"));
const pkijs = __importStar(require("pkijs"));
const buffer_1 = require("buffer/");
const errors_1 = require("./errors");
const helpers_1 = require("./helpers");
class TeeSgxParser {
    getDataAndAdvance(blob, size) {
        const buf = buffer_1.Buffer.from(blob.data.subarray(0, size));
        blob.data = buffer_1.Buffer.from(blob.data.subarray(size));
        return buf;
    }
    extractRS(cert) {
        const derSignature = Buffer.from(cert.signatureValue.valueBlock.valueHexView).toString('hex');
        const parsedSignature = helpers_1.Signature.importFromDER(derSignature);
        return {
            r: parsedSignature.r,
            s: parsedSignature.s,
            derSignature,
        };
    }
    parsePem(pem) {
        const cert = x509_1.Certificate.fromPEM(Buffer.from(pem));
        const asn1Certificate = asn1js.fromBER(cert.raw);
        const certificate = new pkijs.Certificate({ schema: asn1Certificate.result });
        const tbs = certificate.tbsView;
        const { r, s } = this.extractRS(certificate);
        const publicKey = cert.publicKey.keyRaw.toString('hex').slice(2);
        const splitedTbs = Buffer.from(tbs).toString('hex').split(publicKey);
        const x509PublicKey = '0x' + publicKey;
        const x509Signature = '0x' + r + s;
        return {
            bodyPartOne: '0x' + splitedTbs[0],
            publicKey: x509PublicKey,
            bodyPartTwo: '0x' + splitedTbs[1],
            signature: x509Signature,
        };
    }
    parseQuote(data) {
        const { quoteHeaderSize, pceSvnOffset, reportSize, userDataOffset, userDataSize, ecdsaP256SignatureSize, ecdsaP256PublicKeySize, } = TeeSgxParser;
        if (data.length < quoteHeaderSize + reportSize) {
            throw new errors_1.TeeQuoteParserError('data has invalid length');
        }
        const quoteRemainder = { data: buffer_1.Buffer.from(data) };
        const quoteHeader = this.getDataAndAdvance(quoteRemainder, quoteHeaderSize);
        const report = this.getDataAndAdvance(quoteRemainder, reportSize);
        const version = quoteHeader.readUInt16LE(0);
        const attestationKeyType = quoteHeader.readUInt16LE(2);
        if (attestationKeyType > 3) {
            throw new errors_1.TeeQuoteParserError('quote header has invalid or unsupported attestation key type');
        }
        const pceSvn = quoteHeader.readUInt16LE(pceSvnOffset);
        const userData = quoteHeader.slice(userDataOffset, userDataOffset + userDataSize);
        const quoteSignatureDateLen = quoteRemainder.data.readUInt32LE(0);
        quoteRemainder.data = buffer_1.Buffer.from(quoteRemainder.data.subarray(4));
        if (quoteSignatureDateLen != quoteRemainder.data.length) {
            throw new errors_1.TeeQuoteParserError(`quoteSignatureDateLen has invalid length: ${quoteRemainder.data.length} instead of ${quoteSignatureDateLen} expected`);
        }
        const rawQuoteSignatureDataRemainder = {
            data: this.getDataAndAdvance(quoteRemainder, quoteSignatureDateLen),
        };
        const isvEnclaveReportSignature = this.getDataAndAdvance(rawQuoteSignatureDataRemainder, ecdsaP256SignatureSize);
        const ecdsaAttestationKey = this.getDataAndAdvance(rawQuoteSignatureDataRemainder, ecdsaP256PublicKeySize);
        const qeReport = this.getDataAndAdvance(rawQuoteSignatureDataRemainder, reportSize);
        const qeReportSignature = this.getDataAndAdvance(rawQuoteSignatureDataRemainder, ecdsaP256SignatureSize);
        const qeAuthenticationDataSize = rawQuoteSignatureDataRemainder.data.readUInt16LE(0);
        rawQuoteSignatureDataRemainder.data = buffer_1.Buffer.from(rawQuoteSignatureDataRemainder.data.subarray(2));
        if (rawQuoteSignatureDataRemainder.data.length < qeAuthenticationDataSize) {
            throw new errors_1.TeeQuoteParserError(`qeAuthenticationDataSize has invalid length: ${rawQuoteSignatureDataRemainder.data.length} instead of ${qeAuthenticationDataSize} expected`);
        }
        const qeAuthenticationData = this.getDataAndAdvance(rawQuoteSignatureDataRemainder, qeAuthenticationDataSize);
        const qeCertificationDataType = rawQuoteSignatureDataRemainder.data.readUInt16LE(0);
        if (qeCertificationDataType < 1 || qeCertificationDataType > 7) {
            throw new errors_1.TeeQuoteParserError(`certificationDataType has invalid value: ${qeCertificationDataType}`);
        }
        const certificationDataSize = rawQuoteSignatureDataRemainder.data.readUInt32LE(2);
        const qeCertificationData = rawQuoteSignatureDataRemainder.data.subarray(2 + 4);
        if (certificationDataSize != qeCertificationData.length) {
            throw new errors_1.TeeQuoteParserError(`certificationDataSize has invalid length: $PqeCertificationData.length} instead of ${certificationDataSize} expected`);
        }
        const certsPems = (0, helpers_1.splitChain)(qeCertificationData.toString()); // [device, platform, root]
        const certsData = certsPems.map((pem) => this.parsePem(pem));
        return {
            rawHeader: quoteHeader,
            header: {
                version,
                attestationKeyType,
                pceSvn,
                userData,
            },
            report,
            isvEnclaveReportSignature,
            ecdsaAttestationKey,
            qeReport,
            qeReportSignature,
            qeAuthenticationData,
            qeCertificationDataType,
            qeCertificationData,
            certificates: {
                device: {
                    pem: certsPems[0],
                    x509Data: certsData[0],
                },
                platform: {
                    pem: certsPems[1],
                    x509Data: certsData[1],
                },
                root: {
                    pem: certsPems[2],
                    x509Data: certsData[2],
                },
            },
        };
    }
    parseReport(data) {
        const { reportSize, cpuSvnSize, reportMrEnclaveOffset, reportMrEnclaveSize, reportMrSignerOffset, reportMrSignerSize, reportIsvProdIdOffset, reportIsvProdIdSize, reportIsvSvnOffset, reportIsvSvnSize, reportDataOffset, reportUserDataSize, reportUserDataSHA256Size, } = TeeSgxParser;
        if (data.length < reportSize) {
            throw new errors_1.TeeQuoteParserError('data has invalid length');
        }
        const report = buffer_1.Buffer.from(data);
        const cpuSvn = report.slice(0, cpuSvnSize).toString('hex');
        const mrEnclave = report.slice(reportMrEnclaveOffset, reportMrEnclaveOffset + reportMrEnclaveSize);
        const mrSigner = report.slice(reportMrSignerOffset, reportMrSignerOffset + reportMrSignerSize);
        const isvProdId = report
            .slice(reportIsvProdIdOffset, reportIsvProdIdOffset + reportIsvProdIdSize)
            .readUInt16LE(0);
        const isvSvn = report
            .slice(reportIsvSvnOffset, reportIsvSvnOffset + reportIsvSvnSize)
            .readUInt16LE(0);
        const userData = report.slice(reportDataOffset, reportDataOffset + reportUserDataSize);
        const dataHash = report.slice(reportDataOffset, reportDataOffset + reportUserDataSHA256Size);
        return {
            cpuSvn,
            mrEnclave,
            mrSigner,
            isvProdId,
            isvSvn,
            userData,
            dataHash,
        };
    }
}
exports.TeeSgxParser = TeeSgxParser;
TeeSgxParser.quoteHeaderSize = 48;
TeeSgxParser.pceSvnOffset = 10;
TeeSgxParser.reportSize = 384;
TeeSgxParser.userDataOffset = 28;
TeeSgxParser.userDataSize = 20;
TeeSgxParser.cpuSvnSize = 16;
TeeSgxParser.reportMrEnclaveOffset = 64;
TeeSgxParser.reportMrEnclaveSize = 32;
TeeSgxParser.reportMrSignerOffset = TeeSgxParser.reportMrEnclaveOffset + TeeSgxParser.reportMrEnclaveSize + /* reserved */ 32;
TeeSgxParser.reportMrSignerSize = 32;
TeeSgxParser.reportIsvProdIdOffset = TeeSgxParser.reportMrSignerOffset + TeeSgxParser.reportMrSignerSize + /* reserved */ 96;
TeeSgxParser.reportIsvProdIdSize = 2;
TeeSgxParser.reportIsvSvnOffset = TeeSgxParser.reportIsvProdIdOffset + TeeSgxParser.reportIsvProdIdSize;
TeeSgxParser.reportIsvSvnSize = 2;
TeeSgxParser.reportDataOffset = TeeSgxParser.reportIsvSvnOffset + TeeSgxParser.reportIsvSvnSize + /* reserved */ 60;
TeeSgxParser.reportUserDataSize = 64;
TeeSgxParser.reportUserDataSHA256Size = 32; /* 64 in report, but we need 32 only for sha256 hash */
TeeSgxParser.ecdsaP256SignatureSize = 64;
TeeSgxParser.ecdsaP256PublicKeySize = 64;
//# sourceMappingURL=data:application/json;base64,