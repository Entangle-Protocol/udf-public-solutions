"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const TxManager_1 = __importDefault(require("../utils/TxManager"));
const connectors_1 = require("../connectors");
const helper_1 = require("../utils/helper");
class TCB {
    constructor(tcbId) {
        this.tcbId = tcbId;
        if (!TCB.contract) {
            TCB.contract = connectors_1.BlockchainConnector.getInstance().getContract();
        }
    }
    applyTcbMarks(marks, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            yield TxManager_1.default.execute(TCB.contract.methods.applyTcbMarks(marks, this.tcbId), transactionOptions);
        });
    }
    setTcbData(pb, quote, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            const fromattedDeviceId = (0, helper_1.packDeviceId)(pb.deviceID);
            yield TxManager_1.default.execute(TCB.contract.methods.setTcbData(this.tcbId, pb.benchmark, pb.properties, fromattedDeviceId, quote), transactionOptions);
        });
    }
    /**
     * Add data to TeeConfirmationBlock and push it to Consensus
     * @param pb - struct of 'processed' data
     * @param quote - data generated from Enclave
     * @param marks - list of marks
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    addToSupply(pb, quote, marks, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield this.setTcbData(pb, quote, transactionOptions);
            yield this.applyTcbMarks(marks, transactionOptions);
            yield TxManager_1.default.execute(TCB.contract.methods.addTcbToSupply(this.tcbId), transactionOptions);
        });
    }
    /**
     * Assign TCB from SuspiciousBlocks table to check
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    assignSuspiciousBlocksToCheck(transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            yield TxManager_1.default.execute(TCB.contract.methods.assignSuspiciousBlocksToCheck(this.tcbId), transactionOptions);
        });
    }
    /**
     * Assign TCB from LastBlocks table to check
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    assignLastBlocksToCheck(transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            yield TxManager_1.default.execute(TCB.contract.methods.assignLastBlocksToCheck(this.tcbId), transactionOptions);
        });
    }
    /**
     * Function stake and lock TCB's reward
     * @param tcbId - TEE Offer's completed and valid TCB contract
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    claimRewards(transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)();
            yield TxManager_1.default.execute(TCB.contract.methods.claimRewards(this.tcbId), transactionOptions);
        });
    }
    /**
     * Function unlock previously locked TCB rewards (by claimRewards)
     * @param tcbId - TCB contract address
     * @param unlockAmount - amount of tokens to unlock, max available amount = TeeOffer.getLockInfo(tcbAddress)
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    unlockRewards(transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)();
            yield TxManager_1.default.execute(TCB.contract.methods.unlockTcbReward(this.tcbId), transactionOptions);
        });
    }
    /**
     * Function for fetching all TCB data
     */
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            const tcb = yield TCB.contract.methods.getTcbById(this.tcbId).call();
            tcb.publicData.deviceID = (0, helper_1.unpackDeviceId)(tcb.publicData.deviceID);
            return tcb;
        });
    }
    /**
     * Function for fetching the given marks for recruited TCBs from the Tables of Consensus
     */
    getCheckingBlocksMarks() {
        return __awaiter(this, void 0, void 0, function* () {
            const tcb = yield TCB.contract.methods.getTcbById(this.tcbId).call();
            return {
                blocksIds: tcb.utilData.checkingBlocks,
                marks: tcb.utilData.checkingBlockMarks,
            };
        });
    }
    /**
     * Function for fetching TCB avaliable reward
     */
    getRewardAmount() {
        return TCB.contract.methods.getTcbReward(this.tcbId).call();
    }
}
exports.default = TCB;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVENCLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vZGVscy9UQ0IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFFQSxtRUFBMkM7QUFDM0MsOENBQW9EO0FBUXBELDRDQUFnRztBQUVoRyxNQUFNLEdBQUc7SUFJUCxZQUFZLEtBQW1CO1FBQzdCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFO1lBQ2pCLEdBQUcsQ0FBQyxRQUFRLEdBQUcsZ0NBQW1CLENBQUMsV0FBVyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDaEU7SUFDSCxDQUFDO0lBRWEsYUFBYSxDQUN6QixLQUEwQixFQUMxQixrQkFBdUM7O1lBRXZDLE1BQU0sbUJBQVMsQ0FBQyxPQUFPLENBQ3JCLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUNyRCxrQkFBa0IsQ0FDbkIsQ0FBQztRQUNKLENBQUM7S0FBQTtJQUVhLFVBQVUsQ0FDdEIsRUFBaUIsRUFDakIsS0FBYSxFQUNiLGtCQUF1Qzs7WUFFdkMsSUFBQSx3Q0FBK0IsRUFBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBRXBELE1BQU0saUJBQWlCLEdBQUcsSUFBQSxxQkFBWSxFQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNwRCxNQUFNLG1CQUFTLENBQUMsT0FBTyxDQUNyQixHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQzdCLElBQUksQ0FBQyxLQUFLLEVBQ1YsRUFBRSxDQUFDLFNBQVMsRUFDWixFQUFFLENBQUMsVUFBVSxFQUNiLGlCQUFpQixFQUNqQixLQUFLLENBQ04sRUFDRCxrQkFBa0IsQ0FDbkIsQ0FBQztRQUNKLENBQUM7S0FBQTtJQUVEOzs7Ozs7T0FNRztJQUNVLFdBQVcsQ0FDdEIs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