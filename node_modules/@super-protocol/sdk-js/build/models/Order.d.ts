import { OrderInfo, OrderResult, ExtendedOrderInfo, OrderStatus, OrderUsage, Origins, TransactionOptions, BlockchainId, TokenAmount } from '../types';
declare class Order {
    private static contract;
    private logger;
    selectedUsage?: OrderUsage;
    orderInfo?: OrderInfo;
    orderResult?: OrderResult;
    subOrders?: BlockchainId[];
    parentOrder?: BlockchainId;
    consumer?: string;
    origins?: Origins;
    startDate?: number;
    id: BlockchainId;
    constructor(orderId: BlockchainId);
    /**
     * Check if order exist
     */
    isExist(): Promise<boolean>;
    /**
     * Check if order is in `processing` state
     */
    isOrderProcessing(): Promise<boolean>;
    /**
     * Function for fetching avaliable for unlock order profit.
     */
    isOrderProfitAvailable(): Promise<TokenAmount>;
    /**
     * Function for fetching order price
     */
    calculateCurrentPrice(): Promise<TokenAmount>;
    /**
     * Function for fetching order info from blockchain
     */
    getOrderInfo(): Promise<OrderInfo>;
    private checkIfOrderExistsWithInterval;
    getConsumer(): Promise<string>;
    /**
     * Function for fetching order result from blockchain
     */
    getOrderResult(): Promise<OrderResult>;
    /**
     * Function for fetching sub orders from blockchain
     */
    getSubOrders(): Promise<BlockchainId[]>;
    /**
     * Function for fetching parent order from blockchain
     */
    getParentOrder(): Promise<BlockchainId>;
    /**
     * Function for fetching order options deposit spent from blockchain
     */
    getOptionsDepositSpent(): Promise<TokenAmount>;
    /**
     * Function for fetching order deposit spent from blockchain
     */
    getSelectedUsage(): Promise<OrderUsage>;
    /**
     * Function for fetching hold deposits sum of the order and its suborders
     */
    calculateTotalOrderDeposit(): Promise<TokenAmount>;
    /**
     * Function for fetching reserve for output order
     */
    calculateOrderOutputReserve(): Promise<TokenAmount>;
    /**
     * Function for fetching spent deposits sum of the order and its suborders
     */
    calculateTotalDepositSpent(): Promise<TokenAmount>;
    /**
     * Function for fetching unspent deposits sum of the order and its suborders
     */
    calculateTotalDepositUnspent(): Promise<TokenAmount>;
    /**
     * Fetch new Origins (createdDate, createdBy, modifiedDate and modifiedBy)
     */
    getOrigins(): Promise<Origins>;
    /**
     * Function for fetching parent order from blockchain
     */
    getAwaitingPayment(): Promise<boolean>;
    /**
     * Function for fetching deposit of order from blockchain
     */
    getDeposit(): Promise<TokenAmount>;
    /**
     * Function for fetching start of processing date
     */
    getStartDate(): Promise<number>;
    /**
     * Function for fetching parent order from blockchain
     */
    setAwaitingPayment(value: boolean, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Sets options deposit spent
     */
    setOptionsDepositSpent(value: TokenAmount, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Function for updating status of contract
     */
    updateStatus(status: OrderStatus, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Function for updating status of contract
     */
    cancelOrder(transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Starts suspended order
     */
    start(transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Updates order result
     */
    updateOrderResult(encryptedResult?: string, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Completes order
     */
    complete(status: OrderStatus, encryptedResult?: string, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Unlocks profit
     */
    unlockProfit(transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Function for creating sub orders for current order
     * @param subOrderInfo - order info for new subOrder
     * @param blockParentOrder - is sub order blocking
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     * @returns Promise<void> - Does not return id of created sub order!
     */
    createSubOrder(subOrderInfo: OrderInfo, blockParentOrder: boolean, deposit?: TokenAmount, transactionOptions?: TransactionOptions, checkTxBeforeSend?: boolean): Promise<void>;
    /**
     * Function for creating pack of sub orders (wokflow) for current order
     * @param subOrdersInfo - orders info for new subOrders
     * @param transactionOptions - object what contains action account and web3 instance
     * @returns {Promise<string[]>} - tx hashes
     */
    createSubOrders(subOrdersInfo: ExtendedOrderInfo[], transactionOptions: TransactionOptions): Promise<string[]>;
    /**
     * Function for adding event listeners to contract events
     * @param callback - function for processing each order related with event
     * @returns unsubscribe - function unsubscribing from event
     */
    onStatusUpdated(callback: onOrderStatusUpdatedCallback): () => void;
}
export type onOrderStatusUpdatedCallback = (status: OrderStatus) => void;
export default Order;
