"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = __importDefault(require("../logger"));
const helper_1 = require("../utils/helper");
const connectors_1 = require("../connectors");
const types_1 = require("../types");
const utils_1 = require("ethers/lib/utils");
const TeeOffers_1 = __importDefault(require("../staticModels/TeeOffers"));
const TxManager_1 = __importDefault(require("../utils/TxManager"));
const helpers_1 = require("../utils/helpers");
const constants_1 = require("../constants");
class Offer {
    constructor(offerId) {
        this.id = offerId;
        if (!Offer.contract) {
            Offer.contract = connectors_1.BlockchainConnector.getInstance().getContract();
        }
        this.logger = logger_1.default.child({
            className: 'Offer',
            offerId: this.id,
        });
    }
    /**
     * Function for fetching offer status from blockchain
     */
    isEnabled() {
        return Offer.contract.methods.isOfferEnabled(this.id).call();
    }
    /**
     * Updates name in offer info
     * @param name - new name
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    setName(name, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield TxManager_1.default.execute(Offer.contract.methods.setOfferName(this.id, name), transactionOptions);
            if (this.offerInfo)
                this.offerInfo.name = name;
        });
    }
    /**
     * Updates description in offer info
     * @param description - new description
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    setDescription(description, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield TxManager_1.default.execute(Offer.contract.methods.setOfferDescription(this.id, description), transactionOptions);
            if (this.offerInfo)
                this.offerInfo.description = description;
        });
    }
    /**
     * Updates offer info
     * @param newInfo - new offer info
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    setInfo(newInfo, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield TxManager_1.default.execute(Offer.contract.methods.setValueOfferInfo(this.id, newInfo), transactionOptions);
            if (this.offerInfo)
                this.offerInfo = newInfo;
        });
    }
    /**
     * Function for fetching offer info from blockchain
     */
    getInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!(yield this.checkIfOfferExistsWithInterval())) {
                throw Error(`Offer ${this.id} does not exist`);
            }
            const { info } = yield Offer.contract.methods.getValueOffer(this.id).call();
            this.offerInfo = (0, helper_1.cleanWeb3Data)(info);
            return this.offerInfo;
        });
    }
    /**
     * Function for fetching offer provider from blockchain (works for TEE and Value offers)
     */
    getProvider() {
        return __awaiter(this, void 0, void 0, function* () {
            this.provider = yield Offer.contract.methods.getOfferProviderAuthority(this.id).call();
            return this.provider;
        });
    }
    /**
     * Fetch offer type from blockchain (works for TEE and Value offers)
     */
    getOfferType() {
        return __awaiter(this, void 0, void 0, function* () {
            this.type = yield Offer.contract.methods.getOfferType(this.id).call();
            return this.type.toString();
        });
    }
    /**
     * Function for fetching TEE offer provider authority account from blockchain
     */
    getProviderAuthority() {
        return __awaiter(this, void 0, void 0, function* () {
            this.providerAuthority = yield Offer.contract.methods.getOfferProviderAuthority(this.id).call();
            return this.providerAuthority;
        });
    }
    /**
     * Fetch new Origins (createdDate, createdBy, modifiedDate and modifiedBy)
     */
    getOrigins() {
        return __awaiter(this, void 0, void 0, function* () {
            const origins = yield Offer.contract.methods
                .getOfferOrigins(this.id)
                .call()
                .then((origins) => (0, helper_1.cleanWeb3Data)(origins));
            // Convert blockchain time seconds to js time milliseconds
            origins.createdDate = Number(origins.createdDate) * 1000;
            origins.modifiedDate = Number(origins.modifiedDate) * 1000;
            return (this.origins = origins);
        });
    }
    /**
     * Function for fetching offer hold deposit
     */
    getMinDeposit(slotId) {
        return __awaiter(this, void 0, void 0, function* () {
            this.minDeposit = yield Offer.contract.methods
                .getOfferMinDeposit(this.id, slotId, '0', [], [])
                .call()
                .then((price) => (0, helper_1.convertBigIntToString)(price));
            return this.minDeposit;
        });
    }
    /**
     * Function for fetching cheapest value offer from blockchain
     */
    getCheapestPrice() {
        return Offer.contract.methods
            .getCheapestValueOffersPrice(this.id)
            .call()
            .then((price) => (0, helper_1.convertBigIntToString)(price));
    }
    isOfferExists() {
        return Offer.contract.methods.isOfferExists(this.id).call();
    }
    checkIfOfferExistsWithInterval() {
        return __awaiter(this, void 0, void 0, function* () {
            const offerExists = yield (0, helpers_1.tryWithInterval)({
                handler: () => this.isOfferExists(),
                checkResult: (exists) => {
                    if (!exists)
                        this.logger.debug(`Offer ${this.id} exists: ${exists}`);
                    return { isResultOk: exists };
                },
                retryInterval: constants_1.BLOCKCHAIN_CALL_RETRY_INTERVAL,
                retryMax: constants_1.BLOCKCHAIN_CALL_RETRY_ATTEMPTS,
            });
            return offerExists;
        });
    }
    /**
     * Function for fetching whether offer slot exists or not
     * @param slotId - Slot ID
     */
    isSlotExists(slotId) {
        return Offer.contract.methods.isValueOfferSlotExists(this.id, slotId).call();
    }
    /**
     * Function for fetching offer slot by id
     * @param slotId - Slot ID
     */
    getSlotById(slotId) {
        return __awaiter(this, void 0, void 0, function* () {
            const slot = yield Offer.contract.methods
                .getValueOfferSlotById(this.id, slotId)
                .call();
            const cpuDenominator = yield TeeOffers_1.default.getDenominator();
            return (0, helper_1.formatOfferSlot)(slot, cpuDenominator);
        });
    }
    /**
     * @returns this TEE offer slots count
     */
    getSlotsCount() {
        return __awaiter(this, void 0, void 0, function* () {
            return Number(yield Offer.contract.methods.getValueOfferSlotsCount(this.id).call());
        });
    }
    /**
     * Function for fetching  offer slots info from blockchain
     * @param begin - The first element of range.
     * @param end - One past the final element in the range.
     * @returns {Promise<ValueOfferSlot[]>}
     */
    getSlots(begin = 0, end = 999999) {
        return __awaiter(this, void 0, void 0, function* () {
            const slotsCount = Number(yield Offer.contract.methods.getValueOfferSlotsCount(this.id).call());
            if (slotsCount === 0) {
                return [];
            }
            const slots = yield Offer.contract.methods
                .getValueOfferSlots(this.id, begin, end)
                .call()
                .then((slots) => slots.map((slot) => (0, helper_1.transformComplexObject)(slot)));
            const cpuDenominator = yield TeeOffers_1.default.getDenominator();
            const slotsResult = slots.map((slot) => (0, helper_1.formatOfferSlot)(slot, cpuDenominator));
            return slotsResult;
        });
    }
    /**
     * Function for add slot usage to the value offer
     * @param slotInfo - slot info
     * @param optionInfo - option info
     * @param slotUsage - slot usage info
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    addSlot(slotInfo, optionInfo, slotUsage, externalId = 'default', transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            slotInfo = (0, helper_1.packSlotInfo)(slotInfo, yield TeeOffers_1.default.getDenominator());
            const formattedExternalId = (0, utils_1.formatBytes32String)(externalId);
            const transactionCall = Offer.contract.methods.addValueOfferSlot(this.id, formattedExternalId, slotInfo, optionInfo, slotUsage);
            yield TxManager_1.default.execute(transactionCall, transactionOptions);
        });
    }
    /**
     * Function for update slot usage of value offer
     * @param slotInfo - new slot info
     * @param optionInfo - new option info
     * @param slotUsage - new slot usage info
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    updateSlot(slotId, newSlotInfo, newOptionInfo, newUsage, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            newSlotInfo = (0, helper_1.packSlotInfo)(newSlotInfo, yield TeeOffers_1.default.getDenominator());
            yield TxManager_1.default.execute(Offer.contract.methods.updateValueOfferSlot(this.id, slotId, newSlotInfo, newOptionInfo, newUsage), transactionOptions);
        });
    }
    /**
     * Function for delete slot usage from offer
     * @param slotId - Slot ID
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    deleteSlot(slotId, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield TxManager_1.default.execute(Offer.contract.methods.deleteValueOfferSlot(this.id, slotId), transactionOptions);
        });
    }
    /**
     * Function for disabling offer
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    disable(transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield TxManager_1.default.execute(Offer.contract.methods.disableOffer(this.id), transactionOptions);
        });
    }
    /**
     * Function for enabling offer
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    enable(transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield TxManager_1.default.execute(Offer.contract.methods.enableOffer(this.id), transactionOptions);
        });
    }
    /**
     * Checks if passed offer match restrictions in this offer
     * @param offerId - id of offer what needs to be checked
     */
    isRestrictionsPermitThatOffer(offerId) {
        return Offer.contract.methods.isOfferRestrictionsPermitOtherOffer(this.id, offerId).call();
    }
    /**
     * Checks if this offer contains restrictions of a certain type
     * @param type - type of offer which needs to be checked
     */
    isRestrictedByOfferType(type) {
        return Offer.contract.methods.isOfferRestrictedByOfferType(this.id, type).call();
    }
}
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Offer.prototype, "isEnabled", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Offer.prototype, "getInfo", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Offer.prototype, "getProvider", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Offer.prototype, "getOfferType", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Offer.prototype, "getProviderAuthority", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Offer.prototype, "getOrigins", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], Offer.prototype, "getMinDeposit", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Offer.prototype, "getCheapestPrice", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Offer.prototype, "isOfferExists", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object, Object, Object, Object]),
    __metadata("design:returntype", Promise)
], Offer.prototype, "addSlot", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object, Object, Object, Object]),
    __metadata("design:returntype", Promise)
], Offer.prototype, "updateSlot", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Promise)
], Offer.prototype, "deleteSlot", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], Offer.prototype, "isRestrictionsPermitThatOffer", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], Offer.prototype, "isRestrictedByOfferType", null);
exports.default = Offer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT2ZmZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9kZWxzL09mZmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsdURBQW1DO0FBQ25DLDRDQVF5QjtBQUN6Qiw4Q0FBb0Q7QUFDcEQsb0NBV2tCO0FBQ2xCLDRDQUF1RDtBQUN2RCwwRUFBa0Q7QUFDbEQsbUVBQTJDO0FBQzNDLDhDQUFtRDtBQUNuRCw0Q0FBOEY7QUFFOUYsTUFBTSxLQUFLO0lBYVQsWUFBWSxPQUFxQjtRQUMvQixJQUFJLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUNsQixJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTtZQUNuQixLQUFLLENBQUMsUUFBUSxHQUFHLGdDQUFtQixDQUFDLFdBQVcsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ2xFO1FBQ0QsSUFBSSxDQUFDLE1BQU0sR0FBRyxnQkFBVSxDQUFDLEtBQUssQ0FBQztZQUM3QixTQUFTLEVBQUUsT0FBTztZQUNsQixPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUU7U0FDakIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOztPQUVHO0lBRUksU0FBUztRQUNkLE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMvRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNVLE9BQU8sQ0FBQyxJQUFZLEVBQUUsa0JBQXVDOztZQUN4RSxJQUFBLHdDQUErQixFQUFDLGtCQUFrQixDQUFDLENBQUM7WUFFcEQsTUFBTSxtQkFBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1lBQ2hHLElBQUksSUFBSSxD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