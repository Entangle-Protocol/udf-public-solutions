"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const helper_1 = require("../utils/helper");
const connectors_1 = require("../connectors");
const TxManager_1 = __importDefault(require("../utils/TxManager"));
const utils_1 = require("ethers/lib/utils");
const TeeOffers_1 = __importDefault(require("../staticModels/TeeOffers"));
const models_1 = require("../models");
class TeeOffer {
    constructor(offerId) {
        this.id = offerId;
        if (!TeeOffer.contract) {
            TeeOffer.contract = connectors_1.BlockchainConnector.getInstance().getContract();
        }
    }
    /**
     * Function for fetching offer status from the blockchain
     */
    isEnabled() {
        return TeeOffer.contract.methods.isOfferEnabled(this.id).call();
    }
    /**
     * Function for fetching offer hold deposit
     */
    getMinDeposit(slotId, slotCount, optionsIds, optionsCount) {
        return __awaiter(this, void 0, void 0, function* () {
            this.minDeposit = yield TeeOffer.contract.methods
                .getOfferMinDeposit(this.id, slotId, slotCount, optionsIds, optionsCount)
                .call()
                .then((deposit) => deposit.toString());
            return this.minDeposit;
        });
    }
    /**
     * @returns this TEE offer slots count
     */
    getSlotsCount() {
        return __awaiter(this, void 0, void 0, function* () {
            return Number(yield TeeOffer.contract.methods.getTeeOfferSlotsCount(this.id).call());
        });
    }
    /**
     * @returns True if offer is cancelable.
     */
    isOfferCancelable() {
        return __awaiter(this, void 0, void 0, function* () {
            this.isCancelable = yield TeeOffer.contract.methods.isOfferCancelable(this.id).call();
            return this.isCancelable;
        });
    }
    /**
     * Function for fetching TEE offer info from blockchain
     */
    getInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            const { info } = yield TeeOffer.contract.methods.getTeeOffer(this.id).call();
            this.offerInfo = (0, helper_1.cleanWeb3Data)(info);
            this.offerInfo.hardwareInfo = yield TeeOffers_1.default.unpackHardwareInfo(this.offerInfo.hardwareInfo);
            return this.offerInfo;
        });
    }
    /**
     * Function for fetching TEE offer hardware info from blockchain
     */
    getHardwareInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            const hardwareInfo = yield TeeOffer.contract.methods
                .getTeeOfferHardwareInfo(this.id)
                .call()
                .then((response) => (0, helper_1.cleanWeb3Data)(response));
            return TeeOffers_1.default.unpackHardwareInfo(hardwareInfo);
        });
    }
    /**
     * Function for fetching tee offer slot by id
     * @param optionId - Slot ID
     */
    getOptionById(optionId) {
        return TeeOffer.contract.methods
            .getOptionById(optionId)
            .call()
            .then((option) => (0, helper_1.formatTeeOfferOption)(option));
    }
    getOptions(begin = 0, end = 999999) {
        return __awaiter(this, void 0, void 0, function* () {
            const optionsCount = Number(yield TeeOffer.contract.methods.getTeeOfferOptionsCount(this.id).call());
            if (optionsCount === 0) {
                return [];
            }
            const teeOfferOption = yield TeeOffer.contract.methods
                .getTeeOfferOptions(this.id, begin, end)
                .call()
                .then((options) => options.map((option) => (0, helper_1.transformComplexObject)(option)));
            return teeOfferOption.map((option) => (0, helper_1.formatTeeOfferOption)(option));
        });
    }
    /**
     * Function for fetching whether tee offer slot exists or not
     * @param optionId - Option ID
     */
    isOptionExists(optionId) {
        return TeeOffer.contract.methods.isTeeOfferSlotExists(this.id, optionId).call();
    }
    /**
     * Function for add option usage to the tee offer
     * @param optionId - Option ID
     * @param info - New option info
     * @param usage - New slot usage info
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    addOption(info, usage, externalId = 'default', transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const contract = connectors_1.BlockchainConnector.getInstance().getContract();
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            const formattedExternalId = (0, utils_1.formatBytes32String)(externalId);
            yield TxManager_1.default.execute(contract.methods.addOption(this.id, formattedExternalId, info, usage), transactionOptions);
        });
    }
    /**
     * Function for update option info and usage
     * @param optionId - Option ID
     * @param newInfo - New option info
     * @param newUsage - New slot usage info
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    updateOption(optionId, newInfo, newUsage, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield TxManager_1.default.execute(TeeOffer.contract.methods.updateOption(this.id, optionId, newInfo, newUsage), transactionOptions);
        });
    }
    /**
     * Function for delete option
     * @param optionId - Option ID
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    deleteOption(optionId, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield TxManager_1.default.execute(TeeOffer.contract.methods.deleteOption(this.id, optionId), transactionOptions);
        });
    }
    initializeTcb(transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)();
            yield TxManager_1.default.execute(TeeOffer.contract.methods.initializeTcb(this.id), transactionOptions);
        });
    }
    initializeTcbAndAssignBlocks(transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.initializeTcb(transactionOptions);
            const tcbId = yield this.getInitializedTcbId();
            const tcb = new models_1.TCB(tcbId);
            yield tcb.assignLastBlocksToCheck(transactionOptions);
            yield tcb.assignSuspiciousBlocksToCheck(transactionOptions);
            return tcb;
        });
    }
    /**
     * Function initialize TCB and returns list of anothers' TCB for their checking
     * @param teeOfferId - id of TEE offer
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     * @returns tcbId and lists of anothers' TCB for their checking
     */
    getListsForVerification(transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)();
            const tcb = yield this.initializeTcbAndAssignBlocks(transactionOptions);
            const { blocksIds } = yield tcb.getCheckingBlocksMarks();
            const tcbsForVerification = [];
            for (let blockIndex = 0; blockIndex < blocksIds.length; blockIndex++) {
                const tcb = new models_1.TCB(blocksIds[blockIndex]);
                const tcbInfo = yield tcb.get();
                tcbsForVerification.push({
                    tcbId: blocksIds[blockIndex].toString(),
                    deviceId: tcbInfo.publicData.deviceID,
                    properties: tcbInfo.publicData.properties,
                    benchmark: tcbInfo.publicData.benchmark,
                    quote: tcbInfo.quote,
                    marks: tcbInfo.utilData.checkingBlockMarks,
                    checkingBlocks: tcbInfo.utilData.checkingBlocks.map((x) => x.toString()),
                });
            }
            return {
                tcbId: tcb.tcbId.toString(),
                tcbsForVerification,
            };
        });
    }
    /**
     * Function for fetching whether tee offer slot exists or not
     * @param slotId - Slot ID
     */
    isSlotExists(slotId) {
        return TeeOffer.contract.methods.isTeeOfferSlotExists(this.id, slotId).call();
    }
    /**
     * Function for fetching tee offer slot by id
     * @param slotId - Slot ID
     */
    getSlotById(slotId) {
        return __awaiter(this, void 0, void 0, function* () {
            const slot = yield TeeOffer.contract.methods
                .getTeeOfferSlotById(this.id, slotId)
                .call();
            const cpuDenominator = yield TeeOffers_1.default.getDenominator();
            return (0, helper_1.formatTeeOfferSlot)(slot, cpuDenominator);
        });
    }
    /**
     * Function for fetching TEE offer slots info from blockchain
     * @param begin - The first element of range.
     * @param end - One past the final element in the range.
     * @returns {Promise<TeeOfferSlot[]>}
     */
    getSlots(begin = 0, end = 999999) {
        return __awaiter(this, void 0, void 0, function* () {
            const teeOfferSlotsCount = Number(yield TeeOffer.contract.methods.getTeeOfferSlotsCount(this.id).call());
            if (teeOfferSlotsCount === 0) {
                return [];
            }
            const slots = yield TeeOffer.contract.methods
                .getTeeOfferSlots(this.id, begin, end)
                .call()
                .then((slots) => slots.map((slot) => (0, helper_1.transformComplexObject)(slot)));
            const cpuDenominator = yield TeeOffers_1.default.getDenominator();
            const slotsResult = slots.map((slot) => (0, helper_1.formatTeeOfferSlot)(slot, cpuDenominator));
            return slotsResult;
        });
    }
    /**
     * Function for add slot usage to the tee offer
     * @param info - New option info
     * @param usage - New slot usage info
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    addSlot(info, usage, externalId = 'default', transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            info = (0, helper_1.packSlotInfo)(info, yield TeeOffers_1.default.getDenominator());
            const formattedExternalId = (0, utils_1.formatBytes32String)(externalId);
            yield TxManager_1.default.execute(TeeOffer.contract.methods.addTeeOfferSlot(this.id, formattedExternalId, info, usage), transactionOptions);
        });
    }
    /**
     * Function for update slot usage to the tee offer
     * @param slotId - Slot ID
     * @param newInfo - New slot info
     * @param newUsage - New slot usage info
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    updateSlot(slotId, newInfo, newUsage, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            newInfo = (0, helper_1.packSlotInfo)(newInfo, yield TeeOffers_1.default.getDenominator());
            yield TxManager_1.default.execute(TeeOffer.contract.methods.updateTeeOfferSlot(this.id, slotId, newInfo, newUsage), transactionOptions);
        });
    }
    /**
     * Function for delete slot usage to the tee offer
     * @param slotId - Slot ID
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    deleteSlot(slotId, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield TxManager_1.default.execute(TeeOffer.contract.methods.deleteTeeOfferSlot(this.id, slotId), transactionOptions);
        });
    }
    /**
     * @param teeOfferId - TEE offer ID
     * @returns {Promise<string>} - Actual TCB ID
     */
    getActualTcbId() {
        return TeeOffer.contract.methods.getActualTcbId(this.id).call();
    }
    /**
     * Function return last inited TCB of TEE offer
     * @param teeOfferId - id of TEE offer
     * */
    getInitializedTcbId() {
        return TeeOffer.contract.methods.getInitializedTcbId(this.id).call();
    }
    isTcbCreationAvailable() {
        return __awaiter(this, void 0, void 0, function* () {
            const { offerNotBlocked, newEpochStarted, halfEpochPassed, benchmarkVerified } = yield TeeOffer.contract.methods.isTcbCreationAvailable(this.id).call();
            return offerNotBlocked && newEpochStarted && halfEpochPassed && benchmarkVerified;
        });
    }
    /**
     * Function for fetching TEE offer provider authority account from blockchain
     */
    getProviderAuthority() {
        return __awaiter(this, void 0, void 0, function* () {
            this.providerAuthority = yield TeeOffer.contract.methods
                .getOfferProviderAuthority(this.id)
                .call();
            return this.providerAuthority;
        });
    }
    /**
     * Fetch offer type from blockchain (works for TEE and Value offers)
     */
    getOfferType() {
        return __awaiter(this, void 0, void 0, function* () {
            this.type = yield TeeOffer.contract.methods.getOfferType(this.id).call();
            return this.type.toString();
        });
    }
    isTeeOfferVerifying() {
        return TeeOffer.contract.methods.isTeeOfferVerifying(this.id).call();
    }
    /**
     * Function for fetching TLB provider from blockchain
     */
    getTlb() {
        return __awaiter(this, void 0, void 0, function* () {
            const offerInfo = yield this.getInfo();
            return offerInfo.tlb;
        });
    }
    /**
     * Function for fetching violationRate for this TEE offer
     */
    getViolationRate() {
        return __awaiter(this, void 0, void 0, function* () {
            this.violationRate = (0, helper_1.convertBigIntToString)(yield TeeOffer.contract.methods.getTeeOfferViolationRate(this.id).call());
            return this.violationRate;
        });
    }
    /**
     * Fetch new Origins (createdDate, createdBy, modifiedDate and modifiedBy)
     */
    getOrigins() {
        return __awaiter(this, void 0, void 0, function* () {
            const origins = yield TeeOffer.contract.methods
                .getOfferOrigins(this.id)
                .call()
                .then((origins) => (0, helper_1.cleanWeb3Data)(origins));
            // Convert blockchain time seconds to js time milliseconds
            origins.createdDate = origins.createdDate * 1000;
            origins.modifiedDate = origins.modifiedDate * 1000;
            return (this.origins = origins);
        });
    }
    /**
     * Updates TLB in offer info
     * @param tlb - new TLB
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    addTlb(tlb, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield TxManager_1.default.execute(TeeOffer.contract.methods.setTeeOfferTlb(this.id, tlb), transactionOptions);
            if (this.offerInfo)
                this.offerInfo.tlb = tlb;
        });
    }
    /**
     * Updates name in offer info
     * @param name - new name
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    setName(name, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield TxManager_1.default.execute(TeeOffer.contract.methods.setOfferName(this.id, name), transactionOptions);
            if (this.offerInfo)
                this.offerInfo.name = name;
        });
    }
    /**
     * Updates offer info
     * @param newInfo - new offer info
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    setInfo(newInfo, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            newInfo.hardwareInfo = yield TeeOffers_1.default.packHardwareInfo(newInfo.hardwareInfo);
            yield TxManager_1.default.execute(TeeOffer.contract.methods.setTeeOfferInfo(this.id, newInfo), transactionOptions);
            if (this.offerInfo)
                this.offerInfo = newInfo;
        });
    }
    /**
     * Updates offer hardware info
     * @param newHardwareInfo - new offer hardware info
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    setHardwareInfo(newHardwareInfo, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            newHardwareInfo = yield TeeOffers_1.default.packHardwareInfo(newHardwareInfo);
            yield TxManager_1.default.execute(TeeOffer.contract.methods.setTeeOfferHardwareInfo(this.id, newHardwareInfo), transactionOptions);
        });
    }
    /**
     * Updates description in offer info
     * @param description - new description
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    setDescription(description, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield TxManager_1.default.execute(TeeOffer.contract.methods.setOfferDescription(this.id, description), transactionOptions);
            if (this.offerInfo)
                this.offerInfo.description = description;
        });
    }
    /**
     * Updates argsPublicKey and argsPublicKeyAlgo in order info
     * @param argsPublicKey - new argsPublicKey
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    setKeys(argsPublicKey, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield TxManager_1.default.execute(TeeOffer.contract.methods.setOfferPublicKey(this.id, argsPublicKey), transactionOptions);
            if (this.offerInfo) {
                this.offerInfo.argsPublicKey = argsPublicKey;
            }
        });
    }
    /**
     * Function for disabling TEE offer
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    disable(transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield TxManager_1.default.execute(TeeOffer.contract.methods.disableOffer(this.id), transactionOptions);
        });
    }
    /**
     * Function for enabling TEE offer
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    enable(transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield TxManager_1.default.execute(TeeOffer.contract.methods.enableOffer(this.id), transactionOptions);
        });
    }
}
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], TeeOffer.prototype, "isEnabled", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Number, Array, Array]),
    __metadata("design:returntype", Promise)
], TeeOffer.prototype, "getMinDeposit", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], TeeOffer.prototype, "isOfferCancelable", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], TeeOffer.prototype, "getInfo", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], TeeOffer.prototype, "getHardwareInfo", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object, Object, Object]),
    __metadata("design:returntype", Promise)
], TeeOffer.prototype, "addOption", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object, Object, Object]),
    __metadata("design:returntype", Promise)
], TeeOffer.prototype, "updateOption", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Promise)
], TeeOffer.prototype, "deleteOption", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TeeOffer.prototype, "initializeTcb", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TeeOffer.prototype, "initializeTcbAndAssignBlocks", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TeeOffer.prototype, "getListsForVerification", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object, Object, Object]),
    __metadata("design:returntype", Promise)
], TeeOffer.prototype, "addSlot", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object, Object, Object]),
    __metadata("design:returntype", Promise)
], TeeOffer.prototype, "updateSlot", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Promise)
], TeeOffer.prototype, "deleteSlot", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], TeeOffer.prototype, "getProviderAuthority", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], TeeOffer.prototype, "getOfferType", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], TeeOffer.prototype, "isTeeOfferVerifying", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], TeeOffer.prototype, "getTlb", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], TeeOffer.prototype, "getOrigins", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Promise)
], TeeOffer.prototype, "addTlb", null);
exports.default = TeeOffer;
//# sourceMappingURL=data:application/json;base64,