import { BlockchainId, TcbData, TcbPublicData, TcbVerifiedStatus, TransactionOptions } from '../types';
declare class TCB {
    tcbId: BlockchainId;
    private static contract;
    constructor(tcbId: BlockchainId);
    private applyTcbMarks;
    private setTcbData;
    /**
     * Add data to TeeConfirmationBlock and push it to Consensus
     * @param pb - struct of 'processed' data
     * @param quote - data generated from Enclave
     * @param marks - list of marks
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    addToSupply(pb: TcbPublicData, quote: string, marks: TcbVerifiedStatus[], transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Assign TCB from SuspiciousBlocks table to check
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    assignSuspiciousBlocksToCheck(transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Assign TCB from LastBlocks table to check
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    assignLastBlocksToCheck(transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Function stake and lock TCB's reward
     * @param tcbId - TEE Offer's completed and valid TCB contract
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    claimRewards(transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Function unlock previously locked TCB rewards (by claimRewards)
     * @param tcbId - TCB contract address
     * @param unlockAmount - amount of tokens to unlock, max available amount = TeeOffer.getLockInfo(tcbAddress)
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    unlockRewards(transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Function for fetching all TCB data
     */
    get(): Promise<TcbData>;
    /**
     * Function for fetching the given marks for recruited TCBs from the Tables of Consensus
     */
    getCheckingBlocksMarks(): Promise<{
        blocksIds: BlockchainId[];
        marks: TcbVerifiedStatus[];
    }>;
    /**
     * Function for fetching TCB avaliable reward
     */
    getRewardAmount(): Promise<bigint>;
}
export default TCB;
