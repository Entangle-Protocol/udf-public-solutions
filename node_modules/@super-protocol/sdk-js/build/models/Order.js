"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../types");
const logger_1 = __importDefault(require("../logger"));
const helper_1 = require("../utils/helper");
const utils_1 = require("ethers/lib/utils");
const connectors_1 = require("../connectors");
const TeeOffers_1 = __importDefault(require("../staticModels/TeeOffers"));
const TxManager_1 = __importDefault(require("../utils/TxManager"));
const helpers_1 = require("../utils/helpers");
const constants_1 = require("../constants");
class Order {
    constructor(orderId) {
        this.id = orderId;
        if (!Order.contract) {
            Order.contract = connectors_1.BlockchainConnector.getInstance().getContract();
        }
        this.logger = logger_1.default.child({ className: 'Order', orderId: this.id });
    }
    /**
     * Check if order exist
     */
    isExist() {
        return Order.contract.methods.isOrderValid(this.id).call();
    }
    /**
     * Check if order is in `processing` state
     */
    isOrderProcessing() {
        return Order.contract.methods.isOrderProcessing(this.id).call();
    }
    /**
     * Function for fetching avaliable for unlock order profit.
     */
    isOrderProfitAvailable() {
        return __awaiter(this, void 0, void 0, function* () {
            const parsedResponse = yield Order.contract.methods
                .isOrderProfitAvailable(this.id)
                .call()
                .then((response) => (0, helper_1.cleanWeb3Data)(response));
            return parsedResponse.profit;
        });
    }
    /**
     * Function for fetching order price
     */
    calculateCurrentPrice() {
        return Order.contract.methods
            .calculateOrderCurrentPrice(this.id)
            .call()
            .then((price) => price.toString());
    }
    /**
     * Function for fetching order info from blockchain
     */
    getOrderInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!(yield this.checkIfOrderExistsWithInterval())) {
                throw Error(`Order ${this.id} does not exist`);
            }
            const orderInfoParams = yield Order.contract.methods.getOrder(this.id).call();
            const orderInfo = Object.assign(Object.assign({}, (0, helper_1.cleanWeb3Data)(orderInfoParams[1])), { status: orderInfoParams[1].status.toString() });
            orderInfo.slots.optionsCount = orderInfo.slots.optionsCount.map((count) => Number(count));
            orderInfo.slots.slotCount = Number(orderInfo.slots.slotCount);
            return (this.orderInfo = orderInfo);
        });
    }
    checkIfOrderExistsWithInterval() {
        return __awaiter(this, void 0, void 0, function* () {
            const offerExists = yield (0, helpers_1.tryWithInterval)({
                handler: () => this.isExist(),
                checkResult: (exists) => {
                    if (!exists)
                        this.logger.debug(`Order ${this.id} exists: ${exists}`);
                    return { isResultOk: exists };
                },
                retryInterval: constants_1.BLOCKCHAIN_CALL_RETRY_INTERVAL,
                retryMax: constants_1.BLOCKCHAIN_CALL_RETRY_ATTEMPTS,
            });
            return offerExists;
        });
    }
    getConsumer() {
        return __awaiter(this, void 0, void 0, function* () {
            const consumer = yield Order.contract.methods.getOrder(this.id).call();
            this.consumer = consumer[0];
            return this.consumer;
        });
    }
    /**
     * Function for fetching order result from blockchain
     */
    getOrderResult() {
        return __awaiter(this, void 0, void 0, function* () {
            const orderResults = yield Order.contract.methods.getOrder(this.id).call();
            return (this.orderResult = (0, helper_1.cleanWeb3Data)(orderResults[2]));
        });
    }
    /**
     * Function for fetching sub orders from blockchain
     */
    getSubOrders() {
        return __awaiter(this, void 0, void 0, function* () {
            this.subOrders = yield Order.contract.methods
                .getOrderSubOrders(this.id)
                .call()
                .then((ids) => ids.map((id) => id.toString()));
            return this.subOrders;
        });
    }
    /**
     * Function for fetching parent order from blockchain
     */
    getParentOrder() {
        return __awaiter(this, void 0, void 0, function* () {
            this.parentOrder = yield Order.contract.methods
                .getOrderParentOrder(this.id)
                .call()
                .then((id) => id.toString());
            return this.parentOrder;
        });
    }
    /**
     * Function for fetching order options deposit spent from blockchain
     */
    getOptionsDepositSpent() {
        return Order.contract.methods
            .getOptionsDepositSpent(this.id)
            .call()
            .then((price) => price.toString());
    }
    /**
     * Function for fetching order deposit spent from blockchain
     */
    getSelectedUsage() {
        return __awaiter(this, void 0, void 0, function* () {
            this.selectedUsage = yield Order.contract.methods
                .getOrderSelectedUsage(this.id)
                .call()
                .then((selectedUsage) => (0, helper_1.cleanWeb3Data)(selectedUsage));
            const cpuDenominator = yield TeeOffers_1.default.getDenominator();
            this.selectedUsage.slotInfo = (0, helper_1.unpackSlotInfo)(this.selectedUsage.slotInfo, cpuDenominator);
            this.selectedUsage.slotUsage = (0, helper_1.formatUsage)(this.selectedUsage.slotUsage);
            this.selectedUsage.optionsCount = this.selectedUsage.optionsCount.map((item) => Number(item));
            this.selectedUsage.optionInfo = this.selectedUsage.optionInfo.map((optionInfo) => (0, helper_1.formatOptionInfo)(optionInfo));
            this.selectedUsage.optionUsage = this.selectedUsage.optionUsage.map((usage) => (0, helper_1.formatUsage)(usage));
            return this.selectedUsage;
        });
    }
    /**
     * Function for fetching hold deposits sum of the order and its suborders
     */
    calculateTotalOrderDeposit() {
        return Order.contract.methods
            .calculateTotalOrderDeposit(this.id)
            .call()
            .then((price) => price.toString());
    }
    /**
     * Function for fetching reserve for output order
     */
    calculateOrderOutputReserve() {
        return Order.contract.methods
            .calculateOrderOutputReserve(this.id)
            .call()
            .then((price) => price.toString());
    }
    /**
     * Function for fetching spent deposits sum of the order and its suborders
     */
    calculateTotalDepositSpent() {
        return Order.contract.methods
            .calculateTotalDepositSpent(this.id)
            .call()
            .then((price) => price.toString());
    }
    /**
     * Function for fetching unspent deposits sum of the order and its suborders
     */
    calculateTotalDepositUnspent() {
        return Order.contract.methods
            .calculateTotalDepositUnspent(this.id)
            .call()
            .then((price) => price.toString());
    }
    /**
     * Fetch new Origins (createdDate, createdBy, modifiedDate and modifiedBy)
     */
    getOrigins() {
        return __awaiter(this, void 0, void 0, function* () {
            const origins = yield Order.contract.methods
                .getOrderOrigins(this.id)
                .call()
                .then((origins) => (0, helper_1.cleanWeb3Data)(origins));
            // Convert blockchain time seconds to js time milliseconds
            origins.createdDate = Number(origins.createdDate) * 1000;
            origins.modifiedDate = Number(origins.modifiedDate) * 1000;
            return (this.origins = origins);
        });
    }
    /**
     * Function for fetching parent order from blockchain
     */
    getAwaitingPayment() {
        return Order.contract.methods.getAwaitingPayment(this.id).call();
    }
    /**
     * Function for fetching deposit of order from blockchain
     */
    getDeposit() {
        return Order.contract.methods
            .getOrderDeposit(this.id)
            .call()
            .then((price) => price.toString());
    }
    /**
     * Function for fetching start of processing date
     */
    getStartDate() {
        return __awaiter(this, void 0, void 0, function* () {
            return Number(yield Order.contract.methods.getStartDate(this.id).call());
        });
    }
    /**
     * Function for fetching parent order from blockchain
     */
    setAwaitingPayment(value, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield TxManager_1.default.execute(Order.contract.methods.setAwaitingPayment(this.id, value), transactionOptions);
        });
    }
    /**
     * Sets options deposit spent
     */
    setOptionsDepositSpent(value, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield TxManager_1.default.execute(Order.contract.methods.setOptionsDepositSpent(this.id, value), transactionOptions);
        });
    }
    /**
     * Function for updating status of contract
     */
    updateStatus(status, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            if (status === types_1.OrderStatus.Processing) {
                yield TxManager_1.default.execute(Order.contract.methods.processOrder(this.id), transactionOptions);
            }
            if (this.orderInfo)
                this.orderInfo.status = status;
        });
    }
    /**
     * Function for updating status of contract
     */
    cancelOrder(transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield TxManager_1.default.execute(Order.contract.methods.cancelOrder(this.id), transactionOptions);
        });
    }
    /**
     * Starts suspended order
     */
    start(transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield TxManager_1.default.execute(Order.contract.methods.startOrder(this.id), transactionOptions);
        });
    }
    /**
     * Updates order result
     */
    updateOrderResult(encryptedResult = '', transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield TxManager_1.default.execute(Order.contract.methods.updateOrderResult(this.id, encryptedResult), transactionOptions);
        });
    }
    /**
     * Completes order
     */
    complete(status, encryptedResult = '', transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield TxManager_1.default.execute(Order.contract.methods.completeOrder(this.id, status, encryptedResult), transactionOptions);
        });
    }
    /**
     * Unlocks profit
     */
    unlockProfit(transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield TxManager_1.default.execute(Order.contract.methods.unlockProfit(this.id), transactionOptions);
        });
    }
    /**
     * Function for creating sub orders for current order
     * @param subOrderInfo - order info for new subOrder
     * @param blockParentOrder - is sub order blocking
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     * @returns Promise<void> - Does not return id of created sub order!
     */
    createSubOrder(subOrderInfo, blockParentOrder, deposit, transactionOptions, checkTxBeforeSend = false) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            deposit = deposit !== null && deposit !== void 0 ? deposit : '0';
            const preparedInfo = Object.assign(Object.assign({}, subOrderInfo), { externalId: (0, utils_1.formatBytes32String)(subOrderInfo.externalId) });
            const params = {
                blockParentOrder,
                deposit,
            };
            if (checkTxBeforeSend) {
                yield TxManager_1.default.dryRun(Order.contract.methods.createSubOrder(this.id, preparedInfo, params), transactionOptions);
            }
            yield TxManager_1.default.execute(Order.contract.methods.createSubOrder(this.id, preparedInfo, params), transactionOptions);
        });
    }
    /**
     * Function for creating pack of sub orders (wokflow) for current order
     * @param subOrdersInfo - orders info for new subOrders
     * @param transactionOptions - object what contains action account and web3 instance
     * @returns {Promise<string[]>} - tx hashes
     */
    createSubOrders(subOrdersInfo, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            const promises = [];
            subOrdersInfo.map((subOrderInfo) => {
                const preparedInfo = Object.assign(Object.assign({}, subOrderInfo), { externalId: (0, utils_1.formatBytes32String)(subOrderInfo.externalId) });
                const params = {
                    blockParentOrder: subOrderInfo.blocking,
                    deposit: subOrderInfo.deposit,
                };
                const transactionCall = Order.contract.methods.createSubOrder(this.id, preparedInfo, params);
                promises.push(TxManager_1.default.execute(transactionCall, transactionOptions));
            });
            return (yield Promise.all(promises)).map((tx) => tx.transactionHash);
        });
    }
    /**
     * Function for adding event listeners to contract events
     * @param callback - function for processing each order related with event
     * @returns unsubscribe - function unsubscribing from event
     */
    onStatusUpdated(callback) {
        const logger = this.logger.child({ method: 'onOrderStatusUpdated' });
        // TODO: add ability to use this event without https provider initialization
        const contractWss = connectors_1.BlockchainEventsListener.getInstance().getContract();
        const subscription = contractWss.events.OrderStatusUpdated();
        subscription.on('data', (event) => {
            var _a;
            if (event.returnValues.orderId != this.id) {
                return;
            }
            const newStatus = (_a = event.returnValues.status) === null || _a === void 0 ? void 0 : _a.toString();
            if (this.orderInfo)
                this.orderInfo.status = newStatus;
            callback(newStatus);
        });
        subscription.on('error', (error) => {
            logger.warn(error);
        });
        return () => subscription.unsubscribe();
    }
}
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Order.prototype, "getOrderInfo", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Order.prototype, "getConsumer", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Order.prototype, "getOrderResult", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Order.prototype, "getSubOrders", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Order.prototype, "getParentOrder", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Order.prototype, "getOptionsDepositSpent", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Order.prototype, "getSelectedUsage", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Order.prototype, "calculateTotalOrderDeposit", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Order.prototype, "calculateOrderOutputReserve", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Order.prototype, "calculateTotalDepositSpent", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Order.prototype, "calculateTotalDepositUnspent", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Order.prototype, "getOrigins", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Order.prototype, "getAwaitingPayment", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Order.prototype, "getDeposit", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], Order.prototype, "getStartDate", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Boolean, Object]),
    __metadata("design:returntype", Promise)
], Order.prototype, "setAwaitingPayment", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Promise)
], Order.prototype, "setOptionsDepositSpent", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Promise)
], Order.prototype, "updateStatus", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], Order.prototype, "cancelOrder", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], Order.prototype, "start", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", Promise)
], Order.prototype, "updateOrderResult", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object, Object]),
    __metadata("design:returntype", Promise)
], Order.prototype, "complete", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], Order.prototype, "unlockProfit", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Boolean, String, Object, Object]),
    __metadata("design:returntype", Promise)
], Order.prototype, "createSubOrder", null);
__decorate([
    (0, helper_1.incrementMethodCall)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Array, Object]),
    __metadata("design:returntype", Promise)
], Order.prototype, "createSubOrders", null);
exports.default = Order;
//# sourceMappingURL=data:application/json;base64,