"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const helper_1 = require("../utils/helper");
const connectors_1 = require("../connectors");
const TxManager_1 = __importDefault(require("../utils/TxManager"));
const Consensus_1 = __importDefault(require("../staticModels/Consensus"));
class Provider {
    constructor(providerId) {
        this.providerId = providerId;
        if (!Provider.contract) {
            Provider.contract = connectors_1.BlockchainConnector.getInstance().getContract();
        }
    }
    modify(providerInfo, transactionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, helper_1.checkIfActionAccountInitialized)(transactionOptions);
            yield TxManager_1.default.execute(Provider.contract.methods.modifyProvider(providerInfo), transactionOptions);
        });
    }
    /**
     * Function for fetching provider info from blockchain
     */
    getInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            const providerInfoParams = yield Provider.contract.methods
                .getProviderInfo(this.providerId)
                .call()
                .then((providerInfo) => (0, helper_1.cleanWeb3Data)(providerInfo));
            return (this.providerInfo = providerInfoParams);
        });
    }
    /**
     * Function for fetching provider authority address from blockchain
     */
    getAuthority() {
        return this.providerId.toString();
    }
    /**
     * Function for fetching all value offers for this provider
     */
    getValueOffers() {
        return __awaiter(this, void 0, void 0, function* () {
            this.valueOffers = yield Provider.contract.methods
                .getProviderValueOffers(this.providerId)
                .call()
                .then((offers) => offers.map((offer) => offer.toString()));
            return this.valueOffers;
        });
    }
    /**
     * Function for fetching all TEE offers for this provider
     */
    getTeeOffers() {
        return __awaiter(this, void 0, void 0, function* () {
            this.teeOffers = yield Provider.contract.methods
                .getProviderTeeOffers(this.providerId)
                .call()
                .then((offers) => offers.map((offer) => offer.toString()));
            return this.teeOffers;
        });
    }
    /**
     * Function for fetching violationRate for this provider
     */
    getViolationRate() {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, helper_1.convertBigIntToString)(yield Provider.contract.methods.getProviderViolationRate(this.providerId).call());
        });
    }
    /**
     * Fetch new Origins (createdDate, createdBy, modifiedDate and modifiedBy)
     */
    getOrigins() {
        return __awaiter(this, void 0, void 0, function* () {
            const origins = yield Provider.contract.methods
                .getProviderOrigins(this.providerId)
                .call()
                .then((origins) => (0, helper_1.cleanWeb3Data)(origins));
            // Convert blockchain time seconds to js time milliseconds
            origins.createdDate = Number(origins.createdDate) * 1000;
            origins.modifiedDate = Number(origins.modifiedDate) * 1000;
            return (this.origins = origins);
        });
    }
    isProviderBanned() {
        return __awaiter(this, void 0, void 0, function* () {
            const violationRate = yield this.getViolationRate();
            const { CONSENSUS_MAX_PENALTIES } = yield Consensus_1.default.getConstants();
            return Number(violationRate) >= Number(CONSENSUS_MAX_PENALTIES);
        });
    }
    getOrdersLockedProfitList() {
        return Provider.contract.methods
            .getOrdersLockedProfitList(this.providerId)
            .call()
            .then((orders) => orders.map((order) => order.toString()));
    }
    getTcbLockedProfitList() {
        return Provider.contract.methods
            .getTcbLockedProfitList(this.providerId)
            .call()
            .then((tcbIds) => tcbIds.map((tcbId) => tcbId.toString()));
    }
}
exports.default = Provider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9kZWxzL1Byb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBRUEsNENBSXlCO0FBRXpCLDhDQUFvRDtBQUNwRCxtRUFBMkM7QUFDM0MsMEVBQWtEO0FBRWxELE1BQU0sUUFBUTtJQVdaLFlBQVksVUFBa0I7UUFDNUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUU7WUFDdEIsUUFBUSxDQUFDLFFBQVEsR0FBRyxnQ0FBbUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNyRTtJQUNILENBQUM7SUFFWSxNQUFNLENBQ2pCLFlBQTBCLEVBQzFCLGtCQUF1Qzs7WUFFdkMsSUFBQSx3Q0FBK0IsRUFBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBRXBELE1BQU0sbUJBQVMsQ0FBQyxPQUFPLENBQ3JCLFFBQVEsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsRUFDdEQsa0JBQWtCLENBQ25CLENBQUM7UUFDSixDQUFDO0tBQUE7SUFFRDs7T0FFRztJQUNVLE9BQU87O1lBQ2xCLE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxRQUFRLENBQUMsUUFBUSxDQUFDLE9BQU87aUJBQ3ZELGVBQWUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO2lCQUNoQyxJQUFJLEVBQUU7aUJBQ04sSUFBSSxDQUFDLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxJQUFBLHNCQUFhLEVBQUMsWUFBWSxDQUFpQixDQUFDLENBQUM7WUFFdkUsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLEdBQUcsa0JBQWtCLENBQUMsQ0FBQztRQUNsRCxDQUFDO0tBQUE7SUFFRDs7T0FFRztJQUNJLFlBQVk7UUFDakIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEs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