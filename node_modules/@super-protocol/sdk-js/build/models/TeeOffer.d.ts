import { TeeOfferInfo, TransactionOptions, OfferType, Origins, BlockchainId, TokenAmount } from '../types';
import { HardwareInfo, TeeOfferOption, TeeOfferSlot, OptionInfo, SlotUsage, SlotInfo } from '../types';
import { GetTcbRequest } from '@super-protocol/dto-js';
declare class TeeOffer {
    private static contract;
    id: BlockchainId;
    violationRate?: bigint | string;
    totalLocked?: TokenAmount;
    offerInfo?: TeeOfferInfo;
    type?: OfferType;
    providerAuthority?: string;
    provider?: string;
    enabled?: boolean;
    tcb?: string;
    tlbAddedTime?: number;
    tcbAddedTime?: number;
    origins?: Origins;
    isCancelable?: boolean;
    minDeposit?: TokenAmount;
    constructor(offerId: BlockchainId);
    /**
     * Function for fetching offer status from the blockchain
     */
    isEnabled(): Promise<boolean>;
    /**
     * Function for fetching offer hold deposit
     */
    getMinDeposit(slotId: BlockchainId, slotCount: number, optionsIds: BlockchainId[], optionsCount: number[]): Promise<TokenAmount>;
    /**
     * @returns this TEE offer slots count
     */
    getSlotsCount(): Promise<number>;
    /**
     * @returns True if offer is cancelable.
     */
    isOfferCancelable(): Promise<boolean>;
    /**
     * Function for fetching TEE offer info from blockchain
     */
    getInfo(): Promise<TeeOfferInfo>;
    /**
     * Function for fetching TEE offer hardware info from blockchain
     */
    getHardwareInfo(): Promise<HardwareInfo>;
    /**
     * Function for fetching tee offer slot by id
     * @param optionId - Slot ID
     */
    getOptionById(optionId: BlockchainId): Promise<TeeOfferOption>;
    getOptions(begin?: number, end?: number): Promise<TeeOfferOption[]>;
    /**
     * Function for fetching whether tee offer slot exists or not
     * @param optionId - Option ID
     */
    isOptionExists(optionId: BlockchainId): Promise<boolean>;
    /**
     * Function for add option usage to the tee offer
     * @param optionId - Option ID
     * @param info - New option info
     * @param usage - New slot usage info
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    addOption(info: OptionInfo, usage: SlotUsage, externalId?: string, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Function for update option info and usage
     * @param optionId - Option ID
     * @param newInfo - New option info
     * @param newUsage - New slot usage info
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    updateOption(optionId: BlockchainId, newInfo: OptionInfo, newUsage: SlotUsage, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Function for delete option
     * @param optionId - Option ID
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    deleteOption(optionId: BlockchainId, transactionOptions?: TransactionOptions): Promise<void>;
    initializeTcb(transactionOptions?: TransactionOptions): Promise<void>;
    private initializeTcbAndAssignBlocks;
    /**
     * Function initialize TCB and returns list of anothers' TCB for their checking
     * @param teeOfferId - id of TEE offer
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     * @returns tcbId and lists of anothers' TCB for their checking
     */
    getListsForVerification(transactionOptions?: TransactionOptions): Promise<GetTcbRequest>;
    /**
     * Function for fetching whether tee offer slot exists or not
     * @param slotId - Slot ID
     */
    isSlotExists(slotId: BlockchainId): Promise<boolean>;
    /**
     * Function for fetching tee offer slot by id
     * @param slotId - Slot ID
     */
    getSlotById(slotId: BlockchainId): Promise<TeeOfferSlot>;
    /**
     * Function for fetching TEE offer slots info from blockchain
     * @param begin - The first element of range.
     * @param end - One past the final element in the range.
     * @returns {Promise<TeeOfferSlot[]>}
     */
    getSlots(begin?: number, end?: number): Promise<TeeOfferSlot[]>;
    /**
     * Function for add slot usage to the tee offer
     * @param info - New option info
     * @param usage - New slot usage info
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    addSlot(info: SlotInfo, usage: SlotUsage, externalId?: string, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Function for update slot usage to the tee offer
     * @param slotId - Slot ID
     * @param newInfo - New slot info
     * @param newUsage - New slot usage info
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    updateSlot(slotId: BlockchainId, newInfo: SlotInfo, newUsage: SlotUsage, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Function for delete slot usage to the tee offer
     * @param slotId - Slot ID
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    deleteSlot(slotId: BlockchainId, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * @param teeOfferId - TEE offer ID
     * @returns {Promise<string>} - Actual TCB ID
     */
    getActualTcbId(): Promise<BlockchainId>;
    /**
     * Function return last inited TCB of TEE offer
     * @param teeOfferId - id of TEE offer
     * */
    getInitializedTcbId(): Promise<BlockchainId>;
    isTcbCreationAvailable(): Promise<boolean>;
    /**
     * Function for fetching TEE offer provider authority account from blockchain
     */
    getProviderAuthority(): Promise<string>;
    /**
     * Fetch offer type from blockchain (works for TEE and Value offers)
     */
    getOfferType(): Promise<OfferType>;
    isTeeOfferVerifying(): Promise<boolean>;
    /**
     * Function for fetching TLB provider from blockchain
     */
    getTlb(): Promise<string>;
    /**
     * Function for fetching violationRate for this TEE offer
     */
    getViolationRate(): Promise<bigint | string>;
    /**
     * Fetch new Origins (createdDate, createdBy, modifiedDate and modifiedBy)
     */
    getOrigins(): Promise<Origins>;
    /**
     * Updates TLB in offer info
     * @param tlb - new TLB
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    addTlb(tlb: string, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Updates name in offer info
     * @param name - new name
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    setName(name: string, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Updates offer info
     * @param newInfo - new offer info
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    setInfo(newInfo: TeeOfferInfo, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Updates offer hardware info
     * @param newHardwareInfo - new offer hardware info
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    setHardwareInfo(newHardwareInfo: HardwareInfo, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Updates description in offer info
     * @param description - new description
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    setDescription(description: string, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Updates argsPublicKey and argsPublicKeyAlgo in order info
     * @param argsPublicKey - new argsPublicKey
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    setKeys(argsPublicKey: string, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Function for disabling TEE offer
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    disable(transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Function for enabling TEE offer
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    enable(transactionOptions?: TransactionOptions): Promise<void>;
}
export default TeeOffer;
