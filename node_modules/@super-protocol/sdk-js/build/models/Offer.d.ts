import { SlotInfo, OptionInfo, SlotUsage, Origins, OfferInfo, OfferType, ValueOfferSlot, TransactionOptions, BlockchainId, TokenAmount } from '../types';
declare class Offer {
    private static contract;
    private logger;
    offerInfo?: OfferInfo;
    provider?: string;
    type?: OfferType;
    providerAuthority?: string;
    origins?: Origins;
    id: BlockchainId;
    enabled?: boolean;
    minDeposit?: TokenAmount;
    constructor(offerId: BlockchainId);
    /**
     * Function for fetching offer status from blockchain
     */
    isEnabled(): Promise<boolean>;
    /**
     * Updates name in offer info
     * @param name - new name
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    setName(name: string, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Updates description in offer info
     * @param description - new description
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    setDescription(description: string, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Updates offer info
     * @param newInfo - new offer info
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    setInfo(newInfo: OfferInfo, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Function for fetching offer info from blockchain
     */
    getInfo(): Promise<OfferInfo>;
    /**
     * Function for fetching offer provider from blockchain (works for TEE and Value offers)
     */
    getProvider(): Promise<string>;
    /**
     * Fetch offer type from blockchain (works for TEE and Value offers)
     */
    getOfferType(): Promise<OfferType>;
    /**
     * Function for fetching TEE offer provider authority account from blockchain
     */
    getProviderAuthority(): Promise<string>;
    /**
     * Fetch new Origins (createdDate, createdBy, modifiedDate and modifiedBy)
     */
    getOrigins(): Promise<Origins>;
    /**
     * Function for fetching offer hold deposit
     */
    getMinDeposit(slotId: BlockchainId): Promise<TokenAmount>;
    /**
     * Function for fetching cheapest value offer from blockchain
     */
    getCheapestPrice(): Promise<TokenAmount>;
    isOfferExists(): Promise<boolean>;
    private checkIfOfferExistsWithInterval;
    /**
     * Function for fetching whether offer slot exists or not
     * @param slotId - Slot ID
     */
    isSlotExists(slotId: BlockchainId): Promise<boolean>;
    /**
     * Function for fetching offer slot by id
     * @param slotId - Slot ID
     */
    getSlotById(slotId: BlockchainId): Promise<ValueOfferSlot>;
    /**
     * @returns this TEE offer slots count
     */
    getSlotsCount(): Promise<number>;
    /**
     * Function for fetching  offer slots info from blockchain
     * @param begin - The first element of range.
     * @param end - One past the final element in the range.
     * @returns {Promise<ValueOfferSlot[]>}
     */
    getSlots(begin?: number, end?: number): Promise<ValueOfferSlot[]>;
    /**
     * Function for add slot usage to the value offer
     * @param slotInfo - slot info
     * @param optionInfo - option info
     * @param slotUsage - slot usage info
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    addSlot(slotInfo: SlotInfo, optionInfo: OptionInfo, slotUsage: SlotUsage, externalId?: string, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Function for update slot usage of value offer
     * @param slotInfo - new slot info
     * @param optionInfo - new option info
     * @param slotUsage - new slot usage info
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    updateSlot(slotId: BlockchainId, newSlotInfo: SlotInfo, newOptionInfo: OptionInfo, newUsage: SlotUsage, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Function for delete slot usage from offer
     * @param slotId - Slot ID
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    deleteSlot(slotId: BlockchainId, transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Function for disabling offer
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    disable(transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Function for enabling offer
     * @param transactionOptions - object what contains alternative action account or gas limit (optional)
     */
    enable(transactionOptions?: TransactionOptions): Promise<void>;
    /**
     * Checks if passed offer match restrictions in this offer
     * @param offerId - id of offer what needs to be checked
     */
    isRestrictionsPermitThatOffer(offerId: BlockchainId): Promise<boolean>;
    /**
     * Checks if this offer contains restrictions of a certain type
     * @param type - type of offer which needs to be checked
     */
    isRestrictedByOfferType(type: OfferType): Promise<boolean>;
}
export default Offer;
