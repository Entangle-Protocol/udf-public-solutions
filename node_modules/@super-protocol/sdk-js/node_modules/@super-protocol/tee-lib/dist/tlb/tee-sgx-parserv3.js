"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TeeSgxParserV3 = void 0;
const buffer_1 = require("buffer/");
const errors_1 = require("./errors");
/**
 * Sgx quote parser (quote 3 version).
 *
 * https://download.01.org/intel-sgx/dcap-1.0.1/docs/Intel_SGX_ECDSA_QuoteGenReference_DCAP_API_Linux_1.0.1.pdf
 */
class TeeSgxParserV3 {
    parseQuote(data) {
        const { quoteHeaderSize, reportSize, userDataOffset, userDataSize } = TeeSgxParserV3;
        if (data.length < quoteHeaderSize + reportSize) {
            throw new errors_1.TeeSgxParserError('data has invalid length');
        }
        const quoteHeader = buffer_1.Buffer.from(data.slice(0, quoteHeaderSize));
        const report = buffer_1.Buffer.from(data.slice(quoteHeaderSize, quoteHeaderSize + reportSize));
        const version = quoteHeader.readUInt16LE(0);
        if (version < 2 || version > 3) {
            throw new errors_1.TeeSgxParserError('quote header has invalid or unsupported version');
        }
        const attestationKeyType = quoteHeader.readUInt16LE(2);
        if (attestationKeyType > 3) {
            throw new errors_1.TeeSgxParserError('quote header has invalid or unsupported attestation key type');
        }
        const userData = quoteHeader.slice(userDataOffset, userDataOffset + userDataSize);
        return {
            header: {
                version,
                attestationKeyType,
                userData,
            },
            report,
        };
    }
    parseReport(data) {
        const { reportSize, cpuSvnSize, reportMrEnclaveOffset, reportMrEnclaveSize, reportMrSignerOffset, reportMrSignerSize, reportDataOffset, reportDataSize, } = TeeSgxParserV3;
        if (data.length < reportSize) {
            throw new errors_1.TeeSgxParserError('data has invalid length');
        }
        const report = buffer_1.Buffer.from(data);
        const cpuSvn = report.slice(0, cpuSvnSize).toString('hex');
        const mrEnclave = report.slice(reportMrEnclaveOffset, reportMrEnclaveOffset + reportMrEnclaveSize);
        const mrSigner = report.slice(reportMrSignerOffset, reportMrSignerOffset + reportMrSignerSize);
        const dataHash = report.slice(reportDataOffset, reportDataOffset + reportDataSize);
        return {
            cpuSvn,
            mrEnclave,
            mrSigner,
            dataHash,
        };
    }
}
exports.TeeSgxParserV3 = TeeSgxParserV3;
TeeSgxParserV3.quoteHeaderSize = 48;
TeeSgxParserV3.reportSize = 384;
TeeSgxParserV3.userDataOffset = 28;
TeeSgxParserV3.userDataSize = 20;
TeeSgxParserV3.cpuSvnSize = 16;
TeeSgxParserV3.reportMrEnclaveOffset = 64;
TeeSgxParserV3.reportMrEnclaveSize = 32;
TeeSgxParserV3.reportMrSignerOffset = TeeSgxParserV3.reportMrEnclaveOffset + TeeSgxParserV3.reportMrEnclaveSize + /* reserved */ 32;
TeeSgxParserV3.reportMrSignerSize = 32;
TeeSgxParserV3.reportDataOffset = TeeSgxParserV3.reportMrSignerOffset +
    TeeSgxParserV3.reportMrSignerSize +
    /* reserved */ 96 +
    /* ISVProdID */ 2 +
    /* ISVSVN */ 2 +
    /* reserved */ 60;
TeeSgxParserV3.reportDataSize = 32; /* 64 in report, but we need 32 only for sha256 hash */
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVlLXNneC1wYXJzZXJ2My5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90bGIvdGVlLXNneC1wYXJzZXJ2My50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxvQ0FBeUM7QUFDekMscUNBQTZDO0FBSTdDOzs7O0dBSUc7QUFDSCxNQUFhLGNBQWM7SUFvQnpCLFVBQVUsQ0FBQyxJQUFnQjtRQUN6QixNQUFNLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsWUFBWSxFQUFFLEdBQUcsY0FBYyxDQUFDO1FBRXJGLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxlQUFlLEdBQUcsVUFBVSxFQUFFO1lBQzlDLE1BQU0sSUFBSSwwQkFBaUIsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1NBQ3hEO1FBRUQsTUFBTSxXQUFXLEdBQUcsZUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxlQUFlLENBQUMsQ0FBQyxDQUFDO1FBQzlELE1BQU0sTUFBTSxHQUFHLGVBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLEVBQUUsZUFBZSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFFcEYsTUFBTSxPQUFPLEdBQUcsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUU1QyxJQUFJLE9BQU8sR0FBRyxDQUFDLElBQUksT0FBTyxHQUFHLENBQUMsRUFBRTtZQUM5QixNQUFNLElBQUksMEJBQWlCLENBQUMsaURBQWlELENBQUMsQ0FBQztTQUNoRjtRQUVELE1BQU0sa0JBQWtCLEdBQUcsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV2RCxJQUFJLGtCQUFrQixHQUFHLENBQUMsRUFBRTtZQUMxQixNQUFNLElBQUksMEJBQWlCLENBQUMsOERBQThELENBQUMsQ0FBQztTQUM3RjtRQUVELE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsY0FBYyxFQUFFLGNBQWMsR0FBRyxZQUFZLENBQUMsQ0FBQztRQUVsRixPQUFPO1lBQ0wsTUFBTSxFQUFFO2dCQUNOLE9BQU87Z0JBQ1Asa0JBQWtCO2dCQUNsQixRQUFRO2FBQ1Q7WUFDRCxNQUFNO1NBQ1AsQ0FBQztJQUNKLENBQUM7SUFFRCxXQUFXLENBQUMsSUFBZ0I7UUFDMUIsTUFBTSxFQUNKLFVBQVUsRUFDVixVQUFVLEVBQ1YscUJBQXFCLEVBQ3JCLG1CQUFtQixFQUNuQixvQkFBb0IsRUFDcEIsa0JBQWtCLEVBQ2xCLGdCQUFnQixFQUNoQixjQUFjLEdBQ2YsR0FBRyxjQUFjLENBQUM7UUFFbkIsSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLFVBQVUsRUFBRTtZQUM1QixNQUFNLElBQUksMEJBQWlCLENBQUMseUJBQXlCLENBQUMsQ0FBQztTQUN4RDtRQUVELE1BQU0sTUFBTSxHQUFHLGVBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0IsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNELE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQzVCLHFCQUFxQixFQUNyQixxQkFBcUIsR0FBRyxtQkFBbUIsQ0FDNUMsQ0FBQztRQUNGLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsb0JBQW9CLEVBQUUsb0JBQW9CLEdBQUcsa0JBQWtCLENBQUMsQ0FBQztRQUMvRixNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLGdCQUFnQixHQUFHLGNBQWMsQ0FBQyxDQUFDO1FBRW5GLE9BQU87WUFDTCxNQUFNO1lBQ04sU0FBUztZQUNULFFBQVE7WUFDUixRQUFRO1NBQ1QsQ0FBQztJQUNKLENBQUM7O0FBckZILHdDQXNGQztBQXJGaUIsOEJBQWUsR0FBRyxFQUFFLENBQUM7QUFDckIseUJBQVUsR0FBRyxHQUFHLENBQUM7QUFDakIsNkJBQWMsR0FBRyxFQUFFLENBQUM7QUFDcEIsMkJBQVksR0FBRyxFQUFFLENBQUM7QUFDbEIseUJBQVUsR0FBRyxFQUFFLENBQUM7QUFDaEIsb0NBQXFCLEdBQUcsRUFBRSxDQUFDO0FBQzNCLGtDQUFtQixHQUFHLEVBQUUsQ0FBQztBQUN6QixtQ0FBb0IsR0FDbEMsY0FBYyxDQUFDLHFCQUFxQixHQUFHLGNBQWMsQ0FBQyxtQkFBbUIsR0FBRyxjQUFjLENBQUMsRUFBRSxDQUFDO0FBQ2hGLGlDQUFrQixHQUFHLEVBQUUsQ0FBQztBQUN4QiwrQkFBZ0IsR0FDOUIsY0FBYyxDQUFDLG9CQUFvQjtJQUNuQyxjQUFjLENBQUMsa0JBQWtCO0lBQ2pDLGNBQWMsQ0FBQyxFQUFFO0lBQ2pCLGVBQWUsQ0FBQyxDQUFDO0lBQ2pCLFlBQVksQ0FBQyxDQUFDO0lBQ2QsY0FBYyxDQUFDLEVBQUUsQ0FBQztBQUNKLDZCQUFjLEdBQUcsRUFBRSxDQUFDLENBQUMsdURBQXVEIn0=